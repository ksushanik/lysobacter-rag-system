#!/usr/bin/env python3
"""
–û–¥–∏–Ω–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Gemini –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
"""

import os
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

def test_single_gemini():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini"""
    
    api_key = os.getenv("OPENROUTER_API_KEY")
    model = os.getenv("OPENROUTER_MODEL")
    
    client = OpenAI(
        api_key=api_key,
        base_url="https://openrouter.ai/api/v1"
    )
    
    print(f"üß™ –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Gemini: {model}")
    
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": "–ö—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏—è—Ö"}],
            max_tokens=200,
            temperature=0.1
        )
        
        answer = response.choices[0].message.content
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
        print(f"üì® {answer}")
        
        if hasattr(response, 'usage') and response.usage:
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {response.usage.total_tokens}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_single_gemini() 