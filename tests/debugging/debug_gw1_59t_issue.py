#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —à—Ç–∞–º–º–æ–º GW1-59T
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from src.lysobacter_rag.rag_pipeline import RAGPipeline
from src.lysobacter_rag.rag_pipeline.structured_strain_analyzer import StructuredStrainAnalyzer

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° GW1-59T")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    rag = RAGPipeline()
    analyzer = StructuredStrainAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    question = "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?"
    print(f"üìã –í–æ–ø—Ä–æ—Å: {question}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
    response = rag.ask_question(question)
    print(f"\nüìÑ –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã:")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.get('confidence_score', 'N/A')}")
    print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response.get('answer', ''))}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    analysis = analyzer.analyze_strain_from_context(response.get('answer', ''), 'GW1-59T')
    
    print(f"\nüî¨ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print(f"–û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score:.2f}")
    print(f"–®—Ç–∞–º–º: {analysis.strain_name}")
    
    print(f"\nüìä –ö–ê–¢–ï–ì–û–†–ò–ò (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å):")
    categories = {
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": analysis.classification,
        "–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ": analysis.origin,
        "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è": analysis.morphology,
        "–£—Å–ª–æ–≤–∏—è —Ä–æ—Å—Ç–∞": analysis.growth_conditions,
        "–ë–∏–æ—Ö–∏–º–∏—è": analysis.biochemical_properties,
        "–•–µ–º–æ—Ç–∞–∫—Å–æ–Ω–æ–º–∏—è": analysis.chemotaxonomy,
        "–ì–µ–Ω–æ–º–∏–∫–∞": analysis.genomics,
        "–ë–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": analysis.biological_activity
    }
    
    filled_count = 0
    for category, value in categories.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(value, dict):
            filled = bool(value)  # –°–ª–æ–≤–∞—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç
            content_length = len(str(value))
        elif isinstance(value, str):
            filled = bool(value and value.strip())
            content_length = len(value) if value else 0
        else:
            filled = bool(value)
            content_length = len(str(value)) if value else 0
            
        status = "‚úÖ" if filled else "‚ùå"
        print(f"   {status} {category}: {content_length} —Å–∏–º–≤–æ–ª–æ–≤")
        if filled:
            filled_count += 1
    
    print(f"\nüìà –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò: {filled_count}/8 ({filled_count/8*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    sources = response.get('sources', [])
    print(f"\nüìö –ò–°–¢–û–ß–ù–ò–ö–ò: {len(sources)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    for i, source in enumerate(sources[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"   {i+1}. {source}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    print(f"\nüìù –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:")
    print("-" * 50)
    print(response.get('answer', '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))
    
    return analysis

if __name__ == "__main__":
    main() 