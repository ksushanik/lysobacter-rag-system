#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from src.lysobacter_rag.rag_pipeline import RAGPipeline

def test_morphological_comparison():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω–µ–µ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è"""
    print("üß™ –ö–õ–Æ–ß–ï–í–û–ô –¢–ï–°–¢: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
    rag = RAGPipeline()
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    query = "–°—Ä–∞–≤–Ω–∏—Ç–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π"
    
    print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
    print("-" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    response = rag.ask_question(query)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    analysis_type = response.get('analysis_type', 'standard')
    species_count = response.get('species_analyzed', 0)
    confidence = response.get('confidence', 0)
    sources_count = response.get('num_sources_used', 0)
    
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"   –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤–∏–¥–æ–≤: {species_count}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources_count}")
    
    # –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success_criteria = {
        'comparative_analysis': analysis_type == 'comparative',
        'multiple_species': species_count >= 10,
        'high_confidence': confidence >= 0.5,
        'sufficient_sources': sources_count >= 10
    }
    
    print(f"\n‚úÖ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–®–ù–û–°–¢–ò:")
    for criterion, passed in success_criteria.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"   {criterion}: {status}")
    
    overall_success = all(success_criteria.values())
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –£–°–ü–ï–•' if overall_success else '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
    answer = response.get('answer', '')
    if len(answer) > 500:
        preview = answer[:500] + "..."
    else:
        preview = answer
        
    print(f"\nüí¨ –†–ê–ó–í–ï–†–ù–£–¢–´–ô –û–¢–í–ï–¢ (–ø—Ä–µ–≤—å—é):")
    print("-" * 70)
    print(preview)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    quality_indicators = {
        'has_table': '|' in answer and '–í–∏–¥' in answer,
        'has_species_names': 'Lysobacter' in answer,
        'has_morphological_terms': any(term in answer.lower() for term in ['–º–æ—Ä—Ñ–æ–ª–æ–≥', '—Ñ–æ—Ä–º–∞', '—Ä–∞–∑–º–µ—Ä', '–∫–ª–µ—Ç–∫']),
        'structured_format': '###' in answer or '##' in answer,
        'has_conclusions': '–í–´–í–û–î–´' in answer or '–≤—ã–≤–æ–¥—ã' in answer
    }
    
    print(f"\nüìã –ö–ê–ß–ï–°–¢–í–û –û–¢–í–ï–¢–ê:")
    for indicator, present in quality_indicators.items():
        status = "‚úÖ" if present else "‚ùå"
        print(f"   {status} {indicator}")
    
    quality_score = sum(quality_indicators.values()) / len(quality_indicators)
    print(f"\nüìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.1%}")
    
    return {
        'success': overall_success,
        'quality_score': quality_score,
        'species_analyzed': species_count,
        'response': response
    }

def compare_with_old_system():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã"""
    print("\n\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú")
    print("=" * 70)
    
    old_result = {
        'answer': "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π.",
        'species_analyzed': 0,
        'has_table': False,
        'quality_score': 0.0
    }
    
    print("‚ùå –°–¢–ê–†–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –û—Ç–≤–µ—Ç: {old_result['answer']}")
    print(f"   –í–∏–¥–æ–≤: {old_result['species_analyzed']}")
    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {old_result['quality_score']:.1%}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    result = test_morphological_comparison()
    
    print(f"\n‚úÖ –ù–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –í–∏–¥–æ–≤: {result['species_analyzed']}")
    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']:.1%}")
    
    improvement = {
        'species_increase': result['species_analyzed'] - old_result['species_analyzed'],
        'quality_improvement': result['quality_score'] - old_result['quality_score'],
        'functionality_added': result['success']
    }
    
    print(f"\nüöÄ –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–æ–≤: +{improvement['species_increase']}")
    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: +{improvement['quality_improvement']:.1%}")
    print(f"   –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {'–î–∞' if improvement['functionality_added'] else '–ù–µ—Ç'}")
    
    return improvement

if __name__ == "__main__":
    compare_with_old_system() 