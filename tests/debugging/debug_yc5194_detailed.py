#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è YC5194
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent))

from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor

def debug_yc5194_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ YC5194"""
    
    print("üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê YC5194")
    print("=" * 50)
    
    # –§–∞–π–ª —Å YC5194
    yc5194_file = Path("data/Lysobacter capsici_sp_nov_with_antimicro.pdf")
    
    if not yc5194_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {yc5194_file}")
        return False
    
    print(f"üìñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {yc5194_file.name}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ë–ï–ó —É–º–Ω–æ–≥–æ —á–∞–Ω–∫–∏–Ω–≥–∞
    extractor = AdvancedPDFExtractor(use_smart_chunking=False)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        print(f"\nüìù –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
        document = extractor.extract_document(yc5194_file)
        
        print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ {len(document.elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ
        for i, element in enumerate(document.elements[:3]):
            print(f"\nüîç –≠–õ–ï–ú–ï–ù–¢ {i}:")
            print(f"   –¢–∏–ø: {type(element)}")
            print(f"   –ê—Ç—Ä–∏–±—É—Ç—ã: {dir(element)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            text_methods = ['text', 'content', 'get_text', 'to_text']
            found_text = False
            
            for method in text_methods:
                if hasattr(element, method):
                    try:
                        if callable(getattr(element, method)):
                            text = getattr(element, method)()
                        else:
                            text = getattr(element, method)
                        
                        if text:
                            print(f"   ‚úÖ {method}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                            print(f"      –ù–∞—á–∞–ª–æ: {text[:100]}...")
                            found_text = True
                            
                            # –ò—â–µ–º YC5194
                            if "YC5194" in text:
                                print(f"      üéØ YC5194 –ù–ê–ô–î–ï–ù!")
                            break
                        else:
                            print(f"   ‚ùå {method}: –ø—É—Å—Ç–æ–π")
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è {method}: –æ—à–∏–±–∫–∞ - {e}")
            
            if not found_text:
                print(f"   ‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                print(f"   üîç –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã:")
                for attr in dir(element):
                    if not attr.startswith('_'):
                        try:
                            value = getattr(element, attr)
                            if not callable(value):
                                print(f"      {attr}: {type(value)} = {str(value)[:50]}...")
                        except:
                            pass
        
        return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    debug_yc5194_detailed() 