#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""
import sys
sys.path.insert(0, 'src')

from lysobacter_rag.indexer import Indexer
import numpy as np

def main():
    print("üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 50)
    
    indexer = Indexer()
    collection = indexer.collection
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ YC5194
    query_embedding = indexer.embedding_model.encode(["YC5194"])
    
    print(f"üß¨ –≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è 'YC5194' —Å–æ–∑–¥–∞–Ω: {len(query_embedding[0])} —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å")
    
    # –î–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ ChromaDB –Ω–∞–ø—Ä—è–º—É—é
    print("\n=== –ü–û–ò–°–ö –ß–ï–†–ï–ó CHROMADB –ù–ê–ü–†–Ø–ú–£–Æ ===")
    chroma_results = collection.query(
        query_embeddings=[query_embedding[0].tolist()],
        n_results=10,
        include=['documents', 'metadatas', 'distances']
    )
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ ChromaDB: {len(chroma_results['documents'][0])}")
    
    for i, (doc, metadata, distance) in enumerate(zip(
        chroma_results['documents'][0],
        chroma_results['metadatas'][0], 
        chroma_results['distances'][0]
    )):
        contains_yc = 'YC5194' in doc
        print(f"\n{i+1}. –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance:.3f}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç YC5194: {contains_yc}")
        print(f"   –§–∞–π–ª: {metadata.get('source_pdf', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {doc[:100]}...")
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ω–∞—à –∏–Ω–¥–µ–∫—Å–µ—Ä
    print("\n\n=== –ü–û–ò–°–ö –ß–ï–†–ï–ó –ù–ê–® INDEXER ===")
    indexer_results = indexer.search("YC5194", top_k=10)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ indexer: {len(indexer_results)}")
    
    for i, result in enumerate(indexer_results):
        contains_yc = 'YC5194' in result['text']
        print(f"\n{i+1}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_score']:.3f}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç YC5194: {contains_yc}")
        print(f"   –§–∞–π–ª: {result['metadata'].get('source_pdf', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {result['text'][:100]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    print("\n\n=== –¢–ï–°–¢–ò–†–£–ï–ú –î–†–£–ì–ò–ï –ó–ê–ü–†–û–°–´ ===")
    test_queries = [
        "Lysobacter capsici YC5194",
        "—à—Ç–∞–º–º YC5194", 
        "characteristics YC5194",
        "YC5194 pepper rhizosphere"
    ]
    
    for query in test_queries:
        print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
        results = indexer.search(query, top_k=3)
        
        yc_found = False
        for result in results:
            if 'YC5194' in result['text']:
                yc_found = True
                break
                
        print(f"   –ù–∞–π–¥–µ–Ω YC5194: {yc_found}")
        if results:
            print(f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {results[0]['relevance_score']:.3f}")
            print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç YC5194: {'YC5194' in results[0]['text']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —Å YC5194
    print("\n\n=== –ê–ù–ê–õ–ò–ó –≠–ú–ë–ï–î–î–ò–ù–ì–û–í –ß–ê–ù–ö–û–í –° YC5194 ===")
    
    all_data = collection.get()
    yc_chunks = []
    yc_indices = []
    
    for i, doc in enumerate(all_data['documents']):
        if 'YC5194' in doc:
            yc_chunks.append(doc)
            yc_indices.append(i)
    
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–∑ {len(yc_chunks)} —á–∞–Ω–∫–æ–≤ —Å YC5194...")
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —ç—Ç–∏—Ö —á–∞–Ω–∫–æ–≤
    for i, (chunk, idx) in enumerate(zip(yc_chunks[:5], yc_indices[:5])):
        chunk_embedding = indexer.embedding_model.encode([chunk])
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º "YC5194"
        similarity = np.dot(query_embedding[0], chunk_embedding[0]) / (
            np.linalg.norm(query_embedding[0]) * np.linalg.norm(chunk_embedding[0])
        )
        
        metadata = all_data['metadatas'][idx]
        
        print(f"\nüìÑ –ß–∞–Ω–∫ {i+1}:")
        print(f"   –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å 'YC5194': {similarity:.3f}")
        print(f"   –§–∞–π–ª: {metadata.get('source_pdf', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        print(f"   –¢–∏–ø: {metadata.get('chunk_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        print(f"   –ü–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤: {chunk[:150]}...")

if __name__ == "__main__":
    main() 