#!/usr/bin/env python3
"""
–°–†–û–ß–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï YC5194 –í –ë–ê–ó–£
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent))

from lysobacter_rag.indexer.indexer import Indexer
from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor
from lysobacter_rag.data_processor import DocumentChunk

def add_yc5194():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å YC5194 –≤ –±–∞–∑—É"""
    
    print("üéØ –°–†–û–ß–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï YC5194")
    print("=" * 40)
    
    # –§–∞–π–ª —Å YC5194
    yc5194_file = Path("data/Lysobacter capsici_sp_nov_with_antimicro.pdf")
    
    if not yc5194_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {yc5194_file}")
        return False
    
    print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {yc5194_file.name}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    extractor = AdvancedPDFExtractor(use_smart_chunking=True)
    indexer = Indexer()
    
    try:
        # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
        print("üìù –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç...")
        document = extractor.extract_document(yc5194_file)
        
        if not document.elements:
            print("‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
            
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(document.elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –®–∞–≥ 2: –£–º–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥
        print("üß¨ –ü—Ä–∏–º–µ–Ω—è—é —É–º–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥...")
        chunks = extractor.get_smart_chunks(document)
        
        if not chunks:
            print("‚ùå –ù–µ—Ç —á–∞–Ω–∫–æ–≤")
            return False
        
        chunk_sizes = [len(chunk['content']) for chunk in chunks]
        avg_size = sum(chunk_sizes) / len(chunk_sizes)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤, —Å—Ä. —Ä–∞–∑–º–µ—Ä {avg_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –®–∞–≥ 3: –ü–æ–∏—Å–∫ YC5194 –≤ —á–∞–Ω–∫–∞—Ö
        yc5194_chunks = []
        for i, chunk in enumerate(chunks):
            if "YC5194" in chunk['content']:
                yc5194_chunks.append(i)
                print(f"üéØ YC5194 –Ω–∞–π–¥–µ–Ω –≤ —á–∞–Ω–∫–µ {i}: {len(chunk['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –ü—Ä–µ–≤—å—é: {chunk['content'][:150]}...")
        
        if not yc5194_chunks:
            print("‚ö†Ô∏è YC5194 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞–Ω–∫–∞—Ö - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º")
            # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            for i, chunk in enumerate(chunks[:3]):
                print(f"   –ß–∞–Ω–∫ {i}: {chunk['content'][:100]}...")
        else:
            print(f"‚úÖ YC5194 –Ω–∞–π–¥–µ–Ω –≤ {len(yc5194_chunks)} —á–∞–Ω–∫–∞—Ö")
        
        # –®–∞–≥ 4: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DocumentChunk
        document_chunks = []
        for i, chunk in enumerate(chunks):
            doc_chunk = DocumentChunk(
                chunk_id=f"yc5194_{i}",
                text=chunk['content'],
                chunk_type=chunk['metadata'].get('chunk_type', 'text'),
                metadata=chunk['metadata']
            )
            document_chunks.append(doc_chunk)
        
        # –®–∞–≥ 5: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è
        print(f"üíæ –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é {len(document_chunks)} —á–∞–Ω–∫–æ–≤...")
        success = indexer.index_chunks(document_chunks)
        
        if not success:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return False
            
        print("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –®–∞–≥ 6: –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê:")
        
        results = indexer.search("Lysobacter capsici YC5194", top_k=3)
        
        if results:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            for i, result in enumerate(results):
                rel = result['relevance_score']
                has_yc = "YC5194" in result['text']
                print(f"   {i+1}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {rel:.3f}, YC5194: {'‚úÖ' if has_yc else '‚ùå'}")
                if has_yc:
                    print(f"      {result['text'][:100]}...")
        else:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
        stats = indexer.get_collection_stats()
        print(f"\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {stats.get('total_chunks', 0)} —á–∞–Ω–∫–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = add_yc5194()
    if success:
        print("\nüéâ YC5194 —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
    else:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å YC5194")
    exit(0 if success else 1) 