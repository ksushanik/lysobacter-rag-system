#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —à—Ç–∞–º–º–∞ Lysobacter capsici YC5194
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
from lysobacter_rag.rag_pipeline.fact_checker import FactChecker

def test_yc5194_facts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è YC5194"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —à—Ç–∞–º–º–∞ Lysobacter capsici YC5194")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    rag_system = EnhancedRAGPipeline(use_notebooklm_style=True)
    fact_checker = FactChecker()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã
    query = "–ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—Ç–∞–º–º–∞ Lysobacter capsici YC5194?"
    result = rag_system.ask_question(query, top_k=8, use_notebooklm_style=True)
    
    print(f"üìù –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(result.answer[:500] + "...")
    print()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è fact_checker
    evidence_chunks = []
    for source in result.sources:
        if hasattr(source, 'get'):
            text = source.get('content', source.get('text', ''))
        else:
            text = str(source)
        
        chunk = {
            'text': text,
            'metadata': {'source': 'database'}
        }
        evidence_chunks.append(chunk)
    
    print("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    for i, chunk in enumerate(evidence_chunks[:3], 1):
        preview = chunk['text'][:100].replace('\n', ' ')
        print(f"{i}. {preview}...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üå°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    # –ò—â–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
    import re
    temp_patterns = [
        r'(\d+)\s*[‚Äì-]\s*(\d+)\s*¬∞C',
        r'–æ—Ç\s+(\d+)\s*¬∞C\s+–¥–æ\s+(\d+)\s*¬∞C',
        r'–¥–∏–∞–ø–∞–∑–æ–Ω.*?(\d+).*?(\d+)\s*¬∞C'
    ]
    
    found_temps = []
    for pattern in temp_patterns:
        matches = re.findall(pattern, result.answer)
        for match in matches:
            temp_range = f"{match[0]}-{match[1]}¬∞C"
            found_temps.append(temp_range)
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã: {found_temps}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    for temp_claim in found_temps:
        fact_check = fact_checker.check_temperature_claim(
            temp_claim, 
            evidence_chunks, 
            "YC5194"
        )
        
        status = "‚úÖ –¢–û–ß–ù–û" if fact_check.is_accurate else "‚ùå –ù–ï–¢–û–ß–ù–û"
        print(f"   {temp_claim}: {status}")
        print(f"   –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {fact_check.evidence[:150]}...")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {fact_check.confidence:.2f}")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pH –¥–∞–Ω–Ω—ã–µ
    print("‚öóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ pH –¥–∞–Ω–Ω—ã—Ö:")
    ph_patterns = [
        r'pH\s+(\d+[.,]\d+)\s*[‚Äì-]\s*(\d+[.,]\d+)',
        r'–æ—Ç\s+pH\s+(\d+[.,]\d+)\s+–¥–æ\s+(\d+[.,]\d+)',
        r'–¥–∏–∞–ø–∞–∑–æ–Ω.*?pH.*?(\d+[.,]\d+).*?(\d+[.,]\d+)'
    ]
    
    found_ph = []
    for pattern in ph_patterns:
        matches = re.findall(pattern, result.answer)
        for match in matches:
            ph_range = f"pH {match[0]}-{match[1]}"
            found_ph.append(ph_range)
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ pH –¥–∏–∞–ø–∞–∑–æ–Ω—ã: {found_ph}")
    
    for ph_claim in found_ph:
        fact_check = fact_checker.check_ph_claim(
            ph_claim,
            evidence_chunks,
            "YC5194"
        )
        
        status = "‚úÖ –¢–û–ß–ù–û" if fact_check.is_accurate else "‚ùå –ù–ï–¢–û–ß–ù–û"
        print(f"   {ph_claim}: {status}")
        print(f"   –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {fact_check.evidence[:150]}...")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {fact_check.confidence:.2f}")
        print()

def compare_with_notebooklm():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã —Å NotebookLM"""
    
    print("üÜö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å NotebookLM")
    print("=" * 30)
    
    notebooklm_facts = {
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π_–¥–∏–∞–ø–∞–∑–æ–Ω": "15-37¬∞C",
        "–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ": "—Ä–∏–∑–æ—Å—Ñ–µ—Ä–∞ –ø–µ—Ä—Ü–∞, –ß–∏–Ω–¥–∂—É, –ö–æ—Ä–µ—è",
        "—Ä–∞–∑–º–µ—Ä_–∫–ª–µ—Ç–æ–∫": "0,3-0,5 √ó 2,0-20 –º–∫–º",
        "pH_–¥–∏–∞–ø–∞–∑–æ–Ω": "5,5-8,5",
        "–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è_—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "28¬∞C",
        "–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π_pH": "7,0-7,5"
    }
    
    print("üìã –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ—Ç NotebookLM:")
    for key, value in notebooklm_facts.items():
        print(f"   {key}: {value}")
    
    print("\nüí° –ó–∞–¥–∞—á–∞: RAG —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ —Ñ–∞–∫—Ç—ã!")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è YC5194")
    print("=" * 70)
    
    test_yc5194_facts()
    compare_with_notebooklm()
    
    print("\nüéØ –í—ã–≤–æ–¥—ã:")
    print("1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å FactChecker –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ")
    print("2. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—è—Ö")
    print("3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞–¥ –ø–æ–ª–Ω–æ—Ç–æ–π –æ—Ç–≤–µ—Ç–∞") 