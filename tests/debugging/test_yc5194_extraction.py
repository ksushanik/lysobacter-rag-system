#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è YC5194 —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent))

from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor

def test_yc5194_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è YC5194"""
    
    print("üîç –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø YC5194")
    print("=" * 50)
    
    # –§–∞–π–ª —Å YC5194
    yc5194_file = Path("data/Lysobacter capsici_sp_nov_with_antimicro.pdf")
    
    if not yc5194_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {yc5194_file}")
        return False
    
    print(f"üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {yc5194_file.name}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    extractor = AdvancedPDFExtractor(use_smart_chunking=True)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        print("\nüìù –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
        document = extractor.extract_document(yc5194_file)
        
        if not document.elements:
            print("‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return False
            
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(document.elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏
        print("\nüß¨ –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥...")
        chunks = extractor.get_smart_chunks(document)
        
        if not chunks:
            print("‚ùå –ù–µ—Ç —á–∞–Ω–∫–æ–≤")
            return False
        
        chunk_sizes = [len(chunk['content']) for chunk in chunks]
        avg_size = sum(chunk_sizes) / len(chunk_sizes)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤, —Å—Ä. —Ä–∞–∑–º–µ—Ä {avg_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º YC5194 –≤ —á–∞–Ω–∫–∞—Ö
        print(f"\nüéØ –ü–û–ò–°–ö YC5194 –í –ß–ê–ù–ö–ê–•:")
        yc5194_chunks = []
        
        for i, chunk in enumerate(chunks):
            content = chunk['content']
            if "YC5194" in content:
                yc5194_chunks.append(i)
                print(f"\nüìç –ß–∞–Ω–∫ {i} (—Ä–∞–∑–º–µ—Ä {len(content)} —Å–∏–º–≤–æ–ª–æ–≤):")
                print(f"   {content[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                issues = []
                if "¬∞C" not in content and ("temperature" in content.lower() or "temp" in content.lower()):
                    issues.append("–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è —Å–∏–º–≤–æ–ª–∞ ¬∞C")
                if "Œºm" not in content and ("microm" in content.lower() or "size" in content.lower()):
                    issues.append("–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è —Å–∏–º–≤–æ–ª–∞ Œºm")
                if "%" not in content and ("percent" in content.lower() or "concentration" in content.lower()):
                    issues.append("–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è —Å–∏–º–≤–æ–ª–∞ %")
                
                if issues:
                    print(f"   ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
                    for issue in issues:
                        print(f"      - {issue}")
                else:
                    print(f"   ‚úÖ –°–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if not yc5194_chunks:
            print("‚ùå YC5194 –ù–ï –ù–ê–ô–î–ï–ù –≤ —á–∞–Ω–∫–∞—Ö!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")
            yc5194_in_elements = False
            for i, element in enumerate(document.elements):
                if hasattr(element, 'text') and element.text and "YC5194" in element.text:
                    yc5194_in_elements = True
                    print(f"   ‚úÖ YC5194 –Ω–∞–π–¥–µ–Ω –≤ —ç–ª–µ–º–µ–Ω—Ç–µ {i}")
                    print(f"   –¢–∏–ø: {element.element_type}")
                    print(f"   –¢–µ–∫—Å—Ç: {element.text[:200]}...")
                    break
            
            if not yc5194_in_elements:
                print(f"   ‚ùå YC5194 –ù–ï –ù–ê–ô–î–ï–ù –¥–∞–∂–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö!")
                print(f"   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø!")
                return False
            else:
                print(f"   ‚ö†Ô∏è YC5194 –µ—Å—Ç—å –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö, –Ω–æ –ø–æ—Ç–µ—Ä—è–Ω –ø—Ä–∏ —á–∞–Ω–∫–∏–Ω–≥–µ")
                return False
        else:
            print(f"\n‚úÖ YC5194 –Ω–∞–π–¥–µ–Ω –≤ {len(yc5194_chunks)} —á–∞–Ω–∫–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        print(f"\nüîë –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –¢–ï–†–ú–ò–ù–û–í:")
        key_terms = [
            "Lysobacter capsici",
            "YC5194", 
            "temperature",
            "pH",
            "G+C content",
            "antimicrobial",
            "—Ä–∏–∑–æ—Å—Ñ–µ—Ä–∞",  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            "rhizosphere"
        ]
        
        found_terms = {}
        for term in key_terms:
            found_terms[term] = 0
            for chunk in chunks:
                if term.lower() in chunk['content'].lower():
                    found_terms[term] += 1
        
        for term, count in found_terms.items():
            if count > 0:
                print(f"   ‚úÖ {term}: –Ω–∞–π–¥–µ–Ω –≤ {count} —á–∞–Ω–∫–∞—Ö")
            else:
                print(f"   ‚ùå {term}: –ù–ï –ù–ê–ô–î–ï–ù")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        total_terms = len(key_terms)
        found_count = sum(1 for count in found_terms.values() if count > 0)
        success_rate = (found_count / total_terms) * 100
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: {found_count}/{total_terms} ({success_rate:.1f}%)")
        print(f"   YC5194 —á–∞–Ω–∫–æ–≤: {len(yc5194_chunks)}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {avg_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if len(yc5194_chunks) > 0 and success_rate >= 70:
            print(f"   üéâ –ö–ê–ß–ï–°–¢–í–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø: –•–û–†–û–®–ï–ï")
            return True
        elif len(yc5194_chunks) > 0:
            print(f"   ‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø: –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï")
            return True
        else:
            print(f"   ‚ùå –ö–ê–ß–ï–°–¢–í–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø: –ü–õ–û–•–û–ï")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_yc5194_extraction()
    if success:
        print(f"\n‚úÖ YC5194 –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º YC5194")
    exit(0 if success else 1) 