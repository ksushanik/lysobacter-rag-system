#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç RAG-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ç–∞–º–º–µ GW1-59T
"""

import os
from pathlib import Path
from config import config
from src.lysobacter_rag.pdf_extractor import PDFExtractor
from src.lysobacter_rag.data_processor import DataProcessor
from src.lysobacter_rag.indexer import Indexer
from src.lysobacter_rag.rag_pipeline import RAGPipeline

def quick_test_strain_gw1_59t():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ç–∞–º–º–µ GW1-59T"""
    
    print("üî¨ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ RAG-–°–ò–°–¢–ï–ú–´")
    print("üéØ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ç–∞–º–º–µ GW1-59T")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤
    data_dir = Path(config.DATA_DIR)
    pdf_files = list(data_dir.glob("*.pdf"))
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    
    if len(pdf_files) == 0:
        print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    test_files = pdf_files[:5]
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_files)} —Ñ–∞–π–ª–∞—Ö:")
    for pdf in test_files:
        print(f"   ‚Ä¢ {pdf.name}")
    
    try:
        # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        print(f"\nüì§ –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...")
        extractor = PDFExtractor()
        
        all_docs = []
        for pdf_file in test_files:
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {pdf_file.name}...")
            docs = extractor.extract_from_pdf(str(pdf_file))
            if docs:
                all_docs.extend(docs)
                print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(docs)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                print(f"   ‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
        
        print(f"üìä –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(all_docs)}")
        
        if len(all_docs) == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —à—Ç–∞–º–º–∞ GW1-59T
        mentions = []
        for doc in all_docs:
            text = doc.get('text', '').lower()
            if 'gw1-59t' in text or 'gw1-59' in text or 'gw159' in text:
                mentions.append(doc)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —à—Ç–∞–º–º–∞ GW1-59T: {len(mentions)}")
        
        # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüì§ –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        processor = DataProcessor()
        chunks = processor.process_documents(all_docs)
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á–∞–Ω–∫–∏)
        if len(chunks) > 0:
            print(f"\nüì§ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
            indexer = Indexer()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                indexer.delete_collection()
            except:
                pass
            
            indexer.index_chunks(chunks)
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
            
            # –®–∞–≥ 4: –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
            print(f"\nüì§ –®–∞–≥ 4: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...")
            
            test_queries = [
                "GW1-59T",
                "—à—Ç–∞–º–º GW1-59T", 
                "—à—Ç–∞–º–º GW1-59",
                "strain GW1-59T",
                "GW1 59 strain"
            ]
            
            for query in test_queries:
                print(f"üîç –ü–æ–∏—Å–∫: '{query}'")
                results = indexer.search(query, top_k=3)
                print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                
                for i, result in enumerate(results, 1):
                    relevance = result.get('relevance_score', 0)
                    source = result.get('metadata', {}).get('source_pdf', 'Unknown')
                    text_preview = result.get('text', '')[:100] + '...'
                    print(f"   {i}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.3f}")
                    print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                    print(f"      –¢–µ–∫—Å—Ç: {text_preview}")
                print()
            
            # –®–∞–≥ 5: –¢–µ—Å—Ç RAG-–ø–∞–π–ø–ª–∞–π–Ω–∞
            print(f"\nüì§ –®–∞–≥ 5: –¢–µ—Å—Ç RAG-–ø–∞–π–ø–ª–∞–π–Ω–∞...")
            
            try:
                rag = RAGPipeline()
                
                question = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —à—Ç–∞–º–º–µ GW1-59T"
                print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
                
                response = rag.ask_question(question)
                
                print(f"üí¨ –û—Ç–≤–µ—Ç:")
                print(f"   {response['answer']}")
                print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {response['num_sources_used']}")
                print(f"‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response['confidence']:.2f}")
                
                if response['sources']:
                    print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                    for source in response['sources']:
                        print(f"   ‚Ä¢ {source}")
                
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ RAG-–ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
                return False
        
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        return False

if __name__ == "__main__":
    success = quick_test_strain_gw1_59t()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! RAG-—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —à—Ç–∞–º–º–µ GW1-59T")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º.")
        
    print("\nüöÄ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python main.py")
    print("   streamlit run streamlit_app.py") 