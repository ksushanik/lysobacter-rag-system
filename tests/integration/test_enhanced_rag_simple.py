#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞  
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

def test_enhanced_system():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß¨ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        from lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
        
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        enhanced_rag = EnhancedRAGPipeline()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        print("\nüéØ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤:")
        test_query = "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?"
        query_type = enhanced_rag.prompt_system.detect_query_type(test_query)
        print(f"   –ó–∞–ø—Ä–æ—Å: {test_query}")
        print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: {query_type.value}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        print("\nüí¨ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:")
        result = enhanced_rag.ask_question(test_query)
        
        print(f"   –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {result.query_type}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.3f}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result.num_sources_used}")
        print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result.answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if result.metadata.get('has_tables'):
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {result.metadata['table_count']}")
        
        print(f"\nüìù –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(result.answer[:300] + "..." if len(result.answer) > 300 else result.answer)
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_enhanced_system()
    sys.exit(0 if success else 1) 