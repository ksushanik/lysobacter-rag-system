#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π
"""
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

from lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline, QueryType
from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
from config import config

def test_enhanced_vs_standard():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º"""
    
    print("üî¨ –°–†–ê–í–ù–ï–ù–ò–ï RAG –°–ò–°–¢–ï–ú")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_queries = [
        {
            'query': "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?",
            'expected_type': QueryType.STRAIN_ANALYSIS,
            'description': "–ê–Ω–∞–ª–∏–∑ —à—Ç–∞–º–º–∞"
        },
        {
            'query': "–°—Ä–∞–≤–Ω–∏—Ç–µ —à—Ç–∞–º–º—ã GW1-59T –∏ –¥—Ä—É–≥–∏–µ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–∏",
            'expected_type': QueryType.COMPARATIVE_ANALYSIS,
            'description': "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        },
        {
            'query': "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
            'expected_type': QueryType.TABLE_INTERPRETATION,
            'description': "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü"
        }
    ]
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º...")
        enhanced_rag = EnhancedRAGPipeline()
        standard_rag = RAGPipeline()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤: {len(enhanced_rag.get_query_types())}")
        
        for i, test_case in enumerate(test_queries, 1):
            print(f"\n{'='*60}")
            print(f"üß™ –¢–ï–°–¢ {i}: {test_case['description']}")
            print(f"üìù –ó–∞–ø—Ä–æ—Å: {test_case['query']}")
            print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {test_case['expected_type'].value}")
            print(f"{'='*60}")
            
            # –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            print("\nüî¨ –£–õ–£–ß–®–ï–ù–ù–ê–Ø RAG –°–ò–°–¢–ï–ú–ê:")
            print("-" * 40)
            
            start_time = time.time()
            enhanced_result = enhanced_rag.ask_question(test_case['query'])
            enhanced_time = time.time() - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {enhanced_time:.2f} —Å–µ–∫")
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: {enhanced_result.query_type}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced_result.confidence:.3f}")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {enhanced_result.num_sources_used}")
            print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {enhanced_result.metadata}")
            print(f"üìù –û—Ç–≤–µ—Ç ({len(enhanced_result.answer)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print(enhanced_result.answer[:300] + "..." if len(enhanced_result.answer) > 300 else enhanced_result.answer)
            
            # –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            print("\nüìö –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø RAG –°–ò–°–¢–ï–ú–ê:")
            print("-" * 40)
            
            start_time = time.time()
            standard_result = standard_rag.ask_question(test_case['query'])
            standard_time = time.time() - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {standard_time:.2f} —Å–µ–∫")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {standard_result['confidence']:.3f}")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {standard_result['num_sources_used']}")
            print(f"üìù –û—Ç–≤–µ—Ç ({len(standard_result['answer'])} —Å–∏–º–≤–æ–ª–æ–≤):")
            print(standard_result['answer'][:300] + "..." if len(standard_result['answer']) > 300 else standard_result['answer'])
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï:")
            print(f"   –í—Ä–µ–º—è: –£–ª—É—á—à–µ–Ω–Ω–∞—è {enhanced_time:.2f}—Å vs –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è {standard_time:.2f}—Å")
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(enhanced_result.answer)} vs {len(standard_result['answer'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced_result.confidence:.3f} vs {standard_result['confidence']:.3f}")
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º
        print(f"\n{'='*60}")
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú")
        print(f"{'='*60}")
        
        enhanced_stats = enhanced_rag.get_pipeline_stats()
        standard_stats = standard_rag.get_pipeline_stats()
        
        print("\nüî¨ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:")
        print(f"   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤: {enhanced_stats['enhanced_features']['specialized_prompts']}")
        print(f"   –¢–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(enhanced_stats['enhanced_features']['query_types'])}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü: {enhanced_stats['enhanced_features']['table_prioritization']}")
        
        print("\nüìö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:")
        print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {standard_stats.get('total_documents', 'N/A')}")
        print(f"   –ö–æ–ª–ª–µ–∫—Ü–∏–π: {standard_stats.get('collections', 'N/A')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()

def test_query_type_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–û–í –ó–ê–ü–†–û–°–û–í")
    print("=" * 60)
    
    try:
        enhanced_rag = EnhancedRAGPipeline()
        
        test_queries = [
            ("–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?", QueryType.STRAIN_ANALYSIS),
            ("–°—Ä–∞–≤–Ω–∏—Ç–µ —à—Ç–∞–º–º—ã –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π", QueryType.COMPARATIVE_ANALYSIS),
            ("–ö–∞–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —à—Ç–∞–º–º–∞–º–∏?", QueryType.COMPARATIVE_ANALYSIS),
            ("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É", QueryType.TABLE_INTERPRETATION),
            ("–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–∏?", QueryType.METHODOLOGY),
            ("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏—è—Ö", QueryType.GENERAL_SYNTHESIS),
        ]
        
        for query, expected_type in test_queries:
            detected_type = enhanced_rag.prompt_system.detect_query_type(query)
            status = "‚úÖ" if detected_type == expected_type else "‚ùå"
            print(f"{status} '{query}' -> {detected_type.value} (–æ–∂–∏–¥–∞–ª—Å—è: {expected_type.value})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("\nüéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    try:
        enhanced_rag = EnhancedRAGPipeline()
        
        while True:
            query = input("\nüîç –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if query.lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit']:
                break
            
            if not query:
                continue
            
            print("\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
            
            start_time = time.time()
            result = enhanced_rag.ask_question(query)
            process_time = time.time() - start_time
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {process_time:.2f} —Å–µ–∫")
            print(f"üéØ –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {result.query_type}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.3f}")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result.num_sources_used}")
            
            if result.metadata.get('has_tables'):
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {result.metadata['table_count']}")
            
            print(f"\nüí¨ –û–¢–í–ï–¢:")
            print("-" * 40)
            print(result.answer)
            
            if result.sources:
                print(f"\nüìö –ò–°–¢–û–ß–ù–ò–ö–ò:")
                for source in result.sources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   [{source['id']}] {source['document']} (—Å—Ç—Ä. {source.get('page', 'N/A')})")
                    if source.get('is_differential_table'):
                        print(f"       üî¨ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
    
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("üß¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô RAG –°–ò–°–¢–ï–ú–´ –î–õ–Ø –õ–ò–ó–û–ë–ê–ö–¢–ï–†–ò–ô")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    test_enhanced_vs_standard()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
    test_query_type_detection()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    try:
        response = input("\nüéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): ").strip().lower()
        if response in ['y', 'yes', '–¥–∞', '–¥']:
            interactive_test()
    except KeyboardInterrupt:
        pass
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 