#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

import time
import traceback
import re
from typing import Dict, List, Any, Tuple
from dataclasses import dataclass

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'scripts'))

from tests.quality.baseline_metrics import MetricsTracker, create_test_iteration_metrics
from src.lysobacter_rag.rag_pipeline import RAGPipeline
from src.lysobacter_rag.rag_pipeline.structured_strain_analyzer import StructuredStrainAnalyzer

@dataclass
class TestCase:
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    strain: str
    question: str
    expected_categories: List[str]
    min_score: float
    critical: bool = False  # –ö—Ä–∏—Ç–∏—á–Ω—ã–π –ª–∏ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏

class AutomatedTestSuite:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.rag_system = None
        self.metrics_tracker = MetricsTracker()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        self.test_cases = [
            TestCase(
                strain="YC5194",
                question="–ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—Ç–∞–º–º–∞ Lysobacter capsici YC5194?",
                expected_categories=["classification", "origin", "morphology", "growth_conditions", "biological_activity"],
                min_score=50.0,
                critical=True
            ),
            TestCase(
                strain="GW1-59T",
                question="–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?",
                expected_categories=["classification", "origin", "morphology", "growth_conditions"],
                min_score=50.0,
                critical=True
            ),
            TestCase(
                strain="YC5194",
                question="–ö–∞–∫–æ–≤–∞ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è —à—Ç–∞–º–º–∞ YC5194?",
                expected_categories=["morphology"],
                min_score=30.0,
                critical=False
            ),
            TestCase(
                strain="GW1-59T",
                question="–í –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ä–∞—Å—Ç–µ—Ç —à—Ç–∞–º–º GW1-59T?",
                expected_categories=["growth_conditions"],
                min_score=30.0,
                critical=False
            )
        ]
    
    def initialize_rag_system(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É"""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
            self.rag_system = RAGPipeline()
            self.strain_analyzer = StructuredStrainAnalyzer()
            print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
            print(traceback.format_exc())
            return False
    
    def run_single_test(self, test_case: TestCase) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π"""
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {test_case.strain}: {test_case.question[:50]}...")
        
        start_time = time.time()
        
        try:
            response = self.rag_system.ask_question(test_case.question)
            response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —à—Ç–∞–º–º–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            strain_name = self._extract_strain_name(test_case.question)
            strain_analysis = self.strain_analyzer.analyze_strain_from_context(
                response.get('answer', ''), strain_name
            )
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories_filled = self._count_filled_categories(strain_analysis)
            
            return {
                "success": True,
                "response": response,
                "strain_analysis": strain_analysis,
                "response_time_ms": response_time,
                "categories_filled": categories_filled,
                "structure_confidence": strain_analysis.confidence_score,
                "strain_characteristics": {
                    "classification": strain_analysis.classification,
                    "origin": strain_analysis.origin,
                    "morphology": strain_analysis.morphology,
                    "growth_conditions": strain_analysis.growth_conditions,
                    "biochemistry": strain_analysis.biochemical_properties,
                    "chemotaxonomy": strain_analysis.chemotaxonomy,
                    "genomics": strain_analysis.genomics,
                    "biological_activity": strain_analysis.biological_activity
                }
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_case.strain}: {e}")
            return {
                "success": False,
                "error": str(e),
                "response_time_ms": (time.time() - start_time) * 1000
            }
    
    def run_full_test_suite(self, iteration_name: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"""
        print(f"\nüöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {iteration_name}")
        print("=" * 70)
        
        if not self.initialize_rag_system():
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG —Å–∏—Å—Ç–µ–º—É"}
        
        test_results = {}
        total_time = 0
        critical_failures = 0
        
        for test_case in self.test_cases:
            result = self.run_single_test(test_case)
            test_results[f"{test_case.strain}_{len(test_results)}"] = result
            
            if result.get("success"):
                score = self.calculate_test_score(result, test_case)
                print(f"   üìä –ë–∞–ª–ª: {score:.1f} (–º–∏–Ω–∏–º—É–º: {test_case.min_score})")
                
                if score < test_case.min_score and test_case.critical:
                    critical_failures += 1
                    print(f"   ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ: {score:.1f} < {test_case.min_score}")
                
                total_time += result.get("response_time_ms", 0)
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                if test_case.critical:
                    critical_failures += 1
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏
        iteration_metrics = create_test_iteration_metrics(iteration_name, test_results)
        iteration_metrics.response_time_ms = total_time / len(self.test_cases)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        regression_count = self.check_for_regressions(test_results)
        iteration_metrics.regression_count = regression_count
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏
        success = critical_failures == 0 and self.meets_iteration_threshold(iteration_metrics)
        
        test_summary = {
            "iteration_name": iteration_name,
            "success": success,
            "critical_failures": critical_failures,
            "total_tests": len(self.test_cases),
            "metrics": iteration_metrics,
            "results": test_results
        }
        
        self.print_test_summary(test_summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.metrics_tracker.add_iteration_result(iteration_metrics)
        
        return test_summary
    
    def calculate_test_score(self, result: Dict[str, Any], test_case: TestCase) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç"""
        if not result.get("success"):
            return 0.0
        
        categories_filled = result.get("categories_filled", 0)
        confidence_score = result.get("structure_confidence", 0)
        
        # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª: –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π + —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        categories_score = (categories_filled / 8) * 100
        confidence_score_percent = confidence_score * 100
        
        return (categories_score + confidence_score_percent) / 2
    
    def check_for_regressions(self, current_results: Dict[str, Any]) -> int:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏"""
        regressions = 0
        baseline = self.metrics_tracker.baseline
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ö—É–∂–µ –±–∞–∑–æ–≤–æ–≥–æ
        for strain in ["YC5194", "GW1-59T"]:
            baseline_score = baseline.strain_scores.get(strain, 0)
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —à—Ç–∞–º–º–∞
            current_score = 0
            for key, result in current_results.items():
                if strain in key and result.get("success"):
                    current_score = self.calculate_test_score(result, self.test_cases[0])
                    break
            
            if current_score > 0 and current_score < baseline_score - 10:  # –†–µ–≥—Ä–µ—Å—Å–∏—è >10 –±–∞–ª–ª–æ–≤
                regressions += 1
                print(f"‚ö†Ô∏è –†–ï–ì–†–ï–°–°–ò–Ø –¥–ª—è {strain}: {baseline_score:.1f} ‚Üí {current_score:.1f}")
        
        return regressions
    
    def meets_iteration_threshold(self, metrics) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞"""
        thresholds = {
            "–ò—Ç–µ—Ä–∞—Ü–∏—è 1": 50,
            "–ò—Ç–µ—Ä–∞—Ü–∏—è 2": 65,
            "–ò—Ç–µ—Ä–∞—Ü–∏—è 3": 75
        }
        
        threshold = thresholds.get(metrics.iteration_name, 50)
        return metrics.overall_score >= threshold
    
    def print_test_summary(self, summary: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"\nüìã –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        metrics = summary["metrics"]
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if summary["success"]:
            print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é")
        else:
            print("‚ùå –ò–¢–ï–†–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê")
            print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–ª–æ–≤: {summary['critical_failures']}")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"   –û–±—â–∏–π –±–∞–ª–ª: {metrics.overall_score:.1f}")
        print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics.response_time_ms:.0f}–º—Å")
        print(f"   –†–µ–≥—Ä–µ—Å—Å–∏–π: {metrics.regression_count}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if summary["success"]:
            print("   ‚Ä¢ –ú–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å –≤ production")
            print("   ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏")
        else:
            if summary["critical_failures"] > 0:
                print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
                print("   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            if metrics.regression_count > 0:
                print("   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    def _extract_strain_name(self, question: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —à—Ç–∞–º–º–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ YC5194, GW1-59T –∏ —Ç.–¥.
        patterns = [
            r'(YC\d+)',
            r'(GW\d+-\d+T?)',
            r'([A-Z]+\d+[-_]?\d*T?)',
            r'(—à—Ç–∞–º–º[–∞–µ]?\s+([A-Z][A-Za-z0-9\-_]+))',
            r'(strain\s+([A-Z][A-Za-z0-9\-_]+))'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, question, re.IGNORECASE)
            if match:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è —à—Ç–∞–º–º–∞
                groups = match.groups()
                return groups[1] if len(groups) > 1 else groups[0]
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –∏–º—è
        return "Unknown"
    
    def _count_filled_categories(self, characteristics: 'StrainCharacteristics') -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = [
            characteristics.classification,
            characteristics.origin,
            characteristics.morphology,
            characteristics.growth_conditions,
            characteristics.biochemical_properties,
            characteristics.chemotaxonomy,
            characteristics.genomics,
            characteristics.biological_activity
        ]
        
        filled_count = 0
        for category in categories:
            if category and any(category.values()):  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                filled_count += 1
        
        return filled_count

def run_iteration_test(iteration_name: str = "–ò—Ç–µ—Ä–∞—Ü–∏—è 1"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏"""
    suite = AutomatedTestSuite()
    return suite.run_full_test_suite(iteration_name)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import argparse
    
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--iteration", default="–ò—Ç–µ—Ä–∞—Ü–∏—è 1", help="–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    print("üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    result = run_iteration_test(args.iteration)
    
    if result.get("success"):
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û")
        exit(1) 