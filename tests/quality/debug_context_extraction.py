#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
sys.path.append('src')

from src.lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
import json

def debug_context_extraction():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Å—Ç—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
    try:
        rag = EnhancedRAGPipeline(use_notebooklm_style=True)
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ YC5194
    test_query = "–ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—Ç–∞–º–º–∞ Lysobacter capsici YC5194?"
    
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å: {test_query}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = rag.ask_question(query=test_query, top_k=10)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(result.sources)}")
        print(f"- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence}")
        print(f"- –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {result.query_type}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        print(f"\nüî¨ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
        for i, source in enumerate(result.sources):
            print(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫ {i+1}:")
            print(f"  –ö–ª—é—á–∏: {list(source.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è
            content_fields = ['content', 'text', 'page_content', 'chunk_text']
            content_found = False
            
            for field in content_fields:
                if field in source and source[field]:
                    print(f"  ‚úÖ {field}: {len(str(source[field]))} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"     –ù–∞—á–∞–ª–æ: {str(source[field])[:100]}...")
                    content_found = True
                    break
            
            if not content_found:
                print(f"  ‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª—è—Ö: {content_fields}")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for key, value in source.items():
                if key not in content_fields:
                    print(f"  üìã {key}: {type(value)} - {str(value)[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç RAG
        print(f"\nüìù –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç RAG:")
        print(f"–î–ª–∏–Ω–∞: {len(result.answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–ù–∞—á–∞–ª–æ: {result.answer[:200]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def test_direct_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –∏–Ω–¥–µ–∫—Å–µ—Ä–µ"""
    
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–µ—Ä–µ")
    print("-" * 40)
    
    try:
        from src.lysobacter_rag.indexer import Indexer
        
        indexer = Indexer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "YC5194",
            "Lysobacter capsici",
            "capsici YC5194",
            "GW1-59T",
            "Lysobacter antarcticus"
        ]
        
        for query in test_queries:
            print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
            
            results = indexer.search(query, top_k=5)
            print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            for i, result in enumerate(results):
                print(f"  {i+1}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('distance', 'N/A')}")
                
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                text = None
                for field in ['text', 'content', 'page_content', 'chunk_text']:
                    if field in result and result[field]:
                        text = result[field]
                        break
                
                if text:
                    print(f"     –¢–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤): {text[:100]}...")
                else:
                    print(f"     ‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–ª—é—á–∏: {list(result.keys())}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_context_extraction()
    test_direct_search() 