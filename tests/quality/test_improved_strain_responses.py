#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –æ —à—Ç–∞–º–º–∞—Ö
"""

import sys
import os
sys.path.append('src')

from src.lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
from src.lysobacter_rag.rag_pipeline.structured_strain_analyzer import StructuredStrainAnalyzer
import json
from datetime import datetime

def test_improved_strain_responses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –£–õ–£–ß–®–ï–ù–ù–û–ô RAG —Å–∏—Å—Ç–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    try:
        rag = EnhancedRAGPipeline(use_notebooklm_style=True)
        strain_analyzer = StructuredStrainAnalyzer()
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —à—Ç–∞–º–º–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        {
            "question": "–ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—Ç–∞–º–º–∞ Lysobacter capsici YC5194?",
            "strain": "YC5194",
            "strain_full_name": "Lysobacter capsici YC5194"
        },
        {
            "question": "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?",
            "strain": "GW1-59T",
            "strain_full_name": "GW1-59T"
        }
    ]
    
    results = {}
    
    for i, test_case in enumerate(test_questions, 1):
        print(f"\nüî¨ –£–õ–£–ß–®–ï–ù–ù–´–ô —Ç–µ—Å—Ç {i}: {test_case['strain']}")
        print("-" * 50)
        print(f"–í–æ–ø—Ä–æ—Å: {test_case['question']}")
        
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
            rag_result = rag.ask_question(
                query=test_case['question'],
                top_k=15,  # –ë–æ–ª—å—à–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
                use_notebooklm_style=True
            )
            
            print(f"\nüìä –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
            print(f"- –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {rag_result.num_sources_used}")
            print(f"- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å RAG: {rag_result.confidence:.3f}")
            
            # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            context_parts = []
            for source in rag_result.sources:
                if 'content' in source:
                    context_parts.append(source['content'])
                elif 'text' in source:
                    context_parts.append(source['text'])
            
            context = "\n\n".join(context_parts)
            
            # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if context.strip():
                strain_characteristics = strain_analyzer.analyze_strain_from_context(
                    context, test_case['strain_full_name']
                )
                
                # –®–∞–≥ 4: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                structured_answer = strain_analyzer.format_structured_response(strain_characteristics)
                
                print(f"\nüìù –£–õ–£–ß–®–ï–ù–ù–´–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                print(structured_answer)
                
                print(f"\nüìà –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏:")
                print(f"- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {strain_characteristics.confidence_score:.3f}")
                print(f"- –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {_count_filled_categories(strain_characteristics)}/8")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                results[test_case['strain']] = {
                    "question": test_case['question'],
                    "original_answer": rag_result.answer,
                    "structured_answer": structured_answer,
                    "rag_confidence": rag_result.confidence,
                    "structure_confidence": strain_characteristics.confidence_score,
                    "sources_count": rag_result.num_sources_used,
                    "categories_filled": _count_filled_categories(strain_characteristics),
                    "strain_characteristics": {
                        "classification": strain_characteristics.classification,
                        "origin": strain_characteristics.origin,
                        "morphology": strain_characteristics.morphology,
                        "growth_conditions": strain_characteristics.growth_conditions,
                        "biochemical": strain_characteristics.biochemical_properties,
                        "chemotaxonomy": strain_characteristics.chemotaxonomy,
                        "genomics": strain_characteristics.genomics,
                        "biological_activity": strain_characteristics.biological_activity,
                        "unique_features": strain_characteristics.unique_features
                    }
                }
            else:
                print(f"\n‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                results[test_case['strain']] = {
                    "question": test_case['question'],
                    "error": "–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                    "rag_confidence": rag_result.confidence,
                    "sources_count": rag_result.num_sources_used
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            results[test_case['strain']] = {
                "question": test_case['question'],
                "error": str(e)
            }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    results_file = f"tests/quality/improved_strain_test_results_{timestamp}.json"
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    # –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò")
    print("=" * 50)
    
    for strain, result in results.items():
        if 'error' not in result:
            print(f"\nüî¨ {strain}:")
            print(f"   üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {result.get('categories_filled', 0)}/8")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {result.get('structure_confidence', 0):.3f}")
            print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å RAG: {result.get('rag_confidence', 0):.3f}")
            print(f"   üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result.get('sources_count', 0)}")
    
    return results

def _count_filled_categories(characteristics) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = [
        characteristics.classification,
        characteristics.origin,
        characteristics.morphology,
        characteristics.growth_conditions,
        characteristics.biochemical_properties,
        characteristics.chemotaxonomy,
        characteristics.genomics,
        characteristics.biological_activity
    ]
    
    return sum(1 for cat in categories if cat)

def compare_with_previous_results():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    print(f"\nüí° –ü–õ–ê–ù –î–ê–õ–¨–ù–ï–ô–®–ò–• –£–õ–£–ß–®–ï–ù–ò–ô:")
    print("-" * 40)
    print("1. üîç –ï—Å–ª–∏ YC5194 –≤—Å–µ –µ—â–µ –ø—Ä–æ–≤–∞–ª - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫")
    print("2. üìã –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("3. üéØ –£–ª—É—á—à–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("4. üß™ –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
    print("5. üìä –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤")

if __name__ == "__main__":
    results = test_improved_strain_responses()
    compare_with_previous_results() 