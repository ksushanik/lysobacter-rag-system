#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ—Ç–µ—Ä–∏ —Å–∏–º–≤–æ–ª–æ–≤
"""

import sys
import os
from pathlib import Path
import re
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent))

from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor

def diagnose_extraction_quality():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF"""
    
    print("üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø PDF")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –í—ã—è–≤–∏—Ç—å –ø–æ—Ç–µ—Ä–∏ –Ω–∞—É—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö")
    print()
    
    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    critical_symbols = {
        "¬∞C": "–≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è",
        "Œºm": "–º–∏–∫—Ä–æ–º–µ—Ç—Ä—ã", 
        "Œºg": "–º–∏–∫—Ä–æ–≥—Ä–∞–º–º—ã",
        "Œºl": "–º–∏–∫—Ä–æ–ª–∏—Ç—Ä—ã",
        "%": "–ø—Ä–æ—Ü–µ–Ω—Ç—ã",
        "¬±": "–ø–ª—é—Å-–º–∏–Ω—É—Å",
        "Œ±": "–∞–ª—å—Ñ–∞",
        "Œ≤": "–±–µ—Ç–∞", 
        "Œ≥": "–≥–∞–º–º–∞",
        "‚â•": "–±–æ–ª—å—à–µ —Ä–∞–≤–Ω–æ",
        "‚â§": "–º–µ–Ω—å—à–µ —Ä–∞–≤–Ω–æ",
        "‚Äì": "—Ç–∏—Ä–µ (–Ω–µ –¥–µ—Ñ–∏—Å)",
        "√ó": "—É–º–Ω–æ–∂–µ–Ω–∏–µ",
        "¬≤": "–≤ –∫–≤–∞–¥—Ä–∞—Ç–µ",
        "¬≥": "–≤ –∫—É–±–µ"
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    scientific_patterns = {
        "temperature": r"(\d+)\s*[¬∞]?[Cc]",
        "ph_values": r"pH\s*(\d+\.?\d*)",
        "concentration": r"(\d+\.?\d*)\s*[%]",
        "size_microns": r"(\d+\.?\d*)\s*[Œº]?m",
        "time_hours": r"(\d+)\s*h",
        "molecular_weight": r"(\d+\.?\d*)\s*kDa"
    }
    
    data_dir = Path("data")
    if not data_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª–æ–≤
    test_files = [
        "Lysobacter capsici_sp_nov_with_antimicro.pdf",  # YC5194
        "Lysobacter agri.pdf",
        "Lysobacter alkalisoli.pdf",
        "Lysobacter antibioticus.pdf",
        "Lysobacter brunescens.pdf"
    ]
    
    extractor = AdvancedPDFExtractor(use_smart_chunking=False)
    
    total_files = 0
    problem_files = 0
    symbol_losses = defaultdict(int)
    data_patterns_found = defaultdict(int)
    
    for file_name in test_files:
        file_path = data_dir / file_name
        if not file_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}")
            continue
            
        total_files += 1
        print(f"\nüìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {file_name}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = extractor.extract_document(file_path)
            
            if not document.elements:
                print(f"   ‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                problem_files += 1
                continue
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            full_text = ""
            for element in document.elements:
                if hasattr(element, 'content') and element.content:
                    full_text += element.content + " "
                elif hasattr(element, 'text') and element.text:
                    full_text += element.text + " "
            
            print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–∞: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if len(full_text) < 1000:
                print(f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞!")
                problem_files += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            missing_symbols = []
            found_symbols = []
            
            for symbol, description in critical_symbols.items():
                if symbol in full_text:
                    found_symbols.append(symbol)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    context_words = {
                        "¬∞C": ["temperature", "temp", "celsius", "degree"],
                        "Œºm": ["microm", "size", "diameter", "length", "width"],
                        "%": ["percent", "concentration", "content"],
                        "¬±": ["plus", "minus", "error", "deviation"],
                        "pH": ["ph", "acid", "alkaline"]
                    }
                    
                    if symbol in context_words:
                        for word in context_words[symbol]:
                            if word.lower() in full_text.lower():
                                missing_symbols.append(f"{symbol} ({description})")
                                symbol_losses[symbol] += 1
                                break
            
            if missing_symbols:
                print(f"   ‚ùå –ü–æ—Ç–µ—Ä—è–Ω—ã —Å–∏–º–≤–æ–ª—ã: {', '.join(missing_symbols)}")
                problem_files += 1
            else:
                print(f"   ‚úÖ –°–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(found_symbols)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—É—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns_found = 0
            for pattern_name, pattern in scientific_patterns.items():
                matches = re.findall(pattern, full_text, re.IGNORECASE)
                if matches:
                    patterns_found += 1
                    data_patterns_found[pattern_name] += len(matches)
                    print(f"   üìä {pattern_name}: –Ω–∞–π–¥–µ–Ω–æ {len(matches)} –∑–Ω–∞—á–µ–Ω–∏–π")
            
            if patterns_found == 0:
                print(f"   ‚ö†Ô∏è –ù–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                problem_files += 1
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            problem_files += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {problem_files} ({problem_files/total_files*100:.1f}%)")
    
    if symbol_losses:
        print(f"\n‚ö†Ô∏è –ü–û–¢–ï–†–ò –°–ò–ú–í–û–õ–û–í:")
        for symbol, count in symbol_losses.items():
            print(f"   {symbol}: –ø–æ—Ç–µ—Ä—è–Ω –≤ {count} —Ñ–∞–π–ª–∞—Ö")
    
    if data_patterns_found:
        print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –ù–ê–£–ß–ù–´–ï –î–ê–ù–ù–´–ï:")
        for pattern, count in data_patterns_found.items():
            print(f"   {pattern}: {count} –∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if problem_files > total_files * 0.3:  # –ë–æ–ª–µ–µ 30% –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
        print(f"   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: {problem_files/total_files*100:.1f}% —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        print(f"   üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        print(f"      1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
        print(f"      2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Unicode mapping")
        print(f"      3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã")
    elif symbol_losses:
        print(f"   ‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´: –ü–æ—Ç–µ—Ä–∏ —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        print(f"      1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤")
        print(f"      2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞")
    else:
        print(f"   ‚úÖ –ö–ê–ß–ï–°–¢–í–û –ü–†–ò–ï–ú–õ–ï–ú–û–ï")
        print(f"   üí° –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    
    return problem_files < total_files * 0.5  # –£—Å–ø–µ—Ö –µ—Å–ª–∏ –º–µ–Ω–µ–µ 50% –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö

if __name__ == "__main__":
    success = diagnose_extraction_quality()
    exit(0 if success else 1)
 