#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–ª—É—á—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
"""

import json
import time
from datetime import datetime
from typing import Dict, List, Any
from dataclasses import dataclass, asdict

@dataclass
class IterationMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    iteration_name: str
    date: str
    overall_score: float
    strain_scores: Dict[str, float]
    coverage_scores: Dict[str, float]  # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    confidence_scores: Dict[str, float]
    accuracy_scores: Dict[str, float]
    response_time_ms: float
    regression_count: int
    notes: str

@dataclass
class BaselineMetrics:
    """–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —É–ª—É—á—à–µ–Ω–∏–π"""
    date: str = "2025-06-08"
    overall_score: float = 32.0
    
    strain_scores: Dict[str, float] = None
    coverage_by_category: Dict[str, float] = None
    response_times: Dict[str, float] = None
    
    def __post_init__(self):
        if self.strain_scores is None:
            self.strain_scores = {
                "YC5194": 31.2,  # 50% –ø–æ–∫—Ä—ã—Ç–∏–µ + 12.5% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                "GW1-59T": 32.5  # 50% –ø–æ–∫—Ä—ã—Ç–∏–µ + 15% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            }
        
        if self.coverage_by_category is None:
            self.coverage_by_category = {
                "classification": 50.0,  # 2/4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
                "origin": 37.5,         # 1.5/4 –≤ —Å—Ä–µ–¥–Ω–µ–º
                "morphology": 0.0,      # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                "growth_conditions": 0.0,  # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                "biochemistry": 0.0,    # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                "chemotaxonomy": 25.0,  # –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                "genomics": 0.0,        # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                "biological_activity": 25.0  # –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            }
        
        if self.response_times is None:
            self.response_times = {
                "search_time": 2500,    # –º—Å
                "analysis_time": 1200,  # –º—Å
                "total_time": 3700      # –º—Å
            }

class MetricsTracker:
    """–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —É–ª—É—á—à–µ–Ω–∏–π"""
    
    def __init__(self, metrics_file: str = "tests/quality/metrics_history.json"):
        self.metrics_file = metrics_file
        self.baseline = BaselineMetrics()
        self.history: List[IterationMetrics] = []
        self.load_history()
    
    def load_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫"""
        try:
            with open(self.metrics_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.history = [IterationMetrics(**item) for item in data.get('history', [])]
        except FileNotFoundError:
            self.history = []
    
    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫"""
        data = {
            'baseline': asdict(self.baseline),
            'history': [asdict(metrics) for metrics in self.history]
        }
        with open(self.metrics_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def add_iteration_result(self, metrics: IterationMetrics):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏"""
        self.history.append(metrics)
        self.save_history()
        self.print_iteration_summary(metrics)
    
    def print_iteration_summary(self, metrics: IterationMetrics):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏"""
        baseline_score = self.baseline.overall_score
        improvement = metrics.overall_score - baseline_score
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–¢–ï–†–ê–¶–ò–ò: {metrics.iteration_name}")
        print("=" * 60)
        print(f"üìà –û–±—â–∏–π –±–∞–ª–ª: {baseline_score:.1f} ‚Üí {metrics.overall_score:.1f} ({improvement:+.1f})")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —à—Ç–∞–º–º–∞–º
        print(f"\nüî¨ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —à—Ç–∞–º–º–∞–º:")
        for strain, score in metrics.strain_scores.items():
            baseline_strain = self.baseline.strain_scores.get(strain, 0)
            strain_improvement = score - baseline_strain
            print(f"   {strain}: {baseline_strain:.1f} ‚Üí {score:.1f} ({strain_improvement:+.1f})")
        
        # –°—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–∏
        print(f"\nüéØ –°—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏:")
        target_scores = {
            "iteration_1": 50,
            "iteration_2": 65, 
            "iteration_3": 75,
            "production": 85
        }
        
        iteration_num = metrics.iteration_name.lower().replace("–∏—Ç–µ—Ä–∞—Ü–∏—è ", "iteration_").replace(" ", "_")
        target = target_scores.get(iteration_num, 50)
        
        if metrics.overall_score >= target:
            print(f"   ‚úÖ –£–°–ü–ï–•! –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ü–µ–ª–µ–≤–æ–π –±–∞–ª–ª {target}")
            print(f"   üöÄ –ì–æ—Ç–æ–≤–æ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –≤ production")
        elif metrics.overall_score >= target - 5:
            print(f"   ‚ö†Ô∏è –ë–õ–ò–ó–ö–û –ö –¶–ï–õ–ò (—Ü–µ–ª—å: {target}, –ø–æ–ª—É—á–µ–Ω–æ: {metrics.overall_score:.1f})")
            print(f"   üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        else:
            print(f"   ‚ùå –¶–ï–õ–¨ –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê (—Ü–µ–ª—å: {target}, –ø–æ–ª—É—á–µ–Ω–æ: {metrics.overall_score:.1f})")
            print(f"   üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–æ–¥—Ö–æ–¥–∞")
        
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        baseline_time = self.baseline.response_times['total_time']
        time_change = metrics.response_time_ms - baseline_time
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {baseline_time}–º—Å ‚Üí {metrics.response_time_ms:.0f}–º—Å ({time_change:+.0f}–º—Å)")
        
        # –†–µ–≥—Ä–µ—Å—Å–∏–∏
        if metrics.regression_count > 0:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–π: {metrics.regression_count}")
        else:
            print(f"\n‚úÖ –†–µ–≥—Ä–µ—Å—Å–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    def get_progress_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        if not self.history:
            return "üìä –ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø—É—Å—Ç–∞"
        
        latest = self.history[-1]
        total_improvement = latest.overall_score - self.baseline.overall_score
        
        report = f"""
üìä –û–¢–ß–ï–¢ –û –ü–†–û–ì–†–ï–°–°–ï –°–ò–°–¢–ï–ú–´

üéØ –¶–µ–ª—å: 85 –±–∞–ª–ª–æ–≤ (—É—Ä–æ–≤–µ–Ω—å NotebookLM)
üìà –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {self.baseline.overall_score} ‚Üí {latest.overall_score:.1f} ({total_improvement:+.1f})
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {latest.date}

üî¨ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à—Ç–∞–º–º–∞–º:
"""
        
        for strain in ["YC5194", "GW1-59T"]:
            best_score = max([m.strain_scores.get(strain, 0) for m in self.history] + [self.baseline.strain_scores.get(strain, 0)])
            baseline_strain = self.baseline.strain_scores.get(strain, 0)
            improvement = best_score - baseline_strain
            report += f"   {strain}: {baseline_strain:.1f} ‚Üí {best_score:.1f} ({improvement:+.1f})\n"
        
        # –î–æ —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å
        remaining = 85 - latest.overall_score
        report += f"\nüèÅ –î–æ —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –±–∞–ª–ª–æ–≤"
        
        return report

def create_test_iteration_metrics(iteration_name: str, test_results: Dict) -> IterationMetrics:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
    strain_scores = {}
    total_score = 0
    
    for strain, result in test_results.items():
        if 'error' not in result:
            categories_percent = (result.get('categories_filled', 0) / 8) * 100
            confidence_percent = result.get('structure_confidence', 0) * 100
            strain_score = (categories_percent + confidence_percent) / 2
            strain_scores[strain] = strain_score
            total_score += strain_score
    
    overall_score = total_score / len(strain_scores) if strain_scores else 0
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    coverage_scores = {}
    categories = ["classification", "origin", "morphology", "growth_conditions", 
                 "biochemistry", "chemotaxonomy", "genomics", "biological_activity"]
    
    for category in categories:
        filled_count = 0
        total_strains = len([r for r in test_results.values() if 'error' not in r])
        
        for strain, result in test_results.items():
            if 'error' not in result:
                characteristics = result.get('strain_characteristics', {})
                if characteristics.get(category):
                    filled_count += 1
        
        coverage_scores[category] = (filled_count / total_strains * 100) if total_strains > 0 else 0
    
    return IterationMetrics(
        iteration_name=iteration_name,
        date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        overall_score=overall_score,
        strain_scores=strain_scores,
        coverage_scores=coverage_scores,
        confidence_scores={strain: result.get('structure_confidence', 0) * 100 
                          for strain, result in test_results.items() if 'error' not in result},
        accuracy_scores={},  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ accuracy —Ç–µ—Å—Ç–æ–≤
        response_time_ms=0,  # –ë—É–¥–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–æ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        regression_count=0,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        notes=""
    )

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫
    tracker = MetricsTracker()
    
    print("üìä –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"üìà –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è: {tracker.baseline.overall_score} –±–∞–ª–ª–æ–≤")
    print(f"üéØ –¶–µ–ª—å: 85 –±–∞–ª–ª–æ–≤")
    print(f"üìÅ –§–∞–π–ª –º–µ—Ç—Ä–∏–∫: {tracker.metrics_file}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é
    tracker.save_history()
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞") 