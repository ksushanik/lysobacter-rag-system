#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter API
"""

from config import config
from openai import OpenAI

def test_openrouter_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API"""
    
    print("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter API ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not config.OPENAI_API_KEY:
        print("‚ùå –û–®–ò–ë–ö–ê: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env —É–∫–∞–∑–∞–Ω OPENROUTER_API_KEY")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(config.OPENAI_API_KEY)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    model = config.OPENAI_MODEL
    print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {model}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    try:
        if hasattr(config, 'OPENROUTER_API_KEY') and config.OPENROUTER_API_KEY and config.OPENROUTER_API_KEY != "your_openrouter_api_key_here":
            client = OpenAI(
                api_key=config.OPENROUTER_API_KEY,
                base_url=config.OPENROUTER_BASE_URL
            )
            print(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter: {config.OPENROUTER_BASE_URL}")
        else:
            if config.OPENAI_API_KEY == "your_openrouter_api_key_here":
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω–Ω—ã–π API –∫–ª—é—á. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env")
                return False
            client = OpenAI(api_key=config.OPENAI_API_KEY)
            print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É OpenAI API")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."}
            ],
            max_tokens=50,
            temperature=0.1
        )
        
        answer = response.choices[0].message.content.strip()
        print(f"üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {answer}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        if hasattr(response, 'usage'):
            usage = response.usage
            print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {usage.prompt_tokens} + {usage.completion_tokens} = {usage.total_tokens}")
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
        print("2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
        print("4. –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å")
        return False

def show_available_models():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ OpenRouter"""
    
    print("\n=== –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ OpenRouter ===")
    
    models = [
        ("deepseek/deepseek-r1-0528-qwen3-8b:free", "üÜì DeepSeek R1 - –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è!)"),
        ("openai/gpt-3.5-turbo", "OpenAI GPT-3.5 Turbo - –±—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è"),
        ("openai/gpt-4", "OpenAI GPT-4 - –±–æ–ª–µ–µ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å"),
        ("openai/gpt-4-turbo-preview", "OpenAI GPT-4 Turbo - –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è"),
        ("anthropic/claude-3-sonnet", "Anthropic Claude 3 Sonnet - –æ—Ç–ª–∏—á–Ω–∞—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
        ("anthropic/claude-3-haiku", "Anthropic Claude 3 Haiku - –±—ã—Å—Ç—Ä–∞—è"),
        ("meta-llama/llama-2-70b-chat", "Meta Llama 2 70B - –º–æ—â–Ω–∞—è open-source –º–æ–¥–µ–ª—å"),
        ("google/palm-2-chat-bison", "Google PaLM 2 - –æ—Ç Google"),
        ("mistralai/mistral-7b-instruct", "Mistral 7B - —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –º–æ–¥–µ–ª—å"),
        ("deepseek/deepseek-chat", "DeepSeek Chat - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –æ—Ç DeepSeek"),
        ("qwen/qwen-2-72b-instruct", "Qwen 2 72B - –º–æ—â–Ω–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è –º–æ–¥–µ–ª—å")
    ]
    
    for model_id, description in models:
        print(f"‚Ä¢ {model_id}")
        print(f"  {description}")
        print()
    
    print("–î–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ OPENROUTER_MODEL –≤ —Ñ–∞–π–ª–µ .env")

if __name__ == "__main__":
    success = test_openrouter_connection()
    
    if success:
        show_available_models()
    
    print(f"\n{'='*50}")
    print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("python main.py") 