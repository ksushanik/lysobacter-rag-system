#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –¥–ª—è –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–º–∞ GW1-59T
"""

from pathlib import Path
from config import config
from src.lysobacter_rag.pdf_extractor import PDFExtractor
import re

def test_single_pdf():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
    
    print("üî¨ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º PDF —Ñ–∞–π–ª—ã
    data_dir = Path(config.DATA_DIR)
    pdf_files = list(data_dir.glob("*.pdf"))[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
    
    if not pdf_files:
        print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    extractor = PDFExtractor()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —à—Ç–∞–º–º–æ–≤
    strain_patterns = [
        r'GW1[-\s]*59T?',
        r'GW[-\s]*1[-\s]*59T?',
        r'strain\s+GW1[-\s]*59',
        r'—à—Ç–∞–º–º\s+GW1[-\s]*59'
    ]
    
    print(f"üîç –ò—â–µ–º —à—Ç–∞–º–º GW1-59T –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö:")
    
    found_strains = []
    
    for pdf_file in pdf_files:
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {pdf_file.name}")
        
        try:
            docs = extractor.extract_from_pdf(str(pdf_file))
            
            if not docs:
                print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
                continue
            
            print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(docs)} —á–∞—Å—Ç–µ–π")
            
            # –ò—â–µ–º —à—Ç–∞–º–º—ã –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            file_strains = []
            
            for doc in docs:
                text = doc.get('text', '')
                
                # –ò—â–µ–º –ª—é–±—ã–µ —à—Ç–∞–º–º—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
                for pattern in strain_patterns:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    if matches:
                        file_strains.extend(matches)
                
                # –¢–∞–∫–∂–µ –∏—â–µ–º –¥—Ä—É–≥–∏–µ —à—Ç–∞–º–º—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                other_strains = re.findall(r'\b[A-Z]+[-\d]+T\b', text)
                if other_strains:
                    file_strains.extend(other_strains[:5])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
            
            if file_strains:
                unique_strains = list(set(file_strains))
                print(f"   üß¨ –ù–∞–π–¥–µ–Ω—ã —à—Ç–∞–º–º—ã: {', '.join(unique_strains[:10])}")
                found_strains.extend(unique_strains)
            else:
                print("   üì≠ –®—Ç–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if docs:
                    sample_text = docs[0].get('text', '')[:200]
                    print(f"   üìù –û–±—Ä–∞–∑–µ—Ü —Ç–µ–∫—Å—Ç–∞: {sample_text}...")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –ò–¢–û–ì–ò:")
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à—Ç–∞–º–º–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(set(found_strains))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ —à—Ç–∞–º–º–∞
    target_found = False
    for strain in found_strains:
        if 'GW1' in strain.upper() and '59' in strain:
            target_found = True
            print(f"üéØ –ù–ê–ô–î–ï–ù –¶–ï–õ–ï–í–û–ô –®–¢–ê–ú–ú: {strain}")
            break
    
    if not target_found:
        print("‚ùå –®—Ç–∞–º–º GW1-59T –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –Ω–∞ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à—Ç–∞–º–º—ã
    if found_strains:
        unique_strains = list(set(found_strains))[:20]
        print(f"\nüß¨ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à—Ç–∞–º–º–æ–≤:")
        for strain in unique_strains:
            print(f"   ‚Ä¢ {strain}")
    
    return target_found

def search_strain_in_all_files():
    """–ò—â–µ–º —à—Ç–∞–º–º –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö"""
    print(f"\nüîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –í–û –í–°–ï–• –§–ê–ô–õ–ê–•")
    print("=" * 50)
    
    data_dir = Path(config.DATA_DIR)
    pdf_files = list(data_dir.glob("*.pdf"))
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    
    extractor = PDFExtractor()
    target_files = []
    
    for i, pdf_file in enumerate(pdf_files[:10], 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
        print(f"({i}/10) –ü—Ä–æ–≤–µ—Ä—è—é {pdf_file.name}...", end=" ")
        
        try:
            docs = extractor.extract_from_pdf(str(pdf_file))
            if docs:
                full_text = " ".join([doc.get('text', '') for doc in docs])
                if 'GW1' in full_text and '59' in full_text:
                    target_files.append(pdf_file.name)
                    print("üéØ –ù–ê–ô–î–ï–ù!")
                else:
                    print("‚ùå")
            else:
                print("‚ö†Ô∏è")
        except:
            print("üí•")
    
    if target_files:
        print(f"\nüéâ –®—Ç–∞–º–º GW1-59T –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–∞—Ö:")
        for filename in target_files:
            print(f"   üìÑ {filename}")
    else:
        print(f"\n‚ùå –®—Ç–∞–º–º GW1-59T –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã—Ö 10 —Ñ–∞–π–ª–∞—Ö")
        print(f"üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–∏—Å–∫–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —à—Ç–∞–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    found = test_single_pdf()
    
    if not found:
        search_strain_in_all_files()
    
    print(f"\nüöÄ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã:")
    print(f"   python quick_test.py") 