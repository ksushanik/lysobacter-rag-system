#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ DeepSeek R1 –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

def test_r1_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å deepseek-r1 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    
    print("üß† –¢–ï–°–¢ –ú–û–î–ï–õ–ò DEEPSEEK-R1 –î–õ–Ø –†–ê–°–°–£–ñ–î–ï–ù–ò–ô")
    print("=" * 60)
    
    try:
        from lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
        from config import config
        
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {config.OPENAI_MODEL}")
        print(f"üîó API URL: {config.OPENROUTER_BASE_URL}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        enhanced_rag = EnhancedRAGPipeline()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π R1
        test_queries = [
            {
                'query': "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?",
                'description': "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —à—Ç–∞–º–º–∞ (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è R1)"
            },
            {
                'query': "–°—Ä–∞–≤–Ω–∏—Ç–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—Ç–∞–º–º–∞ GW1-59T —Å –¥—Ä—É–≥–∏–º–∏ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏—è–º–∏",
                'description': "–°–ª–æ–∂–Ω—ã–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–µ—Å—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π)"
            },
            {
                'query': "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ç–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–µ–º–æ—Ç–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π",
                'description': "–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–µ—Å—Ç –≥–ª—É–±–∏–Ω—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π)"
            }
        ]
        
        for i, test_case in enumerate(test_queries, 1):
            print(f"\n{'='*60}")
            print(f"üß™ –¢–ï–°–¢ {i}: {test_case['description']}")
            print(f"üìù –ó–∞–ø—Ä–æ—Å: {test_case['query']}")
            print(f"{'='*60}")
            
            print("\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —Å –º–æ–¥–µ–ª—å—é R1...")
            
            start_time = time.time()
            result = enhanced_rag.ask_question(test_case['query'])
            process_time = time.time() - start_time
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {process_time:.2f} —Å–µ–∫")
            print(f"üéØ –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {result.query_type}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.3f}")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result.num_sources_used}")
            print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result.answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if result.metadata.get('has_tables'):
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {result.metadata['table_count']}")
            
            print(f"\nüí¨ –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò R1:")
            print("-" * 60)
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ R1
            print(result.answer)
            
            print(f"\nüìö –ò–°–¢–û–ß–ù–ò–ö–ò:")
            for source in result.sources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   [{source['id']}] {source['document']} (—Å—Ç—Ä. {source.get('page', 'N/A')})")
                if source.get('is_differential_table'):
                    print(f"       üî¨ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
            
            print(f"\n‚≠ê –ö–ê–ß–ï–°–¢–í–û –û–¢–í–ï–¢–ê R1:")
            quality_score = analyze_answer_quality(result.answer)
            print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {quality_score['structure']}/5")
            print(f"   üî¨ –ù–∞—É—á–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {quality_score['detail']}/5")
            print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {quality_score['data_usage']}/5")
            print(f"   üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {quality_score['overall']:.1f}/5")
            
            if i < len(test_queries):
                print(f"\n‚è∏Ô∏è –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
                time.sleep(3)
        
        print(f"\n{'='*60}")
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ú–û–î–ï–õ–ò R1 –ó–ê–í–ï–†–®–ï–ù–´!")
        print("üß† DeepSeek R1 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º")
        print("üìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ R1: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def analyze_answer_quality(answer: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ R1"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    structure_indicators = ['##', '**', '- ', '*', '1.', '2.']
    structure_score = min(5, sum(1 for indicator in structure_indicators if indicator in answer))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—É—á–Ω—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    scientific_terms = ['–º–æ–ª.%', '–º–∫–º', '¬∞C', 'pH', 'Mb', '–∫–î–∞', '–≥/–ª', '–º–ú']
    detail_score = min(5, sum(1 for term in scientific_terms if term in answer) * 0.7)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_indicators = ['[–ò—Å—Ç–æ—á–Ω–∏–∫', '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è', '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è', ':', '%']
    data_score = min(5, sum(1 for indicator in data_indicators if indicator in answer) * 0.3)
    
    overall = (structure_score + detail_score + data_score) / 3
    
    return {
        'structure': int(structure_score),
        'detail': int(detail_score),
        'data_usage': int(data_score),
        'overall': overall
    }

def compare_models():
    """–ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ R1 —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª—å—é"""
    
    print("\nüîÑ –ë–´–°–¢–†–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
    print("=" * 60)
    
    try:
        from lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
        from config import config
        
        test_query = "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?"
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_query}")
        
        # –¢–µ—Å—Ç —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ (R1)
        print(f"\nüß† –ú–æ–¥–µ–ª—å: {config.OPENAI_MODEL}")
        
        rag = EnhancedRAGPipeline()
        start_time = time.time()
        result = rag.ask_question(test_query)
        r1_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è R1: {r1_time:.2f} —Å–µ–∫")
        print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ R1: {len(result.answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å R1: {result.confidence:.3f}")
        
        quality = analyze_answer_quality(result.answer)
        print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ R1: {quality['overall']:.1f}/5")
        
        print(f"\nüí¨ –û–±—Ä–∞–∑–µ—Ü –æ—Ç–≤–µ—Ç–∞ R1 (–ø–µ—Ä–≤—ã–µ 400 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 40)
        print(result.answer[:400] + "..." if len(result.answer) > 400 else result.answer)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø DEEPSEEK-R1")
    print("üß† –ú–æ–¥–µ–ª—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã")
    print()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success = test_r1_model()
    
    if success:
        # –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        compare_models()
    
    print(f"\n{'='*60}")
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:", "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê")
    print("üß¨ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å DeepSeek R1!")
    
    sys.exit(0 if success else 1) 