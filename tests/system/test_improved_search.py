#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ PDF —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏
"""

import sys
from pathlib import Path
sys.path.insert(0, 'src')
sys.path.insert(0, '.')

from lysobacter_rag.indexer.indexer import Indexer

def test_improved_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"""
    
    print('üîç –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê')
    print('=' * 50)
    
    indexer = Indexer()
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å NotebookLM
    test_queries = [
        {
            'query': 'YC5194 temperature range growth',
            'expected': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–æ—Å—Ç–∞ –¥–ª—è YC5194',
            'notebooklm_answer': '15-37¬∞C'
        },
        {
            'query': 'Lysobacter capsici cell morphology size',
            'expected': '–†–∞–∑–º–µ—Ä—ã –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è –∫–ª–µ—Ç–æ–∫',
            'notebooklm_answer': '0.3-0.5 √ó 2.0-20 –º–∫–º'
        },
        {
            'query': 'strain biochemical characteristics table',
            'expected': '–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ',
            'notebooklm_answer': '–ö–∞—Ç–∞–ª–∞–∑–∞ +, –û–∫—Å–∏–¥–∞–∑–∞ -, –ì–ª—é–∫–æ–∑–∞ +'
        },
        {
            'query': 'pepper rhizosphere isolation origin',
            'expected': '–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–∑ —Ä–∏–∑–æ—Å—Ñ–µ—Ä—ã –ø–µ—Ä—Ü–∞',
            'notebooklm_answer': '–†–∏–∑–æ—Å—Ñ–µ—Ä–∞ –ø–µ—Ä—Ü–∞ (pepper rhizosphere)'
        }
    ]
    
    print(f'üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_queries)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n')
    
    improved_results = []
    
    for i, test in enumerate(test_queries, 1):
        print(f'üìù –ó–ê–ü–†–û–° {i}: "{test["query"]}"')
        print(f'   –û–∂–∏–¥–∞–µ–º: {test["expected"]}')
        print(f'   NotebookLM: {test["notebooklm_answer"]}')
        
        results = indexer.search(test['query'], top_k=3)
        
        print(f'   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
        
        best_relevance = 0
        table_found = False
        answer_quality = 0
        
        for j, result in enumerate(results, 1):
            relevance = result.get('relevance_score', 0)
            text = result.get('text', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_type = 'üìä' if '—Ç–∞–±–ª–∏—Ü–∞' in text.lower() or 'table' in text.lower() else 'üìù'
            if content_type == 'üìä':
                table_found = True
            
            print(f'      {j}. {content_type} –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.3f}')
            print(f'         {text[:120]}...')
            
            if relevance > best_relevance:
                best_relevance = relevance
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
        if best_relevance > 0.6:
            answer_quality = 3  # –û—Ç–ª–∏—á–Ω–æ
        elif best_relevance > 0.45:
            answer_quality = 2  # –•–æ—Ä–æ—à–æ
        elif best_relevance > 0.3:
            answer_quality = 1  # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ
        else:
            answer_quality = 0  # –ü–ª–æ—Ö–æ
        
        improved_results.append({
            'query': test['query'],
            'best_relevance': best_relevance,
            'table_found': table_found,
            'answer_quality': answer_quality,
            'notebooklm_target': test['notebooklm_answer']
        })
        
        print(f'   ‚úÖ –û—Ü–µ–Ω–∫–∞: {["‚ùå –ü–ª–æ—Ö–æ", "‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "‚úÖ –•–æ—Ä–æ—à–æ", "üéâ –û—Ç–ª–∏—á–Ω–æ"][answer_quality]}')
        print()
    
    # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    print('üìà –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –£–õ–£–ß–®–ï–ù–ò–ô')
    print('=' * 40)
    
    avg_relevance = sum(r['best_relevance'] for r in improved_results) / len(improved_results)
    tables_found = sum(1 for r in improved_results if r['table_found'])
    excellent_answers = sum(1 for r in improved_results if r['answer_quality'] == 3)
    good_answers = sum(1 for r in improved_results if r['answer_quality'] >= 2)
    
    print(f'üìä –°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {avg_relevance:.3f}')
    print(f'üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {tables_found}/{len(test_queries)}')
    print(f'üéâ –û—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {excellent_answers}/{len(test_queries)}')
    print(f'‚úÖ –•–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: {good_answers}/{len(test_queries)}')
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    print('\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ï–ô –°–ò–°–¢–ï–ú–û–ô')
    print('=' * 40)
    
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞)
    old_avg_relevance = 0.45  # –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    old_tables_found = 0      # –¢–∞–±–ª–∏—Ü –Ω–µ –±—ã–ª–æ
    
    relevance_improvement = ((avg_relevance - old_avg_relevance) / old_avg_relevance) * 100
    table_improvement = "‚àû" if old_tables_found == 0 else tables_found - old_tables_found
    
    print(f'üìà –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: +{relevance_improvement:.1f}%')
    print(f'üìä –£–ª—É—á—à–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: +{table_improvement}')
    print(f'üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ —Å NotebookLM: {good_answers}/{len(test_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤')
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò')
    print('=' * 20)
    
    if avg_relevance > 0.6:
        print('üéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.')
    elif avg_relevance > 0.45:
        print('‚úÖ –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–º–æ–∂–µ—Ç.')
    else:
        print('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.')
    
    print(f'üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: {"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ" if tables_found > 0 else "‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"}')
    
    return improved_results

if __name__ == "__main__":
    test_improved_search() 