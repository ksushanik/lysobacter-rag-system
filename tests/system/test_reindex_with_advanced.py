#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º
"""

import sys
from pathlib import Path
sys.path.insert(0, 'src')
sys.path.insert(0, '.')

from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor
from lysobacter_rag.data_processor import DocumentChunk
from lysobacter_rag.indexer.indexer import Indexer
from tqdm import tqdm

def create_chunks_with_advanced_extractor():
    """–°–æ–∑–¥–∞—ë—Ç —á–∞–Ω–∫–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º"""
    
    print('üîÑ –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ö–ê –° –ù–û–í–´–ú –≠–ö–°–¢–†–ê–ö–¢–û–†–û–ú')
    print('=' * 50)
    
    extractor = AdvancedPDFExtractor()
    data_dir = Path('data')
    pdf_files = list(data_dir.glob('*.pdf'))
    
    print(f'üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}')
    
    all_chunks = []
    
    for pdf_file in tqdm(pdf_files[:3], desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF"):  # –ü–µ—Ä–≤—ã–µ 3 –¥–ª—è —Ç–µ—Å—Ç–∞
        try:
            document = extractor.extract_document(pdf_file)
            
            # –°–æ–∑–¥–∞—ë–º —á–∞–Ω–∫–∏
            file_chunks = []
            for i, element in enumerate(document.elements):
                chunk = DocumentChunk(
                    chunk_id=f"{pdf_file.stem}_{element.element_type}_{i}",
                    text=element.content,
                    chunk_type=element.element_type,
                    metadata={
                        'source_pdf': pdf_file.name,
                        'page_number': element.page_number,
                        'confidence': element.confidence,
                        'extraction_method': element.metadata.get('extraction_method', 'advanced'),
                        'table_shape': element.metadata.get('table_shape', ''),
                        'relevance_score': element.confidence
                    }
                )
                file_chunks.append(chunk)
            
            all_chunks.extend(file_chunks)
            print(f"‚úÖ {pdf_file.name}: {len(file_chunks)} —á–∞–Ω–∫–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {pdf_file.name}: {e}")
            continue
    
    return all_chunks

def reindex_database():
    """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    print('\nüöÄ –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ë–ê–ó–´')
    print('=' * 30)
    
    # –°–æ–∑–¥–∞—ë–º —á–∞–Ω–∫–∏
    chunks = create_chunks_with_advanced_extractor()
    
    if not chunks:
        print("‚ùå –ù–µ—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        return False
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text_chunks = [c for c in chunks if c.chunk_type == 'text']
    table_chunks = [c for c in chunks if c.chunk_type == 'table']
    yc5194_chunks = [c for c in chunks if 'YC5194' in c.text]
    
    print(f'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–ù–ö–û–í:')
    print(f'   –í—Å–µ–≥–æ: {len(chunks)}')
    print(f'   üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {len(text_chunks)}')
    print(f'   üìä –¢–∞–±–ª–∏—á–Ω—ã—Ö: {len(table_chunks)}')
    print(f'   üéØ –° YC5194: {len(yc5194_chunks)}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    if table_chunks:
        print(f'\nüìä –ü—Ä–∏–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã:')
        print(f'   {table_chunks[0].text[:150]}...')
    
    if yc5194_chunks:
        print(f'\nüéØ –ü—Ä–∏–º–µ—Ä —Å YC5194:')
        print(f'   {yc5194_chunks[0].text[:150]}...')
    
    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
    print(f'\nüîÑ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è {len(chunks)} —á–∞–Ω–∫–æ–≤...')
    indexer = Indexer()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    indexer.delete_collection()
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
    indexer = Indexer()  # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    success = indexer.index_chunks(chunks, batch_size=20)
    
    if success:
        print('‚úÖ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        return True
    else:
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏')
        return False

def test_new_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    
    print('\nüß™ –¢–ï–°–¢ –ù–û–í–û–ì–û –ö–ê–ß–ï–°–¢–í–ê')
    print('=' * 30)
    
    indexer = Indexer()
    
    test_queries = [
        'YC5194 temperature growth conditions',
        'Lysobacter capsici characteristics',
        'strain morphology biochemical'
    ]
    
    for query in test_queries:
        print(f'\nüìù –ó–∞–ø—Ä–æ—Å: "{query}"')
        results = indexer.search(query, top_k=3)
        
        for i, result in enumerate(results, 1):
            chunk_type = 'üìä' if 'table' in result.get('text', '').lower() else 'üìù'
            print(f'   {i}. {chunk_type} –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get("relevance_score", 0):.3f}')
            print(f'      –¢–µ–∫—Å—Ç: {result.get("text", "")[:100]}...')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print('üîß –ú–û–î–ï–†–ù–ò–ó–ê–¶–ò–Ø RAG –°–ò–°–¢–ï–ú–´')
    print('=' * 50)
    print('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä')
    print('üìä –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∞–±–ª–∏—Ü')
    print('üéØ –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞')
    
    # –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
    success = reindex_database()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        test_new_quality()
        
        print('\nüéâ –ú–û–î–ï–†–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!')
        print('‚úÖ –ë–∞–∑–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º')
        print('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞–±–ª–∏—Ü')
        print('‚úÖ –£–ª—É—á—à–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞')
        print()
        print('üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
        print('   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ')
        print('   - –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å NotebookLM')
        print('   - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞')
    else:
        print('\n‚ùå –û–®–ò–ë–ö–ê –ú–û–î–ï–†–ù–ò–ó–ê–¶–ò–ò')

if __name__ == "__main__":
    main() 