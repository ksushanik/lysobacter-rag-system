#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã
"""
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent / "scripts"))

from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
from config import config

def test_all_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    
    models = [
        "deepseek/deepseek-chat",
        "deepseek/deepseek-v3-base:free", 
        "deepseek/deepseek-chat-v3-0324:free",
        "deepseek/deepseek-r1:free",
        "google/gemini-2.0-flash-exp:free"
    ]
    
    query = "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?"
    results = []
    
    print("üèÜ –°–†–ê–í–ù–ï–ù–ò–ï LLM –ú–û–î–ï–õ–ï–ô")
    print("=" * 60)
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
    print("=" * 60)
    
    for i, model in enumerate(models, 1):
        print(f"\nüî¨ [{i}/{len(models)}] –¢–µ—Å—Ç–∏—Ä—É—é: {model}")
        print("-" * 40)
        
        # –ú–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        original_model = config.OPENROUTER_MODEL
        config.OPENROUTER_MODEL = model
        
        try:
            # –°–æ–∑–¥–∞–µ–º RAG pipeline
            rag = RAGPipeline()
            
            start_time = time.time()
            result = rag.ask_question(query)
            end_time = time.time()
            
            response_time = end_time - start_time
            answer_length = len(result.get('answer', ''))
            sources_count = len(result.get('sources', []))
            
            print(f"‚úÖ –£—Å–ø–µ—Ö!")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {response_time:.2f} —Å–µ–∫")
            print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {answer_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources_count}")
            
            results.append({
                'model': model,
                'success': True,
                'time': response_time,
                'answer_length': answer_length,
                'sources_count': sources_count,
                'answer': result.get('answer', '')[:200] + "..."  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
            results.append({
                'model': model,
                'success': False,
                'error': str(e),
                'time': 0,
                'answer_length': 0,
                'sources_count': 0
            })
        
        finally:
            config.OPENROUTER_MODEL = original_model
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}/{len(results)}")
    
    if successful:
        # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
        fastest = min(successful, key=lambda x: x['time'])
        print(f"üöÄ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è: {fastest['model']} ({fastest['time']:.2f}—Å)")
        
        # –°–∞–º—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
        longest = max(successful, key=lambda x: x['answer_length'])
        print(f"üìù –°–∞–º—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π: {longest['model']} ({longest['answer_length']} —Å–∏–º–≤.)")
        
        # –ë–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        most_sources = max(successful, key=lambda x: x['sources_count'])
        print(f"üìö –ë–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {most_sources['model']} ({most_sources['sources_count']} –∏—Å—Ç–æ—á–Ω.)")
        
        print(f"\n‚è±Ô∏è –í–†–ï–ú–ï–ù–ê –û–¢–í–ï–¢–û–í:")
        for result in sorted(successful, key=lambda x: x['time']):
            print(f"   {result['model']}: {result['time']:.2f}—Å")
    
    if failed:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for result in failed:
            print(f"   {result['model']}: {result['error'][:50]}...")
    
    return results

if __name__ == "__main__":
    test_all_models() 