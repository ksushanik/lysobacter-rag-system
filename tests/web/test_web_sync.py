#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
import time

def test_settings_synchronization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ"""
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    test_query = "—á—Ç–æ —Ç–µ–±–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ SJ-36T?"
    
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("- EnhancedRAGPipeline(use_notebooklm_style=True)")
    print("- ask_question(top_k=8, use_notebooklm_style=True)")
    print("- max_tokens=8000 (–≤ enhanced_rag.py)")
    print()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (–∫–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)...")
        rag_system = EnhancedRAGPipeline(use_notebooklm_style=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert hasattr(rag_system, 'context_synthesizer'), "‚ùå context_synthesizer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert rag_system.use_notebooklm_style == True, "‚ùå use_notebooklm_style –Ω–µ True"
        assert hasattr(rag_system, 'fact_checker'), "‚ùå fact_checker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —á—Ç–æ –∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        print("üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        start_time = time.time()
        
        result = rag_system.ask_question(
            query=test_query,
            top_k=8,  # –ö–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            use_notebooklm_style=True  # –ö–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        )
        
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result.answer is not None, "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        assert len(result.answer) > 100, "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
        assert result.metadata.get('notebooklm_mode') == True, "‚ùå NotebookLM —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        assert result.num_sources_used > 0, "‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã"
        
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫")
        print(f"üéØ –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {result.query_type}")
        print(f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f}")
        print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result.num_sources_used}")
        print(f"üîß NotebookLM —Ä–µ–∂–∏–º: {result.metadata.get('notebooklm_mode')}")
        print(f"üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result.answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—É—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        scientific_keywords = [
            '—à—Ç–∞–º–º', '–±–∞–∫—Ç–µ—Ä', '—Ä–æ—Å—Ç', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä', 'pH', 
            '–º–æ—Ä—Ñ–æ–ª–æ–≥–∏', '–±–∏–æ—Ö–∏–º–∏', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫'
        ]
        
        found_keywords = [kw for kw in scientific_keywords if kw in result.answer.lower()]
        print(f"üß¨ –ù–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞–π–¥–µ–Ω—ã: {len(found_keywords)}/{len(scientific_keywords)}")
        
        if len(found_keywords) >= 4:
            print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞—É—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        else:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ –Ω–∞—É—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è
        if result.answer.endswith('...') or len(result.answer) < 500:
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è")
        else:
            print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª–Ω—ã–π")
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_fact_checker_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é fact_checker –≤ —Å–∏—Å—Ç–µ–º—É"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ fact_checker")
    print("=" * 40)
    
    try:
        rag_system = EnhancedRAGPipeline(use_notebooklm_style=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ fact_checker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        assert hasattr(rag_system, 'fact_checker'), "‚ùå fact_checker –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert rag_system.fact_checker is not None, "‚ùå fact_checker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        print("‚úÖ FactChecker –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã fact_checker
        methods_to_check = [
            'check_temperature_claim',
            'check_ph_claim', 
            'check_strain_specific'
        ]
        
        for method in methods_to_check:
            if hasattr(rag_system.fact_checker, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fact_checker: {str(e)}")
        return False

if __name__ == "__main__":
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
    print("=" * 70)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    success1 = test_settings_synchronization()
    
    # –¢–µ—Å—Ç fact_checker
    success2 = test_fact_checker_integration()
    
    if success1 and success2:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("\nüí° –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–æ –∏ —Ç–µ—Å—Ç—ã:")
        print("- ‚úÖ EnhancedRAGPipeline(use_notebooklm_style=True)")
        print("- ‚úÖ ask_question(top_k=8, use_notebooklm_style=True)")  
        print("- ‚úÖ FactChecker –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        print("- ‚úÖ max_tokens=8000")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(1) 