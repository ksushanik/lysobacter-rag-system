#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def test_quality_enhancements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–õ–£–ß–®–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 55)
    
    try:
        from lysobacter_rag.quality_control.text_enhancer import ScientificTextEnhancer
        
        enhancer = ScientificTextEnhancer()
        
        # –ü—Ä–∏–º–µ—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        test_cases = [
            {
                'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π —à—Ç–∞–º–º GW1-59T',
                'original': 'strain GW1- 5 9T was isolated from Antarctic freshwater lake',
                'expected_fix': 'GW1-59T'
            },
            {
                'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                'original': 'growth temperature range 15 ‚Äì 37 ¬∞C optimum 30 ¬∞C',
                'expected_fix': '15‚Äì37¬∞C'
            },
            {
                'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ö–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞',
                'original': 'major fatty acids C 15 : 0 and C 16 : 0',
                'expected_fix': 'C15:0'
            },
            {
                'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π pH',
                'original': 'pH range for growth 9 . 0 ‚Äì 11 . 0',
                'expected_fix': 'pH 9.0‚Äì11.0'
            },
            {
                'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞',
                'original': 'Lyso bacter antarcticus sp . nov .',
                'expected_fix': 'Lysobacter antarcticus sp. nov.'
            },
            {
                'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞',
                'original': 'genome size 2 . 8 Mb with 2,487 genes',
                'expected_fix': '2.8 Mb'
            },
            {
                'name': '–°–ª–∏—Ç–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã',
                'original': 'analysisusing16SrRNAsequencesandDNA-DNAhybridization',
                'expected_fix': '16S rRNA sequences'
            }
        ]
        
        print(f"üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(test_cases)} –°–õ–£–ß–ê–ï–í:")
        
        total_improvements = 0
        successful_fixes = 0
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n{i}. {test_case['name']}:")
            
            original = test_case['original']
            enhanced, metrics = enhancer.enhance_text(original)
            validation = enhancer.validate_enhancement(original, enhanced)
            
            print(f"   –î–æ:     {original}")
            print(f"   –ü–æ—Å–ª–µ:  {enhanced}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            expected = test_case['expected_fix']
            if expected in enhanced and expected not in original:
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{expected}' –Ω–∞–π–¥–µ–Ω–æ!")
                successful_fixes += 1
            elif enhanced != original:
                print(f"   ‚ö†Ô∏è –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{expected}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"   ‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{expected}' –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
            
            print(f"   üìä –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {validation['improvement']:.1%}")
            print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: —à—Ç–∞–º–º—ã:{metrics.strain_fixes}, —Ñ–æ—Ä–º—É–ª—ã:{metrics.formula_fixes}, –µ–¥–∏–Ω–∏—Ü—ã:{metrics.unit_fixes}, —Ç–µ—Ä–º–∏–Ω—ã:{metrics.term_fixes}, —á–∏—Å–ª–∞:{metrics.number_fixes}")
            
            total_improvements += validation['improvement']
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_improvement = total_improvements / len(test_cases)
        success_rate = successful_fixes / len(test_cases)
        
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {successful_fixes}/{len(test_cases)} ({success_rate:.1%})")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_improvement:.1%}")
        
        if success_rate >= 0.8 and avg_improvement >= 0.3:
            print(f"   üéâ –û–¢–õ–ò–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
            quality_verdict = "excellent"
        elif success_rate >= 0.6 and avg_improvement >= 0.2:
            print(f"   ‚úÖ –•–û–†–û–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ")
            quality_verdict = "good"
        elif success_rate >= 0.4 and avg_improvement >= 0.1:
            print(f"   ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            quality_verdict = "moderate"
        else:
            print(f"   ‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            quality_verdict = "poor"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if quality_verdict in ["excellent", "good"]:
            print(f"   1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é: make full-quality-reindex")
            print(f"   2. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: make check-overall-quality")
            print(f"   3. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ –æ GW1-59T")
        elif quality_verdict == "moderate":
            print(f"   1. üîß –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–ª—É—á–∞–µ–≤")
            print(f"   2. üß™ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print(f"   3. ‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é")
        else:
            print(f"   1. üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
            print(f"   2. üîß –£–ª—É—á—à–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            print(f"   3. ‚ùå –ù–ï –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
        
        return quality_verdict in ["excellent", "good"]
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def demonstrate_real_world_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print(f"\nüî¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        from lysobacter_rag.indexer.indexer import Indexer
        from lysobacter_rag.quality_control.text_enhancer import ScientificTextEnhancer
        
        indexer = Indexer()
        enhancer = ScientificTextEnhancer()
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        problem_queries = [
            "GW1-5 9T",  # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π —à—Ç–∞–º–º
            "C 15 : 0",  # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
            "pH 9 . 0"   # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ pH
        ]
        
        found_problems = False
        
        for query in problem_queries:
            print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
            results = indexer.search(query, top_k=2)
            
            if results:
                found_problems = True
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
                
                for i, result in enumerate(results, 1):
                    original_text = result['text'][:200] + "..."
                    enhanced_text, metrics = enhancer.enhance_text(result['text'])
                    enhanced_preview = enhanced_text[:200] + "..."
                    
                    validation = enhancer.validate_enhancement(result['text'], enhanced_text)
                    
                    print(f"\n   –†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
                    print(f"      –î–æ:     {original_text}")
                    print(f"      –ü–æ—Å–ª–µ:  {enhanced_preview}")
                    print(f"      –£–ª—É—á—à–µ–Ω–∏–µ: {validation['improvement']:.1%}")
            else:
                print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        if not found_problems:
            print(f"\nüéâ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞!")
            print(f"   –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ —É–ª—É—á—à–µ–Ω—ã —Ä–∞–Ω–µ–µ")
        else:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ª—É—á—à–µ–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üéØ –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê - –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    test_success = test_quality_enhancements()
    
    if test_success:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        demo_success = demonstrate_real_world_usage()
        
        if demo_success:
            print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print(f"   1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è: make apply-quality-system")
            print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: make monitor-quality")
            print(f"   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –æ —à—Ç–∞–º–º–∞—Ö")
    else:
        print(f"\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´")
        print(f"   –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º")
    
    sys.exit(0 if test_success else 1) 