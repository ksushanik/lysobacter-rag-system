#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è RAG-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –æ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏—è—Ö
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ NotebookLM - –æ–¥–∏–Ω —Ä–∞–∑ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º, –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
"""

import os
from pathlib import Path
from config import config
from index_manager import IndexManager
from src.lysobacter_rag.rag_pipeline import RAGPipeline
from loguru import logger

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    if not config.OPENROUTER_API_KEY and not config.OPENAI_API_KEY:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è LLM")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –∏–ª–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª")
        return False
    else:
        if config.OPENROUTER_API_KEY:
            print(f"‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω (OpenRouter)")
            print(f"   –ú–æ–¥–µ–ª—å: {config.OPENROUTER_MODEL}")
        else:
            print(f"‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω (OpenAI)")
            print(f"   –ú–æ–¥–µ–ª—å: {config.OPENAI_MODEL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    data_dir = Path(config.DATA_DIR)
    if not data_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    pdf_files = list(data_dir.glob("*.pdf"))
    if not pdf_files:
        print(f"‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {data_dir}")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Ö—Ä–∞–Ω–µ–Ω–∏—è
    storage_dir = config.STORAGE_DIR
    storage_dir.mkdir(parents=True, exist_ok=True)
    print(f"‚úÖ –ü–∞–ø–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {storage_dir}")
    
    return True

def initialize_index():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å –∑–Ω–∞–Ω–∏–π"""
    
    print("\nüóÉÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ù–î–ï–ö–°–ê –ó–ù–ê–ù–ò–ô")
    print("=" * 50)
    
    manager = IndexManager()
    status = manager.get_index_status()
    
    if status['exists'] and status['status'] == 'ready':
        print("‚úÖ –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"   üìä PDF —Ñ–∞–π–ª–æ–≤: {status['pdf_count']}")
        print(f"   üìö –ß–∞–Ω–∫–æ–≤: {status['chunk_count']}")
        print(f"   üïí –°–æ–∑–¥–∞–Ω: {status['created_at']}")
        return True
    
    elif status['exists'] and status['status'] == 'outdated':
        print("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —É—Å—Ç–∞—Ä–µ–ª (–∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ PDF —Ñ–∞–π–ª–æ–≤)")
        choice = input("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å? (y/n): ").strip().lower()
        
        if choice in ['y', 'yes', '–¥–∞', '–¥']:
            return manager.create_index(force_rebuild=True)
        else:
            print("‚ùå –†–∞–±–æ—Ç–∞ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π")
            return True
    
    else:
        print("üìù –ò–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
        choice = input("üöÄ –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å? (y/n): ").strip().lower()
        
        if choice in ['y', 'yes', '–¥–∞', '–¥']:
            return manager.create_index()
        else:
            print("‚ùå –ë–µ–∑ –∏–Ω–¥–µ–∫—Å–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            return False

def interactive_chat():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    
    print("\nü§ñ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ß–ê–¢ –° –°–ò–°–¢–ï–ú–û–ô")
    print("=" * 50)
    print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏—è—Ö!")
    print("–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print("  ‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ —à—Ç–∞–º–º–µ GH1-9T")
    print("  ‚Ä¢ –ö–∞–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–∏?")
    print("  ‚Ä¢ –ì–¥–µ –±—ã–ª –≤—ã–¥–µ–ª–µ–Ω —à—Ç–∞–º–º ZLD-17T?")
    print("  ‚Ä¢ –°—Ä–∞–≤–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —à—Ç–∞–º–º–æ–≤")
    print("\n–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 'stats' –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("-" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG-–ø–∞–π–ø–ª–∞–π–Ω
        rag = RAGPipeline()
        print("‚úÖ RAG-—Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n")
        
        while True:
            try:
                question = input("‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                if not question:
                    continue
                
                if question.lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if question.lower() in ['stats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞
                    from src.lysobacter_rag.indexer import Indexer
                    indexer = Indexer()
                    stats = indexer.get_collection_stats()
                    
                    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–î–ï–ö–°–ê:")
                    print(f"   üìö –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {stats['total_chunks']}")
                    print(f"   üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {stats['chunk_types'].get('text', 0)}")
                    print(f"   üìä –¢–∞–±–ª–∏—á–Ω—ã—Ö: {stats['chunk_types'].get('table', 0)}")
                    print(f"   üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(stats['sources'])}")
                    print("=" * 30)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
                print("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
                
                response = rag.ask_question(question)
                
                print(f"\nüí¨ –û—Ç–≤–µ—Ç:")
                print(f"{response['answer']}")
                
                print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏:")
                print(f"   üéØ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {response.get('num_sources_used', 0)}")
                print(f"   ‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.get('confidence', 0):.2f}")
                
                if response.get('sources'):
                    print(f"   üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(response['sources'])}")
                
                print("-" * 50)
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    
    print("\n‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    try:
        rag = RAGPipeline()
        
        test_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ Lysobacter daejeonensis",
            "–ö–∞–∫–∏–µ —à—Ç–∞–º–º—ã –æ–ø–∏—Å–∞–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö?",
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–æ—Å—Ç–∞ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π"
        ]
        
        for i, question in enumerate(test_questions, 1):
            print(f"\n{i}. –¢–µ—Å—Ç –≤–æ–ø—Ä–æ—Å: {question}")
            
            try:
                response = rag.ask_question(question)
                
                if response['answer'] and "–Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏" not in response['answer'].lower():
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(response['answer'])} —Å–∏–º–≤–æ–ª–æ–≤)")
                    print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {response.get('num_sources_used', 0)}")
                else:
                    print(f"   ‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üß¨ RAG-–°–ò–°–¢–ï–ú–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –õ–ò–ó–û–ë–ê–ö–¢–ï–†–ò–ô")
    print("üéØ –í–µ—Ä—Å–∏—è 2.0 —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º (–∫–∞–∫ NotebookLM)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    if not initialize_index():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å")
        return
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã
    print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. üí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    print("2. ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
    print("3. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞")
    print("4. üåê –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    
    try:
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == '1':
            interactive_chat()
        
        elif choice == '2':
            quick_test()
        
        elif choice == '3':
            manager = IndexManager()
            status = manager.get_index_status()
            
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–î–ï–ö–°–ê:")
            print("=" * 30)
            print(f"–°—Ç–∞—Ç—É—Å: {status.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"PDF —Ñ–∞–π–ª–æ–≤: {status.get('pdf_count', 0)}")
            print(f"–ß–∞–Ω–∫–æ–≤: {status.get('chunk_count', 0)}")
            print(f"–°–æ–∑–¥–∞–Ω: {status.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if status.get('sources'):
                print(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(status['sources'])}")
        
        elif choice == '4':
            print("\nüåê –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("streamlit run streamlit_app.py")
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    main() 