#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def reindex_with_quality_fixes():
    """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –±–∞–∑—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print("üîß –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –° –£–õ–£–ß–®–ï–ù–ù–´–ú –ö–ê–ß–ï–°–¢–í–û–ú")
    print("=" * 50)
    
    try:
        from config import config
        from lysobacter_rag.pdf_extractor.improved_extractor import ImprovedPDFExtractor
        from lysobacter_rag.data_processor import DataProcessor
        from lysobacter_rag.indexer.indexer import Indexer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        extractor = ImprovedPDFExtractor()
        processor = DataProcessor()
        indexer = Indexer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
        old_stats = indexer.get_collection_stats()
        print(f"üìä –°—Ç–∞—Ä–∞—è –±–∞–∑–∞: {old_stats.get('total_chunks', 0)} —á–∞–Ω–∫–æ–≤")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        print("üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
        data_dir = Path(config.DATA_DIR)
        pdf_files = list(data_dir.glob("*.pdf"))
        
        if not pdf_files:
            print(f"‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
            return False
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤")
        
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–∞–π–ª–µ —Å GW1-59T
        antarcticus_file = None
        for pdf_file in pdf_files:
            if 'antarcticus' in pdf_file.name.lower():
                antarcticus_file = pdf_file
                break
        
        if antarcticus_file:
            print(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –Ω–∞ —Ñ–∞–π–ª–µ: {antarcticus_file.name}")
            test_doc = extractor.extract_with_quality_control(antarcticus_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            quality_metrics = test_doc.metadata.get('quality_metrics', {})
            print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {quality_metrics.get('fixed_issues', 0)}")
            print(f"   üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {quality_metrics.get('pages_extracted', 0)}")
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {quality_metrics.get('tables_found', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            content = test_doc.content
            key_checks = {
                'GW1-59T –Ω–∞–π–¥–µ–Ω': 'GW1-59T' in content,
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 15-37¬∞C': '15‚Äì37¬∞C' in content,
                'pH 9.0-11.0': 'pH 9.0‚Äì11.0' in content or 'pH 9‚Äì11' in content,
                'NaCl 0-4%': '0‚Äì4%' in content and 'NaCl' in content,
                '–†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞ 2.8 Mb': '2.8 Mb' in content or '2.8Mb' in content
            }
            
            print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –î–ê–ù–ù–´–•:")
            for check, found in key_checks.items():
                status = "‚úÖ" if found else "‚ùå"
                print(f"   {status} {check}")
            
            found_count = sum(key_checks.values())
            total_count = len(key_checks)
            quality_percent = (found_count / total_count) * 100
            
            print(f"\nüìä –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•: {found_count}/{total_count} ({quality_percent:.0f}%)")
            
            if quality_percent < 80:
                print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–∏–∑–∫–æ–µ")
                print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞")
            else:
                print("‚úÖ –ö–ê–ß–ï–°–¢–í–û –ü–†–ò–ï–ú–õ–ï–ú–û–ï: –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
        print(f"\n‚ùì –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï:")
        print(f"   –≠—Ç–æ —É–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É ({old_stats.get('total_chunks', 0)} —á–∞–Ω–∫–æ–≤)")
        print(f"   –ò —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º")
        
        response = input("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
        
        if response != 'y':
            print("‚ùå –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
        print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–û–õ–ù–£–Æ –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Æ...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        all_documents = []
        for pdf_file in pdf_files:
            try:
                print(f"   üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {pdf_file.name}")
                doc = extractor.extract_with_quality_control(pdf_file)
                all_documents.append(doc)
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {pdf_file.name}: {e}")
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —á–∞–Ω–∫–∏
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —á–∞–Ω–∫–∏...")
        all_chunks = processor.process_documents(all_documents)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        print(f"üóÇÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞...")
        success = indexer.rebuild_index(all_chunks)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_stats = indexer.get_collection_stats()
            print(f"\nüéâ –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"   üìä –ù–æ–≤–∞—è –±–∞–∑–∞: {new_stats.get('total_chunks', 0)} —á–∞–Ω–∫–æ–≤")
            print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {new_stats.get('total_chunks', 0) - old_stats.get('total_chunks', 0)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ GW1-59T
            print(f"\nüîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–û GW1-59T:")
            results = indexer.search("GW1-59T Lysobacter antarcticus", top_k=5)
            
            if results:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                first_result = results[0]
                text = first_result['text']
                
                quality_indicators = {
                    '–®—Ç–∞–º–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π': 'GW1-59T' in text and 'GW1-5 9T' not in text,
                    '–î–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ': any(x in text for x in ['15‚Äì37¬∞C', '30¬∞C', 'temperature']),
                    '–î–∞–Ω–Ω—ã–µ –æ pH': any(x in text for x in ['pH 9', 'pH 11', '9.0‚Äì11.0']),
                    '–ë–µ–∑ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª': not any(x in text for x in ['C 15', ': 0 16']),
                    '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å': first_result.get('relevance_score', 0) > 0.7
                }
                
                for indicator, status in quality_indicators.items():
                    symbol = "‚úÖ" if status else "‚ùå"
                    print(f"      {symbol} {indicator}")
                
                quality_score = sum(quality_indicators.values()) / len(quality_indicators) * 100
                print(f"   üìä –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_score:.0f}%")
                
                if quality_score >= 80:
                    print("   üéâ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û! –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    return True
                else:
                    print("   ‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
                    return True
            else:
                print(f"   ‚ùå –î–∞–Ω–Ω—ã–µ –æ GW1-59T –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏!")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = reindex_with_quality_fixes()
    
    if success:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ RAG-—Å–∏—Å—Ç–µ–º—É —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ GW1-59T")
        print(f"2. –°—Ä–∞–≤–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π")  
        print(f"3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
    else:
        print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print(f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫")
        print(f"2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PDF —Ñ–∞–π–ª–æ–≤")
        print(f"3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä")
    
    sys.exit(0 if success else 1) 