#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—É—é RAG —Å–∏—Å—Ç–µ–º—É
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è
"""

import sys
import os
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def check_integration_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 50)
    
    integration_status = {}
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üìÅ 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è...")
    try:
        from config import config
        has_enhanced_setting = hasattr(config, 'USE_ENHANCED_EXTRACTOR')
        integration_status['config'] = {
            'available': True,
            'enhanced_extractor_setting': has_enhanced_setting,
            'value': getattr(config, 'USE_ENHANCED_EXTRACTOR', False)
        }
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.USE_ENHANCED_EXTRACTOR}")
    except Exception as e:
        integration_status['config'] = {'available': False, 'error': str(e)}
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
    print("üöÄ 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä...")
    try:
        from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor
        extractor = AdvancedPDFExtractor()
        integration_status['advanced_extractor'] = {'available': True}
        print("   ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä: –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError as e:
        integration_status['advanced_extractor'] = {'available': False, 'error': str(e)}
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞: {e}")
    except Exception as e:
        integration_status['advanced_extractor'] = {'available': False, 'error': str(e)}
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
    print("üìù 3. –£–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞...")
    try:
        from lysobacter_rag.pdf_extractor.text_quality_improver import text_quality_improver
        test_text = "growthofstrain PB-6250"
        improved = text_quality_improver.improve_text_quality(test_text)
        integration_status['text_improver'] = {
            'available': True,
            'test_input': test_text,
            'test_output': improved
        }
        print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞: {test_text} ‚Üí {improved}")
    except Exception as e:
        integration_status['text_improver'] = {'available': False, 'error': str(e)}
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.py
    print("üîß 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
    try:
        main_py = Path(__file__).parent / "main.py"
        if main_py.exists():
            content = main_py.read_text(encoding='utf-8')
            has_advanced_import = 'advanced_pdf_extractor' in content
            has_enhanced_logic = 'USE_ENHANCED_EXTRACTOR' in content
            integration_status['main_integration'] = {
                'file_exists': True,
                'has_advanced_import': has_advanced_import,
                'has_enhanced_logic': has_enhanced_logic
            }
            print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ main.py: {has_advanced_import and has_enhanced_logic}")
        else:
            integration_status['main_integration'] = {'file_exists': False}
            print("   ‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        integration_status['main_integration'] = {'available': False, 'error': str(e)}
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ main.py: {e}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
    print("üß† 5. RAG –ø–∞–π–ø–ª–∞–π–Ω...")
    try:
        from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        pipeline_content = Path(__file__).parent.parent / "src" / "lysobacter_rag" / "rag_pipeline" / "rag_pipeline.py"
        if pipeline_content.exists():
            content = pipeline_content.read_text(encoding='utf-8')
            has_table_support = 'table' in content.lower() and 'chunk_type' in content
            integration_status['rag_pipeline'] = {
                'available': True,
                'has_table_support': has_table_support
            }
            print(f"   ‚úÖ RAG –ø–∞–π–ø–ª–∞–π–Ω: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞–±–ª–∏—Ü - {has_table_support}")
        else:
            integration_status['rag_pipeline'] = {'available': False}
            print("   ‚ùå RAG –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        integration_status['rag_pipeline'] = {'available': False, 'error': str(e)}
        print(f"   ‚ùå –û—à–∏–±–∫–∞ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print("üåê 6. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
    try:
        web_app = Path(__file__).parent.parent / "examples" / "streamlit_app.py"
        if web_app.exists():
            content = web_app.read_text(encoding='utf-8')
            has_enhanced_rag = 'enhanced_rag' in content.lower()
            integration_status['web_interface'] = {
                'available': True,
                'has_enhanced_rag': has_enhanced_rag
            }
            print(f"   ‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ enhanced RAG - {has_enhanced_rag}")
        else:
            integration_status['web_interface'] = {'available': False}
            print("   ‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        integration_status['web_interface'] = {'available': False, 'error': str(e)}
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üì¶ 7. –ù–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    dependencies = ['pymupdf4llm', 'pdfplumber', 'tabula']
    missing_deps = []
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"   ‚úÖ {dep}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_deps.append(dep)
            print(f"   ‚ùå {dep}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    integration_status['dependencies'] = {
        'required': dependencies,
        'missing': missing_deps,
        'all_installed': len(missing_deps) == 0
    }
    
    return integration_status

def run_integration_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    print("\nüß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 30)
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        print("1. –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä...")
        from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor
        extractor = AdvancedPDFExtractor()
        print("   ‚úÖ –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 2: –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        print("2. –¢–µ—Å—Ç–∏—Ä—É—é –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        from config import config
        if config.USE_ENHANCED_EXTRACTOR:
            print("   ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            print("   ‚ö†Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –¢–µ—Å—Ç 3: RAG –ø–∞–π–ø–ª–∞–π–Ω
        print("3. –¢–µ—Å—Ç–∏—Ä—É—é RAG –ø–∞–π–ø–ª–∞–π–Ω...")
        from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
        print("   ‚úÖ RAG –ø–∞–π–ø–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç 4: –ò–Ω–¥–µ–∫—Å–µ—Ä
        print("4. –¢–µ—Å—Ç–∏—Ä—É—é –∏–Ω–¥–µ–∫—Å–µ—Ä...")
        from lysobacter_rag.indexer.indexer import Indexer
        indexer = Indexer()
        stats = indexer.get_collection_stats()
        print(f"   ‚úÖ –ò–Ω–¥–µ–∫—Å–µ—Ä: {stats.get('total_chunks', 0)} —á–∞–Ω–∫–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def generate_integration_report(status):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("\nüìä –û–¢–ß–ï–¢ –û–ë –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 40)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    total_components = len(status)
    successful_components = 0
    
    for component, info in status.items():
        if isinstance(info, dict) and info.get('available', False):
            successful_components += 1
    
    success_rate = (successful_components / total_components) * 100
    
    print(f"üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {success_rate:.1f}% ({successful_components}/{total_components})")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    for component, info in status.items():
        component_name = {
            'config': '‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
            'advanced_extractor': 'üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä',
            'text_improver': 'üìù –£–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞',
            'main_integration': 'üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ main.py',
            'rag_pipeline': 'üß† RAG –ø–∞–π–ø–ª–∞–π–Ω',
            'web_interface': 'üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            'dependencies': 'üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'
        }.get(component, component)
        
        if isinstance(info, dict):
            if info.get('available', False):
                print(f"‚úÖ {component_name}: –ì–æ—Ç–æ–≤")
                if component == 'config' and 'value' in info:
                    print(f"   ‚îî‚îÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä: {'–≤–∫–ª—é—á–µ–Ω' if info['value'] else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
                elif component == 'text_improver' and 'test_output' in info:
                    print(f"   ‚îî‚îÄ –¢–µ—Å—Ç: {info['test_input']} ‚Üí {info['test_output']}")
                elif component == 'dependencies' and 'missing' in info:
                    if info['missing']:
                        print(f"   ‚îî‚îÄ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(info['missing'])}")
                    else:
                        print(f"   ‚îî‚îÄ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                print(f"‚ùå {component_name}: –ü—Ä–æ–±–ª–µ–º—ã")
                if 'error' in info:
                    print(f"   ‚îî‚îÄ –û—à–∏–±–∫–∞: {info['error']}")
        else:
            print(f"‚ö†Ô∏è {component_name}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    
    print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if success_rate >= 90:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("   ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("   ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    elif success_rate >= 70:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞")
        print("   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   ‚Ä¢ –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("   ‚Ä¢ –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        print("   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫–∏")
        print("   ‚Ä¢ –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    
    return success_rate

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("üîß –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í–°–ï–• –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 70)
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä (pymupdf4llm + pdfplumber + tabula)")
    print("üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞–±–ª–∏—Ü")
    print("üéØ –£–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞")
    print("üß† –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ RAG –ø–∞–π–ø–ª–∞–π–Ω")
    print("üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    status = check_integration_status()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    test_success = run_integration_test()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    success_rate = generate_integration_report(status)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüèÅ –ò–¢–û–ì–ò:")
    print("=" * 20)
    
    if test_success and success_rate >= 90:
        print("üéâ –í–°–ï –£–õ–£–ß–®–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ä–∞–±–æ—Ç–µ")
        return True
    elif test_success and success_rate >= 70:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return True
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        return False

if __name__ == "__main__":
    main() 