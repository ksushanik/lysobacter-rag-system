#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ —à—Ç–∞–º–º–µ GW1-59T
"""
import sys
import re
from pathlib import Path
import pdfplumber

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def analyze_gw1_text():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ GW1-59T"""
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê –û –®–¢–ê–ú–ú–ï GW1-59T")
    print("=" * 55)
    
    from config import config
    data_dir = Path(config.DATA_DIR)
    
    # –ò—â–µ–º —Ñ–∞–π–ª antarcticus
    antarcticus_file = None
    for pdf_file in data_dir.glob("*.pdf"):
        if 'antarcticus' in pdf_file.name.lower():
            antarcticus_file = pdf_file
            break
    
    if not antarcticus_file:
        print("‚ùå –§–∞–π–ª Lysobacter antarcticus –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {antarcticus_file.name}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    all_text_blocks = []
    
    try:
        with pdfplumber.open(antarcticus_file) as pdf:
            for page_num, page in enumerate(pdf.pages, 1):
                text = page.extract_text()
                if text:
                    all_text_blocks.append({
                        'page': page_num,
                        'text': text
                    })
                    
                # –¢–∞–∫–∂–µ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                tables = page.extract_tables()
                for table_idx, table in enumerate(tables):
                    if table:
                        table_text = "\n".join([
                            " | ".join([str(cell) if cell else "" for cell in row])
                            for row in table if row
                        ])
                        all_text_blocks.append({
                            'page': page_num,
                            'text': f"–¢–ê–ë–õ–ò–¶–ê {table_idx + 1}:\n{table_text}"
                        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        return False
    
    print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_text_blocks)} –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞")
    
    # –ò—â–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è GW1-59T
    gw1_patterns = [
        r'GW1-59T',
        r'GW-\s*59T',
        r'GW\s*1-\s*59\s*T',
        r'GW\s*1-\s*5\s*9\s*T',
        r'strain\s+GW\s*1[-\s]*59\s*T'
    ]
    
    found_blocks = []
    
    print(f"\nüîç –ü–û–ò–°–ö –£–ü–û–ú–ò–ù–ê–ù–ò–ô GW1-59T:")
    for pattern in gw1_patterns:
        print(f"\n   –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        matches = 0
        
        for block in all_text_blocks:
            if re.search(pattern, block['text'], re.IGNORECASE):
                matches += 1
                if block not in found_blocks:
                    found_blocks.append(block)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                match = re.search(pattern, block['text'], re.IGNORECASE)
                if match:
                    start = max(0, match.start() - 50)
                    end = min(len(block['text']), match.end() + 50)
                    context = block['text'][start:end]
                    print(f"      –°—Ç—Ä–∞–Ω–∏—Ü–∞ {block['page']}: ...{context}...")
        
        print(f"      –ù–∞–π–¥–µ–Ω–æ: {matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    
    print(f"\nüìã –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û –ë–õ–û–ö–û–í –° GW1-59T: {len(found_blocks)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö
    if found_blocks:
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –î–ê–ù–ù–´–•:")
        
        all_relevant_text = " ".join([block['text'] for block in found_blocks])
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        data_patterns = {
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–æ—Å—Ç–∞': [
                r'temperature.*?(\d+)[-‚Äì](\d+).*?¬∞?C',
                r'growth.*?(\d+)[-‚Äì](\d+).*?¬∞?C',
                r'(\d+)[-‚Äì](\d+)\s*¬∞C',
                r'optimum.*?(\d+)\s*¬∞C'
            ],
            'pH –¥–∏–∞–ø–∞–∑–æ–Ω': [
                r'pH.*?(\d+)[-‚Äì](\d+)',
                r'pH.*?range.*?(\d+\.?\d*)[-‚Äì](\d+\.?\d*)',
                r'growth.*?pH.*?(\d+)[-‚Äì](\d+)'
            ],
            'NaCl —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å': [
                r'NaCl.*?(\d+)[-‚Äì](\d+).*?%',
                r'salt.*?(\d+)[-‚Äì](\d+).*?%',
                r'(\d+)[-‚Äì](\d+).*?%.*?NaCl'
            ],
            '–†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞': [
                r'genome.*?(\d+\.?\d*)\s*Mb',
                r'(\d+,\d+,\d+)\s*bp',
                r'size.*?(\d+\.?\d*)\s*Mb'
            ],
            'G+C —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ': [
                r'G.*?C.*?(\d+\.?\d*)\s*%',
                r'(\d+\.?\d*)\s*%.*?G.*?C'
            ],
            '–ú–µ—Å—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è': [
                r'Antarctica',
                r'Antarctic',
                r'freshwater lake',
                r'(\d+)\s*m.*?depth',
                r'depth.*?(\d+)\s*m'
            ]
        }
        
        for data_type, patterns in data_patterns.items():
            print(f"\n   üìã {data_type}:")
            found_data = []
            
            for pattern in patterns:
                matches = re.findall(pattern, all_relevant_text, re.IGNORECASE)
                if matches:
                    found_data.extend(matches)
                    for match in matches[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"      ‚úÖ {match}")
            
            if not found_data:
                print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        print(f"\nüìä –ü–û–ò–°–ö –¢–ê–ë–õ–ò–¶ –° –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê–ú–ò:")
        table_blocks = [block for block in found_blocks if '–¢–ê–ë–õ–ò–¶–ê' in block['text']]
        
        if table_blocks:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(table_blocks)} —Ç–∞–±–ª–∏—Ü")
            for i, table in enumerate(table_blocks, 1):
                print(f"\n   –¢–∞–±–ª–∏—Ü–∞ {i} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {table['page']}):")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                lines = table['text'].split('\n')[:10]
                for line in lines:
                    if line.strip():
                        print(f"      {line[:80]}...")
        else:
            print(f"   ‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    print(f"\nüîß –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ö–ê–ß–ï–°–¢–í–ê:")
    
    quality_issues = {
        '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —à—Ç–∞–º–º—ã': 0,
        '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã': 0,
        '–°–ª–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞': 0,
        '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞': 0
    }
    
    for block in all_text_blocks:
        text = block['text']
        
        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if re.search(r'GW\s*1[-\s]*5\s*9\s*T', text):
            quality_issues['–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —à—Ç–∞–º–º—ã'] += 1
        
        if re.search(r'C\s+\d+\s*:\s*\d+', text):
            quality_issues['–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã'] += 1
        
        # –ò—â–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
        long_words = [w for w in text.split() if len(w) > 50]
        if long_words:
            quality_issues['–°–ª–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞'] += len(long_words)
        
        # –ò—â–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
        if re.search(r'\d+\s+\.\s+\d+', text):
            quality_issues['–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞'] += 1
    
    print(f"   –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã:")
    for issue, count in quality_issues.items():
        status = "‚ö†Ô∏è" if count > 0 else "‚úÖ"
        print(f"      {status} {issue}: {count}")
    
    total_issues = sum(quality_issues.values())
    
    if total_issues == 0:
        print(f"\n‚úÖ –ö–ê–ß–ï–°–¢–í–û –û–¢–õ–ò–ß–ù–û–ï: –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return True
    elif total_issues < 5:
        print(f"\n‚ö†Ô∏è –ö–ê–ß–ï–°–¢–í–û –ü–†–ò–ï–ú–õ–ï–ú–û–ï: {total_issues} –ø—Ä–æ–±–ª–µ–º")
        return True
    else:
        print(f"\nüö® –ü–õ–û–•–û–ï –ö–ê–ß–ï–°–¢–í–û: {total_issues} –ø—Ä–æ–±–ª–µ–º")
        return False

if __name__ == "__main__":
    success = analyze_gw1_text()
    
    if not success:
        print("\nüí° –ù–ï–û–ë–•–û–î–ò–ú–û:")
        print("1. –£–ª—É—á—à–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        print("3. –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–±–ª–∏—Ü")
    
    sys.exit(0 if success else 1) 