#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ RAG-—Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –ª–∏–∑–æ–±–∞–∫—Ç–æ–≤
"""

import os
import sys
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent / "src"))

from config import config
from src.lysobacter_rag.pdf_extractor import PDFExtractor
from src.lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor
from src.lysobacter_rag.data_processor import DataProcessor  
from src.lysobacter_rag.indexer import Indexer


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.add(
        config.LOG_FILE,
        rotation="10 MB",
        retention="1 week",
        level=config.LOG_LEVEL
    )
    logger.add(
        sys.stdout,
        level=config.LOG_LEVEL,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
    )


def extract_and_process_data():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤"""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF —Ñ–∞–π–ª–æ–≤...")
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if config.USE_ENHANCED_EXTRACTOR:
        logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä (pymupdf4llm + pdfplumber + tabula)")
        extractor = AdvancedPDFExtractor()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º
        pdf_files = list(config.DATA_DIR.glob("*.pdf"))
        docs = []
        
        for pdf_file in pdf_files:
            try:
                document = extractor.extract_document(pdf_file)
                docs.append(document)
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω {pdf_file.name}: {len(document.elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_file.name}: {e}")
                continue
        
        logger.info(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
    else:
        logger.info("üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä")
        extractor = PDFExtractor()
        docs = extractor.extract_all_pdfs(str(config.DATA_DIR))
    
    if not docs:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤")
        return None
    
    logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —á–∞–Ω–∫–∏–Ω–≥
    logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏ —Ä–∞–∑–±–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞–Ω–∫–∏...")
    processor = DataProcessor()
    
    if config.USE_ENHANCED_EXTRACTOR:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —á–∞–Ω–∫–∏
        chunks = convert_advanced_documents_to_chunks(docs)
    else:
        chunks = processor.process_documents(docs)
    
    if not chunks:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        return None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if hasattr(processor, 'get_statistics'):
        stats = processor.get_statistics(chunks)
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for key, value in stats.items():
            if key != 'sources':  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                logger.info(f"   {key}: {value}")
    else:
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        text_chunks = [c for c in chunks if c.chunk_type == 'text']
        table_chunks = [c for c in chunks if c.chunk_type == 'table']
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        logger.info(f"   –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        logger.info(f"   –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {len(text_chunks)}")
        logger.info(f"   –¢–∞–±–ª–∏—á–Ω—ã—Ö: {len(table_chunks)}")
    
    return chunks


def convert_advanced_documents_to_chunks(advanced_docs):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —á–∞–Ω–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    from src.lysobacter_rag.data_processor import DocumentChunk
    
    chunks = []
    chunk_id = 0
    
    for doc in advanced_docs:
        for element in doc.elements:
            chunk = DocumentChunk(
                chunk_id=f"{Path(doc.file_path).stem}_{element.element_type}_{chunk_id}",
                text=element.content,
                chunk_type=element.element_type,
                metadata={
                    'source_pdf': Path(doc.file_path).name,
                    'page_number': element.page_number,
                    'confidence': element.confidence,
                    'extraction_method': element.metadata.get('extraction_method', 'advanced'),
                    'table_shape': element.metadata.get('table_shape', ''),
                    'relevance_score': element.confidence,
                    'advanced_extractor': True
                }
            )
            chunks.append(chunk)
            chunk_id += 1
    
    return chunks


def index_data(chunks):
    """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —á–∞–Ω–∫–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîÑ –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É...")
    
    indexer = Indexer()
    success = indexer.index_chunks(chunks)
    
    if success:
        stats = indexer.get_collection_stats()
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:")
        for key, value in stats.items():
            if key != 'sources':
                logger.info(f"   {key}: {value}")
        return indexer
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        return None


def console_interface(indexer):
    """–ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("\n" + "="*80)
    print("ü§ñ RAG-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –æ –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏—è—Ö")
    print("üí° –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    print("üõë –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit'")
    print("="*80 + "\n")
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ RAG-–ø–∞–π–ø–ª–∞–π–Ω–∞, —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    while True:
        try:
            query = input("‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not query:
                continue
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
            results = indexer.search(query, top_k=3)
            
            if not results:
                print("üòî –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n")
                continue
            
            print(f"\nüí¨ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n")
            
            for i, result in enumerate(results, 1):
                metadata = result['metadata']
                text = result['text']
                score = result['relevance_score']
                
                print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f})")
                print(f"üìã –ò—Å—Ç–æ—á–Ω–∏–∫: {metadata.get('source_pdf', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                print(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {metadata.get('page_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                print(f"üìù –¢–∏–ø: {metadata.get('chunk_type', 'text')}")
                
                if metadata.get('chunk_type') == 'table' and metadata.get('original_table_title'):
                    print(f"üóÇÔ∏è  –¢–∞–±–ª–∏—Ü–∞: {metadata['original_table_title']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
                preview = text[:300] + "..." if len(text) > 300 else text
                print(f"üìÉ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {preview}")
                print("-" * 60)
            
            print()
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {e}")
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup_logging()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é RAG-—Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –ª–∏–∑–æ–±–∞–∫—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    if not config.DATA_DIR.exists():
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config.DATA_DIR}")
        return
    
    pdf_files = list(config.DATA_DIR.glob("*.pdf"))
    if not pdf_files:
        logger.error(f"‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {config.DATA_DIR}")
        return
    
    logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        indexer = Indexer()
        stats = indexer.get_collection_stats()
        
        if stats.get('total_chunks', 0) > 0:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å {stats['total_chunks']} —á–∞–Ω–∫–∞–º–∏")
            user_input = input("ü§î –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").strip().lower()
            
            if user_input in ['n', 'no', '–Ω–µ—Ç']:
                logger.info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                chunks = extract_and_process_data()
                if chunks:
                    indexer = index_data(chunks)
                else:
                    return
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å–µ—Ä
        else:
            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º —Å –Ω—É–ª—è
            chunks = extract_and_process_data()
            if not chunks:
                return
            
            indexer = index_data(chunks)
            if not indexer:
                return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        console_interface(indexer)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main() 