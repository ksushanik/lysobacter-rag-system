#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
"""
import sys
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_enhanced_rag_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ RAG —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    
    print("üß™ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –û–¢–í–ï–¢–û–í –° –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò")
    print("=" * 50)
    
    try:
        from config import config
        from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG pipeline
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG pipeline...")
        pipeline = RAGPipeline()
        
        # –ö–ª—é—á–µ–≤–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ —à—Ç–∞–º–º–µ GW1-59T
        test_question = "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–æ—Å—Ç–∞, pH, –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã, –≥–¥–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞"
        
        print(f"\n‚ùì –¢–ï–°–¢–û–í–´–ô –í–û–ü–†–û–°:")
        print(f"   {test_question}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        print(f"\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
        response = pipeline.ask_question(test_question)
        
        if not response:
            print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
        
        answer = response.get('answer', '')
        sources = response.get('sources', [])
        
        print(f"\nüìù –ü–û–õ–£–ß–ï–ù–ù–´–ô –û–¢–í–ï–¢:")
        print(f"{'='*60}")
        print(answer)
        print(f"{'='*60}")
        
        print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(sources)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:")
        
        quality_checks = [
            ("GW1-59T", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞–º–º–∞", "GW1- 5 9T" not in answer and "GW1-59T" in answer),
            ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —É–∫–∞–∑–∞–Ω", re.search(r'\d+[-‚Äì]\d+¬∞?C', answer)),
            ("pH", "–î–∏–∞–ø–∞–∑–æ–Ω pH —É–∫–∞–∑–∞–Ω", re.search(r'pH\s*\d+\.?\d*[-‚Äì]\d+\.?\d*', answer)),
            ("–ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã", "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç", re.search(r'C\d+:\d+', answer) or '–∂–∏—Ä–Ω' in answer.lower()),
            ("–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ", "–£–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏", '–∞–Ω—Ç–∞—Ä–∫—Ç–∏–∫' in answer.lower() or '–æ–∑–µ—Ä' in answer.lower()),
            ("–ì–µ–Ω–æ–º", "–†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞ —É–∫–∞–∑–∞–Ω", re.search(r'\d+\.?\d*\s*(Mb|–º–±)', answer.lower())),
            ("–¢–∞–∫—Å–æ–Ω–æ–º–∏—è", "–ü–æ–ª–Ω–æ–µ –Ω–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", 'Lysobacter antarcticus' in answer),
            ("–î–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å", "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç", len(answer) > 500)
        ]
        
        passed_checks = 0
        total_checks = len(quality_checks)
        
        for criterion, description, check_result in quality_checks:
            status = "‚úÖ" if check_result else "‚ùå"
            print(f"   {status} {criterion}: {description}")
            if check_result:
                passed_checks += 1
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = int((passed_checks / total_checks) * 100)
        
        print(f"\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: {quality_score}/100")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_checks}/{total_checks}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –≠–¢–ê–õ–û–ù–ê–ú–ò:")
        print(f"   ‚Ä¢ NotebookLM (—ç—Ç–∞–ª–æ–Ω):    95/100")
        print(f"   ‚Ä¢ Chat.minimax:           90/100")
        print(f"   ‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞:        {quality_score}/100")
        print(f"   ‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:   70/100")
        
        improvement = quality_score - 70
        if improvement > 0:
            print(f"   üéâ –£–õ–£–ß–®–ï–ù–ò–ï: +{improvement} –±–∞–ª–ª–æ–≤!")
        elif improvement == 0:
            print(f"   ‚ö™ –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ")
        else:
            print(f"   ‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∏–∑–∏–ª–æ—Å—å –Ω–∞ {abs(improvement)} –±–∞–ª–ª–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:")
        
        if quality_score < 85:
            if not any(check[2] for check in quality_checks if "GW1-59T" in check[0]):
                print(f"   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —à—Ç–∞–º–º–∞ GW1-59T")
            if not any(check[2] for check in quality_checks if "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in check[0]):
                print(f"   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ")
            if not any(check[2] for check in quality_checks if "pH" in check[0]):
                print(f"   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ pH")
            if not any(check[2] for check in quality_checks if "–î–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å" in check[0]):
                print(f"   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –¥–ª–∏–Ω—É –∏ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤")
        else:
            print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        if "GW1- 5 9T" in answer:
            print(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê:")
            print(f"   ‚Ä¢ –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —à—Ç–∞–º–º–∞: 'GW1- 5 9T'")
            print(f"   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        print(f"\nüîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –†–ï–õ–ï–í–ê–ù–¢–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò:")
        
        search_queries = [
            "GW1-59T",
            "Lysobacter antarcticus", 
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–æ—Å—Ç–∞ 15-37",
            "pH 9.0-11.0"
        ]
        
        for query in search_queries:
            relevant_sources = [s for s in sources if query.lower().replace('-', ' ') in s.lower()]
            status = "‚úÖ" if relevant_sources else "‚ùå"
            print(f"   {status} –ü–æ–∏—Å–∫ '{query}': {len(relevant_sources)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        return quality_score >= 75  # –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 75+
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def compare_before_after():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π"""
    
    print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"{'='*70}")
    
    comparison_data = [
        ("–°–∏—Å—Ç–µ–º–∞", "–ö–∞—á–µ—Å—Ç–≤–æ", "–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã"),
        ("NotebookLM", "95/100", "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ—á–Ω–æ—Å—Ç—å", "–ù–µ –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞"),
        ("Chat.minimax", "90/100", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"),
        ("–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞", "?/100", "–ù–∞—à–∏ —É–ª—É—á—à–µ–Ω–∏—è", "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å"),
        ("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞", "70/100", "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "–ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("DeepSeek R1", "60/100", "–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å", "–ù–µ–ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    ]
    
    for row in comparison_data:
        print(f"{row[0]:<20} {row[1]:<10} {row[2]:<25} {row[3]}")
    
    print(f"{'='*70}")

if __name__ == "__main__":
    print("üéØ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
    compare_before_after()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success = test_enhanced_rag_quality()
    
    if success:
        print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        print(f"   ‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")
        print(f"   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞")
    else:
        print(f"\n‚ö†Ô∏è –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        print(f"üí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG pipeline")
        print(f"   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
    
    sys.exit(0 if success else 1) 