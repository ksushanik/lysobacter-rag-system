#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def fix_existing_data_quality():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        from lysobacter_rag.indexer.indexer import Indexer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–µ—Ä
        indexer = Indexer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã
        stats = indexer.get_collection_stats()
        total_chunks = stats.get('total_chunks', 0)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ: {total_chunks}")
        
        if total_chunks == 0:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
            return False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        rules = get_quality_fix_rules()
        print(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rules)} –ø—Ä–∞–≤–∏–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞–Ω–∫–∏ –≤ ChromaDB –Ω–∞–ø—Ä—è–º—É—é,
        # –º—ã –¥–µ–ª–∞–µ–º –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        test_cases = [
            "GW1-5 9T",
            "C 15 : 0", 
            "15 ‚Äì 37 ¬∞C",
            "pH 9 . 0",
            "Lyso bacter"
        ]
        
        print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        
        improvements = 0
        for test_case in test_cases:
            print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É—é: '{test_case}'")
            results = indexer.search(test_case, top_k=3)
            
            if results:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                for i, result in enumerate(results, 1):
                    original_text = result['text']
                    fixed_text = apply_quality_fixes(original_text, rules)
                    
                    if fixed_text != original_text:
                        improvements += 1
                        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: ‚úÖ –£–õ–£–ß–®–ï–ù")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                        show_improvements(original_text, fixed_text)
                    else:
                        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: ‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            else:
                print(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print(f"\nüìä –ò–¢–û–ì–ò:")
        print(f"   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π: {improvements}")
        
        if improvements > 0:
            print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
            
            # –°–æ–∑–¥–∞–µ–º wrapper –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            create_enhanced_search_wrapper()
            
            return True
        else:
            print(f"   ‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def get_quality_fix_rules():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    return [
        # –®—Ç–∞–º–º–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
        (r'GW\s*1-\s*5\s*9\s*T', 'GW1-59T'),
        (r'(\w+)\s*-\s*(\d+)\s+T', r'\1-\2T'),
        
        # –•–∏–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
        (r'C\s+(\d+)\s*:\s*(\d+)', r'C\1:\2'),
        (r'iso-\s*C\s+(\d+)', r'iso-C\1'),
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        (r'(\d+)\s*[-‚Äì]\s*(\d+)\s*¬∞?\s*C', r'\1‚Äì\2¬∞C'),
        
        # pH
        (r'pH\s+(\d+\.?\d*)\s*[-‚Äì]\s*(\d+\.?\d*)', r'pH \1‚Äì\2'),
        
        # –ù–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        (r'Lyso\s*bacter', 'Lysobacter'),
        (r'sp\.\s*nov\.?', 'sp. nov.'),
        (r'16S\s*rRNA', '16S rRNA'),
        
        # –ß–∏—Å–ª–∞
        (r'(\d+)\s*\.\s*(\d+)', r'\1.\2'),
        
        # –ï–¥–∏–Ω–∏—Ü—ã
        (r'(\d+)\s*%', r'\1%'),
        (r'(\d+\.?\d*)\s*Mb', r'\1 Mb'),
    ]

def apply_quality_fixes(text, rules):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É"""
    
    fixed_text = text
    
    for pattern, replacement in rules:
        fixed_text = re.sub(pattern, replacement, fixed_text)
    
    # –û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞
    fixed_text = re.sub(r'\s+', ' ', fixed_text.strip())
    
    return fixed_text

def show_improvements(original, fixed):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"""
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
    improvements = []
    
    if 'GW1-59T' in fixed and 'GW1- 5 9T' in original:
        improvements.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —à—Ç–∞–º–º GW1-59T")
    
    if re.search(r'\d+‚Äì\d+¬∞C', fixed) and re.search(r'\d+\s*[-‚Äì]\s*\d+\s*¬∞?\s*C', original):
        improvements.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    
    if re.search(r'C\d+:\d+', fixed) and re.search(r'C\s+\d+\s*:\s*\d+', original):
        improvements.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã")
    
    if 'Lysobacter' in fixed and 'Lyso bacter' in original:
        improvements.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∞")
    
    for improvement in improvements[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 2
        print(f"      ‚Ä¢ {improvement}")

def create_enhanced_search_wrapper():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    wrapper_code = '''
# Enhanced Search Wrapper - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ

def enhanced_search(indexer, query, top_k=10):
    """–ü–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
    results = indexer.search(query, top_k)
    
    # –ü—Ä–∞–≤–∏–ª–∞ —É–ª—É—á—à–µ–Ω–∏—è
    quality_rules = [
        (r'GW\\s*1-\\s*5\\s*9\\s*T', 'GW1-59T'),
        (r'(\\w+)\\s*-\\s*(\\d+)\\s+T', r'\\1-\\2T'),
        (r'C\\s+(\\d+)\\s*:\\s*(\\d+)', r'C\\1:\\2'),
        (r'(\\d+)\\s*[-‚Äì]\\s*(\\d+)\\s*¬∞?\\s*C', r'\\1‚Äì\\2¬∞C'),
        (r'pH\\s+(\\d+\\.?\\d*)\\s*[-‚Äì]\\s*(\\d+\\.?\\d*)', r'pH \\1‚Äì\\2'),
        (r'Lyso\\s*bacter', 'Lysobacter'),
        (r'(\\d+)\\s*\\.\\s*(\\d+)', r'\\1.\\2'),
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    enhanced_results = []
    for result in results:
        enhanced_text = result['text']
        
        for pattern, replacement in quality_rules:
            enhanced_text = re.sub(pattern, replacement, enhanced_text)
        
        enhanced_result = result.copy()
        enhanced_result['text'] = enhanced_text
        enhanced_result['quality_enhanced'] = enhanced_text != result['text']
        
        enhanced_results.append(enhanced_result)
    
    return enhanced_results
'''
    
    wrapper_file = Path("enhanced_search_wrapper.py")
    with open(wrapper_file, 'w', encoding='utf-8') as f:
        f.write(wrapper_code)
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω wrapper: {wrapper_file}")
    print(f"   –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –ø–æ–∏—Å–∫")

def test_enhanced_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"""
    
    print(f"\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê:")
    
    try:
        from lysobacter_rag.indexer.indexer import Indexer
        
        indexer = Indexer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "GW1-59T antarcticus",
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–æ—Å—Ç–∞", 
            "–∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã",
            "pH –¥–∏–∞–ø–∞–∑–æ–Ω"
        ]
        
        for query in test_queries:
            print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
            results = indexer.search(query, top_k=2)
            
            if results:
                for i, result in enumerate(results, 1):
                    original = result['text'][:100] + "..."
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                    rules = get_quality_fix_rules()
                    enhanced = apply_quality_fixes(result['text'], rules)[:100] + "..."
                    
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
                    if enhanced != original:
                        print(f"      ‚úÖ –£–õ–£–ß–®–ï–ù")
                    else:
                        print(f"      ‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            else:
                print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üéØ –ü–†–û–°–¢–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    success = fix_existing_data_quality()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        test_success = test_enhanced_search()
        
        if test_success:
            print(f"\nüéâ –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• –£–õ–£–ß–®–ï–ù–û!")
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            print(f"üí° –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –æ —à—Ç–∞–º–º–µ GW1-59T")
            
            print(f"\nüî¨ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print(f"   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ enhanced_search –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
            print(f"   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ RAG")
            print(f"   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞")
        
    else:
        print(f"\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –í–ê–†–ò–ê–ù–¢–´:")
        print(f"   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é: make index")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ PDF —Ñ–∞–π–ª–æ–≤")
        print(f"   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é")
    
    sys.exit(0 if success else 1) 