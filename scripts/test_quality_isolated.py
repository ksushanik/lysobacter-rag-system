#!/usr/bin/env python3
"""
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
"""
import re
from typing import Dict, Tuple
from dataclasses import dataclass

@dataclass
class EnhancementMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    total_fixes: int = 0
    strain_fixes: int = 0
    formula_fixes: int = 0
    unit_fixes: int = 0
    term_fixes: int = 0
    number_fixes: int = 0

class SimpleTextEnhancer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–ª—É—á—à–∏—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.metrics = EnhancementMetrics()
        self._load_rules()
    
    def _load_rules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
        self.strain_patterns = [
            (r'GW\s*1-\s*5\s*9\s*T', 'GW1-59T'),
            (r'(\w+)\s*-\s*(\d+)\s+T', r'\1-\2T'),
        ]
        
        self.formula_patterns = [
            (r'C\s+(\d+)\s*:\s*(\d+)', r'C\1:\2'),
        ]
        
        self.unit_patterns = [
            (r'(\d+)\s*[-‚Äì]\s*(\d+)\s*¬∞?\s*C', r'\1‚Äì\2¬∞C'),
            (r'pH\s+(\d+\.?\d*)\s*[-‚Äì]\s*(\d+\.?\d*)', r'pH \1‚Äì\2'),
        ]
        
        self.term_patterns = [
            (r'Lyso\s*bacter', 'Lysobacter'),
            (r'sp\.\s*nov\.?', 'sp. nov.'),
            (r'16S\s*rRNA', '16S rRNA'),
        ]
        
        self.number_patterns = [
            (r'(\d+)\s*\.\s*(\d+)', r'\1.\2'),
        ]
    
    def enhance_text(self, text: str) -> Tuple[str, EnhancementMetrics]:
        """–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞"""
        
        self.metrics = EnhancementMetrics()
        original_text = text
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
        text = self._apply_pattern_rules(text, self.strain_patterns, 'strain')
        text = self._apply_pattern_rules(text, self.formula_patterns, 'formula')
        text = self._apply_pattern_rules(text, self.unit_patterns, 'unit')
        text = self._apply_pattern_rules(text, self.term_patterns, 'term')
        text = self._apply_pattern_rules(text, self.number_patterns, 'number')
        
        # –û–±—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        text = re.sub(r'\s+', ' ', text.strip())
        
        if text != original_text:
            self.metrics.total_fixes = 1
        
        return text, self.metrics
    
    def _apply_pattern_rules(self, text: str, patterns: list, category: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        
        original_text = text
        
        for pattern, replacement in patterns:
            new_text = re.sub(pattern, replacement, text)
            if new_text != text:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if category == 'strain':
                    self.metrics.strain_fixes += 1
                elif category == 'formula':
                    self.metrics.formula_fixes += 1
                elif category == 'unit':
                    self.metrics.unit_fixes += 1
                elif category == 'term':
                    self.metrics.term_fixes += 1
                elif category == 'number':
                    self.metrics.number_fixes += 1
                
                text = new_text
        
        return text
    
    def get_quality_score(self, text: str) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞"""
        
        issues = 0
        total_checks = 0
        
        checks = [
            r'\w+\s*-\s*\d+\s+T',  # —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —à—Ç–∞–º–º—ã
            r'C\s+\d+\s*:\s*\d+',  # —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
            r'\d+\s*\.\s*\d+',     # —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
            r'[a-zA-Z]{50,}',      # —Å–ª–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
            r'\d+\s+¬∞\s+C',        # —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        ]
        
        for pattern in checks:
            total_checks += 1
            if re.search(pattern, text):
                issues += 1
        
        return max(0.0, 1.0 - (issues / total_checks))
    
    def validate_enhancement(self, original: str, enhanced: str) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ"""
        
        original_score = self.get_quality_score(original)
        enhanced_score = self.get_quality_score(enhanced)
        
        return {
            'original_score': original_score,
            'enhanced_score': enhanced_score,
            'improvement': enhanced_score - original_score,
            'successful': enhanced_score > original_score
        }

def test_quality_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–õ–£–ß–®–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 55)
    
    enhancer = SimpleTextEnhancer()
    
    # –¢–µ—Å—Ç-–∫–µ–π—Å—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    test_cases = [
        {
            'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π —à—Ç–∞–º–º GW1-59T',
            'original': 'strain GW1- 5 9T was isolated from Antarctic freshwater lake',
            'expected_fix': 'GW1-59T'
        },
        {
            'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'original': 'growth temperature range 15 ‚Äì 37 ¬∞C optimum 30¬∞C',
            'expected_fix': '15‚Äì37¬∞C'
        },
        {
            'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ö–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞',
            'original': 'major fatty acids C 15 : 0 and C 16 : 0',
            'expected_fix': 'C15:0'
        },
        {
            'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π pH',
            'original': 'pH range for growth 9 . 0 ‚Äì 11 . 0',
            'expected_fix': 'pH 9.0‚Äì11.0'
        },
        {
            'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞',
            'original': 'Lyso bacter antarcticus sp . nov .',
            'expected_fix': 'Lysobacter'
        },
        {
            'name': '–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞',
            'original': 'genome size 2 . 8 Mb with 2,487 genes',
            'expected_fix': '2.8 Mb'
        },
        {
            'name': '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'original': 'strain GW1- 5 9T grows at 15 ‚Äì 37 ¬∞C with C 15 : 0 fatty acids',
            'expected_fix': 'GW1-59T'
        }
    ]
    
    print(f"üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(test_cases)} –°–õ–£–ß–ê–ï–í:")
    
    total_improvements = 0
    successful_fixes = 0
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}:")
        
        original = test_case['original']
        enhanced, metrics = enhancer.enhance_text(original)
        validation = enhancer.validate_enhancement(original, enhanced)
        
        print(f"   –î–æ:     {original}")
        print(f"   –ü–æ—Å–ª–µ:  {enhanced}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        expected = test_case['expected_fix']
        if expected in enhanced and expected not in original:
            print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{expected}' –Ω–∞–π–¥–µ–Ω–æ!")
            successful_fixes += 1
        elif enhanced != original:
            print(f"   ‚ö†Ô∏è –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{expected}' –Ω–µ —Ç–æ—á–Ω–æ")
            successful_fixes += 0.5  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
        else:
            print(f"   ‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{expected}' –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        
        print(f"   üìä –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {validation['improvement']:.1%}")
        print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: —à—Ç–∞–º–º—ã:{metrics.strain_fixes}, —Ñ–æ—Ä–º—É–ª—ã:{metrics.formula_fixes}, –µ–¥–∏–Ω–∏—Ü—ã:{metrics.unit_fixes}, —Ç–µ—Ä–º–∏–Ω—ã:{metrics.term_fixes}, —á–∏—Å–ª–∞:{metrics.number_fixes}")
        
        total_improvements += validation['improvement']
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_improvement = total_improvements / len(test_cases)
    success_rate = successful_fixes / len(test_cases)
    
    print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {successful_fixes:.1f}/{len(test_cases)} ({success_rate:.1%})")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_improvement:.1%}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–¥–∏–∫—Ç
    if success_rate >= 0.8 and avg_improvement >= 0.3:
        print(f"   üéâ –û–¢–õ–ò–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
        verdict = "excellent"
    elif success_rate >= 0.6 and avg_improvement >= 0.2:
        print(f"   ‚úÖ –•–û–†–û–®–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ")
        verdict = "good"
    elif success_rate >= 0.4 and avg_improvement >= 0.1:
        print(f"   ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        verdict = "moderate"
    else:
        print(f"   ‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        verdict = "poor"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if verdict in ["excellent", "good"]:
        print(f"   1. üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
        print(f"   2. üìä –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_improvement:.0%}")
        print(f"   3. üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏")
        print(f"   4. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ –æ —à—Ç–∞–º–º–µ GW1-59T")
    elif verdict == "moderate":
        print(f"   1. üîß –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–ª—É—á–∞–µ–≤")
        print(f"   2. üß™ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print(f"   3. ‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –∫ –∫—Ä–∏—Ç–∏—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
    else:
        print(f"   1. üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
        print(f"   2. üîß –£–ª—É—á—à–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print(f"   3. ‚ùå –ù–ï –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
    
    print(f"\nüîÆ –ü–†–û–ì–ù–û–ó –í–õ–ò–Ø–ù–ò–Ø –ù–ê RAG-–°–ò–°–¢–ï–ú–£:")
    if verdict == "excellent":
        print(f"   üìà –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å—Å—è")
        print(f"   üéØ –û—Ç–≤–µ—Ç—ã –æ —à—Ç–∞–º–º–∞—Ö —Å—Ç–∞–Ω—É—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏")
        print(f"   üìä –ù–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è")
    elif verdict == "good":
        print(f"   üìà –ó–∞–º–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤")
        print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±—É–¥—É—Ç —Ä–µ—à–µ–Ω—ã")
    else:
        print(f"   ‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º")
    
    return verdict in ["excellent", "good"]

def demonstrate_before_after():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä —É–ª—É—á—à–µ–Ω–∏—è"""
    
    print(f"\nüî¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –î–û –ò –ü–û–°–õ–ï")
    print("-" * 40)
    
    enhancer = SimpleTextEnhancer()
    
    # –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    problematic_text = """
    strain GW1- 5 9T (= KCTC 52731 T = CCTCC AB 2014046 T ) was isolated from a freshwater
    lake in Antarctica. Cells are Gram-stain-negative, aerobic, rod-shaped, 0.6‚Äì0.8 √ó 0.7‚Äì1.7 Œºm.
    Growth occurs at 15 ‚Äì 37 ¬∞C (optimum, 30 ¬∞C), pH 9 . 0 ‚Äì 11 . 0 (optimum, pH 10.0) and 
    with 0‚Äì4 % (w/v) NaCl. Major fatty acids are C 15 : 0, C 16 : 0, C 16 : 1 œâ7c and C 17 : 0.
    The G + C content is 63 . 9 mol%. Based on 16S rRNA gene sequence analysis, strain GW1- 5 9T
    belongs to the genus Lyso bacter and is most closely related to L. enzymogenes YC1 T.
    """
    
    enhanced_text, metrics = enhancer.enhance_text(problematic_text)
    validation = enhancer.validate_enhancement(problematic_text, enhanced_text)
    
    print(f"üìù –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:")
    print(f"   {problematic_text.strip()}")
    
    print(f"\n‚ú® –£–õ–£–ß–®–ï–ù–ù–´–ô –¢–ï–ö–°–¢:")
    print(f"   {enhanced_text}")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô:")
    print(f"   –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {validation['improvement']:.1%}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —à—Ç–∞–º–º–æ–≤: {metrics.strain_fixes}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º—É–ª: {metrics.formula_fixes}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –µ–¥–∏–Ω–∏—Ü: {metrics.unit_fixes}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤: {metrics.term_fixes}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–∏—Å–µ–ª: {metrics.number_fixes}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
    improvements_found = []
    
    if 'GW1-59T' in enhanced_text and 'GW1- 5 9T' not in enhanced_text:
        improvements_found.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —à—Ç–∞–º–º GW1-59T")
    
    if '15‚Äì37¬∞C' in enhanced_text:
        improvements_found.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    
    if 'C15:0' in enhanced_text:
        improvements_found.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–æ—Ä–º—É–ª—ã –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç")
    
    if 'pH 9.0‚Äì11.0' in enhanced_text:
        improvements_found.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω pH")
    
    if 'Lysobacter' in enhanced_text and 'Lyso bacter' not in enhanced_text:
        improvements_found.append("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∞")
    
    print(f"\nüéØ –ö–û–ù–ö–†–ï–¢–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    for improvement in improvements_found:
        print(f"   ‚úÖ {improvement}")
    
    if not improvements_found:
        print(f"   ‚ö†Ô∏è –ó–Ω–∞—á–∏–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    return len(improvements_found) > 0

if __name__ == "__main__":
    print("üéØ –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 55)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_success = test_quality_system()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
    demo_success = demonstrate_before_after()
    
    print(f"\nüèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if test_success and demo_success:
        print(f"   üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–ò–ú–ï–ù–ï–ù–ò–Æ!")
        print(f"   üìà –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
        print(f"   üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è")
        
        print(f"\nüîÑ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print(f"   1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
        print(f"   2. –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–π—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏")
        print(f"   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ RAG-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å–∞—Ö –æ —à—Ç–∞–º–º–∞—Ö")
        print(f"   4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤ –¥–∏–Ω–∞–º–∏–∫–µ")
        
    elif test_success or demo_success:
        print(f"   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
        print(f"   üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
    else:
        print(f"   ‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        print(f"   üîç –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    exit_code = 0 if (test_success and demo_success) else 1
    exit(exit_code) 