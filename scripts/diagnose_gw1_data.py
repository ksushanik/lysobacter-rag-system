#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –æ —à—Ç–∞–º–º–µ GW1-59T –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def diagnose_gw1_data():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ GW1-59T"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –û –®–¢–ê–ú–ú–ï GW1-59T")
    print("=" * 55)
    
    try:
        from lysobacter_rag.indexer.indexer import Indexer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–µ—Ä
        indexer = Indexer()
        
        # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è GW1-59T
        search_terms = [
            "GW1-59T",
            "Lysobacter antarcticus",
            "antarcticus", 
            "Antarctica",
            "temperature 30",
            "pH 9-11",
            "NaCl 0-4",
            "gelatin hydrolysis",
            "genome 2.8 Mb"
        ]
        
        print("üîç –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º:")
        print("-" * 40)
        
        all_chunks = {}
        
        for term in search_terms:
            print(f"\nüìù –ü–æ–∏—Å–∫: '{term}'")
            results = indexer.search(term, top_k=5)
            
            if results:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                for i, result in enumerate(results, 1):
                    chunk_id = f"{term}_{i}"
                    all_chunks[chunk_id] = result
                    
                                                              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞
                     text = result['text']
                    
                    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                    problems = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª–∞—Ö
                    if 'C 15' in text or 'C 16' in text or ': 0' in text:
                        problems.append("–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
                    long_words = [word for word in text.split() if len(word) > 50]
                    if long_words:
                        problems.append(f"–°–ª–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ ({len(long_words)})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
                    if '5 9T' in text or 'GW1-5' in text:
                        problems.append("–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —à—Ç–∞–º–º–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    key_data = {
                        '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': any(x in text.lower() for x in ['30¬∞c', '15-37', 'temperature']),
                        'pH': any(x in text.lower() for x in ['ph 9', 'ph 11', 'ph range']),
                        '—Å–æ–ª–µ–Ω–æ—Å—Ç—å': any(x in text.lower() for x in ['nacl', '0-4%', 'salt']),
                        '–≥–µ–Ω–æ–º': any(x in text.lower() for x in ['2.8 mb', 'genome', '2,784']),
                        '–∞–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞': any(x in text.lower() for x in ['antarctica', 'antarctic', 'polar'])
                    }
                    
                    print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: –î–ª–∏–Ω–∞ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    if problems:
                        print(f"      ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(problems)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    found_data = [k for k, v in key_data.items() if v]
                    if found_data:
                        print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {', '.join(found_data)}")
                    else:
                        print(f"      ‚ùå –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü
                    if len(text) > 100:
                        print(f"      üìÑ –û–±—Ä–∞–∑–µ—Ü: {text[:100]}...")
                    else:
                        print(f"      üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
            else:
                print(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —á–∞–Ω–∫–∏
        print("\n" + "=" * 55)
        print("üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
        print("=" * 55)
        
        # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —á–∞–Ω–∫–∏ –æ GW1-59T
        best_results = indexer.search("GW1-59T Lysobacter antarcticus characteristics temperature pH genome", top_k=10)
        
        if best_results:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(best_results)} –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            all_text = " ".join([r['content'] for r in best_results])
            
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data_found = {
                '–®—Ç–∞–º–º GW1-59T': 'GW1-59T' in all_text or 'GW1-5 9T' in all_text,
                '–í–∏–¥ antarcticus': 'antarcticus' in all_text.lower(),
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 15-37¬∞C': any(x in all_text for x in ['15-37', '15‚Äì37', '30¬∞C', '30 ¬∞C']),
                'pH 9-11': any(x in all_text for x in ['pH 9', 'pH 11', '9-11', '9‚Äì11']),
                'NaCl 0-4%': any(x in all_text for x in ['0-4%', '0‚Äì4%', 'NaCl']),
                '–†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞': any(x in all_text for x in ['2.8 Mb', '2,784', '2784373']),
                '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞': any(x in all_text.lower() for x in ['antarctica', 'antarctic']),
                '–ì–ª—É–±–∏–Ω–∞ 95–º': '95' in all_text,
                'pH –æ–ø—Ç–∏–º—É–º': any(x in all_text for x in ['pH 9', 'pH 10', 'pH 11']),
                '–ñ–µ–ª–∞—Ç–∏–Ω': any(x in all_text.lower() for x in ['gelatin', '–∂–µ–ª–∞—Ç–∏–Ω']),
                'Q-8 —Ö–∏–Ω–æ–Ω': 'Q-8' in all_text,
                '–û–∫—Å–∏–¥–∞–∑–∞ +': any(x in all_text.lower() for x in ['oxidase', '–æ–∫—Å–∏–¥–∞–∑–∞'])
            }
            
            print("\nüìã –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –î–ê–ù–ù–´–•:")
            for key, found in data_found.items():
                status = "‚úÖ" if found else "‚ùå"
                print(f"   {status} {key}")
            
            found_count = sum(data_found.values())
            total_count = len(data_found)
            completeness = (found_count / total_count) * 100
            
            print(f"\nüìä –ü–û–õ–ù–û–¢–ê –î–ê–ù–ù–´–•: {found_count}/{total_count} ({completeness:.1f}%)")
            
            if completeness < 50:
                print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            elif completeness < 75:
                print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã
            print("\nüìç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ß–ê–ù–ö–ê–ú:")
            for i, result in enumerate(best_results[:5], 1):
                text = result['content']
                found_in_chunk = [k for k, v in data_found.items() if v and any(term.lower() in text.lower() for term in k.split())]
                print(f"   –ß–∞–Ω–∫ {i}: {len(found_in_chunk)} —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
                if found_in_chunk:
                    print(f"      –°–æ–¥–µ—Ä–∂–∏—Ç: {', '.join(found_in_chunk[:3])}{'...' if len(found_in_chunk) > 3 else ''}")
        
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –î–∞–Ω–Ω—ã–µ –æ GW1-59T –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def suggest_improvements():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    
    print("\n" + "=" * 55)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ")
    print("=" * 55)
    
    recommendations = [
        "1. üîß –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π PDF:",
        "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (pdfplumber, pymupdf)",
        "   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü", 
        "   ‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª (C 15:0 ‚Üí C15:0)",
        "",
        "2. üìä –£–õ–£–ß–®–ï–ù–ò–ï –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò:",
        "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü",
        "   ‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤",
        "   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "",
        "3. üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–û–ò–°–ö–ê:",
        "   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (GW1-59T, antarcticus)",
        "   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
        "   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —à—Ç–∞–º–º–æ–≤",
        "",
        "4. ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•:",
        "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤",
        "   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏",
        "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"
    ]
    
    for rec in recommendations:
        print(rec)

if __name__ == "__main__":
    success = diagnose_gw1_data()
    suggest_improvements()
    
    if not success:
        sys.exit(1) 