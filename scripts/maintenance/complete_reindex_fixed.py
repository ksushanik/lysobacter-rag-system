#!/usr/bin/env python3
"""
–ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ + —É–º–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥
"""

import sys
import os
from pathlib import Path
import time
from tqdm import tqdm

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent))

from lysobacter_rag.indexer.indexer import Indexer
from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor
from lysobacter_rag.data_processor import DocumentChunk
from config import config

def complete_reindex():
    """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    
    print("üß¨ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –° –£–ú–ù–´–ú –ß–ê–ù–ö–ò–ù–ì–û–ú")
    print("=" * 60)
    print("üéØ –¶–ï–õ–¨: –ß–∞–Ω–∫–∏ –ø–æ 300-350 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data_dir = Path("data")
    pdf_files = sorted(list(data_dir.glob("*.pdf")))[:10]  # –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú 10 —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    
    print(f"üìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤ (—Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞)")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å —É–º–Ω—ã–º —á–∞–Ω–∫–∏–Ω–≥–æ–º
    extractor = AdvancedPDFExtractor(use_smart_chunking=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–µ—Ä
    indexer = Indexer()
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    print("\nüóëÔ∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        indexer.delete_collection()
        print("‚úÖ –°—Ç–∞—Ä–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        indexer = Indexer()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        print("‚úÖ –ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    all_document_chunks = []
    successful_files = 0
    
    print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    
    for i, pdf_file in enumerate(pdf_files, 1):
        try:
            print(f"\n{i:2d}/{len(pdf_files)} üìñ {pdf_file.name}")
            
            # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
            document = extractor.extract_document(pdf_file)
            
            if not document.elements:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                continue
                
            print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(document.elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –®–∞–≥ 2: –£–º–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥
            chunks = extractor.get_smart_chunks(document)
            
            if not chunks:
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –Ω–µ—Ç —á–∞–Ω–∫–æ–≤")
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤
            chunk_sizes = [len(chunk['content']) for chunk in chunks]
            avg_size = sum(chunk_sizes) / len(chunk_sizes) if chunk_sizes else 0
            
            print(f"   üß¨ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤, —Å—Ä. —Ä–∞–∑–º–µ—Ä {avg_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–º–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥ —Å—Ä–∞–±–æ—Ç–∞–ª
            if avg_size > 1000:
                print(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ß–∞–Ω–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ!")
            elif avg_size < 100:
                print(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ß–∞–Ω–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ!")
            else:
                print(f"   ‚úÖ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π")
            
            # –®–∞–≥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DocumentChunk
            for j, chunk in enumerate(chunks):
                doc_chunk = DocumentChunk(
                    chunk_id=f"{pdf_file.stem}_{j}",
                    text=chunk['content'],
                    chunk_type=chunk['metadata'].get('chunk_type', 'text'),
                    metadata=chunk['metadata']
                )
                all_document_chunks.append(doc_chunk)
            
            successful_files += 1
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            continue
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
    print(f"\nüíæ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {len(all_document_chunks)}")
    
    if all_document_chunks:
        try:
            success = indexer.index_chunks(all_document_chunks)
            
            if success:
                print(f"   ‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã!")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
    
    stats = indexer.get_collection_stats()
    final_chunks = stats.get('total_chunks', 0)
    print(f"   üì¶ –ß–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ: {final_chunks}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ
    try:
        test_results = indexer.search("Lysobacter", top_k=10)
        if test_results:
            sizes = [len(r['text']) for r in test_results]
            avg_db_size = sum(sizes) / len(sizes)
            print(f"   üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ –±–∞–∑–µ: {avg_db_size:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if 200 <= avg_db_size <= 500:
                print(f"   üéâ –û–¢–õ–ò–ß–ù–û: –†–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã!")
                size_quality = "excellent"
            elif avg_db_size < 1000:
                print(f"   ‚úÖ –•–û–†–û–®–û: –†–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤ –ø—Ä–∏–µ–º–ª–µ–º—ã")
                size_quality = "good"
            else:
                print(f"   ‚ùå –ü–õ–û–•–û: –ß–∞–Ω–∫–∏ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ")
                size_quality = "poor"
        else:
            print(f"   ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
            size_quality = "unknown"
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        size_quality = "error"
    
    # –¢–µ—Å—Ç –Ω–∞ YC5194
    print(f"\nüß™ –¢–ï–°–¢ –ù–ê YC5194:")
    try:
        yc_results = indexer.search("Lysobacter capsici YC5194", top_k=3)
        if yc_results:
            best_relevance = yc_results[0]['relevance_score']
            print(f"   ‚úÖ YC5194 –Ω–∞–π–¥–µ–Ω! –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {best_relevance:.3f}")
            
            if best_relevance > 0.5:
                print(f"   üéâ –û–¢–õ–ò–ß–ù–ê–Ø —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å!")
                yc_quality = "excellent"
            elif best_relevance > 0.3:
                print(f"   ‚úÖ –•–æ—Ä–æ—à–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å")
                yc_quality = "good"
            else:
                print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å")
                yc_quality = "poor"
        else:
            print(f"   ‚ùå YC5194 –ù–ï –ù–ê–ô–î–ï–ù")
            yc_quality = "not_found"
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YC5194: {e}")
        yc_quality = "error"
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    
    if size_quality == "excellent" and yc_quality == "excellent":
        print(f"   üéâ –ò–î–ï–ê–õ–¨–ù–û: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
        return True
    elif size_quality in ["excellent", "good"] and yc_quality in ["excellent", "good"]:
        print(f"   ‚úÖ –•–û–†–û–®–û: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
        return True
    else:
        print(f"   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        print(f"      –†–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤: {size_quality}")
        print(f"      –ü–æ–∏—Å–∫ YC5194: {yc_quality}")
        return False

if __name__ == "__main__":
    try:
        success = complete_reindex()
        if success:
            print(f"\nüöÄ –ì–û–¢–û–í–û: –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        else:
            print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        exit(1) 