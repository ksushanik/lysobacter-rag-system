#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º
"""

import sys
from pathlib import Path
sys.path.insert(0, 'src')
sys.path.insert(0, '.')

def reindex_all_pdfs_with_advanced_extractor():
    """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ PDF —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º"""
    
    print("üîÑ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –í–°–ï–• PDF –° –ü–†–û–î–í–ò–ù–£–¢–´–ú –≠–ö–°–¢–†–ê–ö–¢–û–†–û–ú")
    print("=" * 70)
    print("üéØ –¶–µ–ª—å: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –±–∞–∑—É —Å–æ –≤—Å–µ–º–∏ —à—Ç–∞–º–º–∞–º–∏ (–≤–∫–ª—é—á–∞—è YC5194)")
    print("üöÄ –ú–µ—Ç–æ–¥: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä (pymupdf4llm + pdfplumber + tabula)")
    print()
    
    try:
        from config import config
        from lysobacter_rag.pdf_extractor.advanced_pdf_extractor import AdvancedPDFExtractor
        from lysobacter_rag.indexer.indexer import Indexer
        from lysobacter_rag.data_processor import DocumentChunk
        from tqdm import tqdm
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        extractor = AdvancedPDFExtractor()
        indexer = Indexer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
        data_dir = Path(config.DATA_DIR)
        pdf_files = list(data_dir.glob("*.pdf"))
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
        
        if len(pdf_files) == 0:
            print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        print("üóëÔ∏è –û—á–∏—â–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
            all_data = indexer.collection.get()
            if all_data['ids']:
                indexer.collection.delete(ids=all_data['ids'])
                print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(all_data['ids'])} –∑–∞–ø–∏—Å–µ–π")
            else:
                print("   ‚úÖ –ë–∞–∑–∞ —É–∂–µ –ø—É—Å—Ç–∞")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            print("   üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            try:
                indexer.chroma_client.delete_collection(config.CHROMA_COLLECTION_NAME)
            except:
                pass
            indexer = Indexer()  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å–µ—Ä
        
        # –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        all_chunks = []
        processed_files = 0
        failed_files = 0
        
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤...")
        
        for pdf_file in tqdm(pdf_files, desc="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF"):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                document = extractor.extract_document(pdf_file)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞–Ω–∫–∏
                file_chunks = []
                chunk_id = 0
                
                for element in document.elements:
                    chunk = DocumentChunk(
                        chunk_id=f"{pdf_file.stem}_{element.element_type}_{chunk_id}",
                        text=element.content,
                        chunk_type=element.element_type,
                        metadata={
                            'source_pdf': pdf_file.name,
                            'page_number': element.page_number,
                            'confidence': element.confidence,
                            'extraction_method': element.metadata.get('extraction_method', 'advanced'),
                            'table_shape': element.metadata.get('table_shape', ''),
                            'relevance_score': element.confidence,
                            'advanced_extractor': True
                        }
                    )
                    file_chunks.append(chunk)
                    chunk_id += 1
                
                all_chunks.extend(file_chunks)
                processed_files += 1
                
                print(f"‚úÖ {pdf_file.name}: {len(file_chunks)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_file.name}: {e}")
                failed_files += 1
                continue
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_files}")
        print(f"   üìã –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(all_chunks)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —á–∞–Ω–∫–æ–≤
        text_chunks = [c for c in all_chunks if c.chunk_type == 'text']
        table_chunks = [c for c in all_chunks if c.chunk_type == 'table']
        
        print(f"   üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤: {len(text_chunks)}")
        print(f"   üìä –¢–∞–±–ª–∏—á–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {len(table_chunks)}")
        
        if len(all_chunks) == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∞–Ω–∫–∏!")
            return False
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —á–∞–Ω–∫–∏
        print(f"\nüîÑ –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é {len(all_chunks)} —á–∞–Ω–∫–æ–≤...")
        success = indexer.index_chunks(all_chunks)
        
        if success:
            print("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ–π –±–∞–∑—ã
            stats = indexer.get_collection_stats()
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–û–í–û–ô –ë–ê–ó–´:")
            for key, value in stats.items():
                if key != 'sources':
                    print(f"   {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ YC5194
            print(f"\nüîç –ü–†–û–í–ï–†–ö–ê YC5194:")
            yc5194_results = indexer.search("YC5194", top_k=3)
            if yc5194_results:
                print(f"‚úÖ YC5194 –Ω–∞–π–¥–µ–Ω! –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {yc5194_results[0].get('relevance_score', 0):.3f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
                for i, result in enumerate(yc5194_results[:2], 1):
                    metadata = result['metadata']
                    print(f"   {i}. –ò—Å—Ç–æ—á–Ω–∏–∫: {metadata.get('source_pdf', 'N/A')}")
                    print(f"      –¢–∏–ø: {metadata.get('chunk_type', 'N/A')}")
                    print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('relevance_score', 0):.3f}")
            else:
                print("‚ùå YC5194 –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏!")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_yc5194_after_reindex():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ YC5194 –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    
    print(f"\nüß™ –¢–ï–°–¢ YC5194 –ü–û–°–õ–ï –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–ò")
    print("=" * 40)
    
    try:
        from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
        
        rag = RAGPipeline()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query = "–ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—Ç–∞–º–º–∞ Lysobacter capsici YC5194?"
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
        
        response = rag.ask_question(query)
        
        print(f"\nüí¨ –û—Ç–≤–µ—Ç:")
        print(f"{response['answer'][:500]}...")
        print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏:")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {response['num_sources_used']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response['confidence']:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç YC5194
        if 'YC5194' in response['answer']:
            print("‚úÖ YC5194 –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ!")
            return True
        else:
            print("‚ö†Ô∏è YC5194 –≤—Å—ë –µ—â—ë –Ω–µ –≤ –æ—Ç–≤–µ—Ç–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–û–õ–ù–£–Æ –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Æ")
    
    # –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    success = reindex_all_pdfs_with_advanced_extractor()
    
    if success:
        print("\n" + "="*50)
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º YC5194
        test_success = test_yc5194_after_reindex()
        
        if test_success:
            print("\nüéâ –£–°–ü–ï–•! YC5194 —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
        else:
            print("\n‚ö†Ô∏è YC5194 –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω–µ—Ç –≤ PDF —Ñ–∞–π–ª–∞—Ö.")
    else:
        print("\n‚ùå –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å") 