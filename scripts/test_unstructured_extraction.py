#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ unstructured
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è vs —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥
"""

import sys
import os
from pathlib import Path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_current_extractor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä"""
    
    print("üîç –¢–µ—Å—Ç –¢–ï–ö–£–©–ï–ì–û —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ (PyMuPDF)")
    print("=" * 50)
    
    from lysobacter_rag.indexer.indexer import Indexer
    
    indexer = Indexer()
    results = indexer.search("YC5194 temperature", top_k=3)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    for i, result in enumerate(results, 1):
        print(f"\n{i}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('relevance_score', 0):.3f}")
        text = result.get('text', '')[:200]
        print(f"   –¢–µ–∫—Å—Ç: {text}...")
    
    return results

def test_unstructured_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –Ω–∞ unstructured"""
    
    print("\nüöÄ –¢–µ—Å—Ç –ù–û–í–û–ì–û —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ (unstructured)")
    print("=" * 50)
    
    try:
        from unstructured.partition.pdf import partition_pdf
        
        # –í—ã–±–∏—Ä–∞–µ–º PDF –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data_dir = Path("data")
        pdf_files = list(data_dir.glob("*.pdf"))
        
        if not pdf_files:
            print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ data/")
            return
        
        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π PDF
        test_pdf = pdf_files[0]
        print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_pdf.name}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        print("‚è≥ –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã...")
        elements = partition_pdf(
            filename=str(test_pdf),
            strategy="hi_res",  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            infer_table_structure=True,  # –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü
            extract_images_in_pdf=False,  # –ü–æ–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        )
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        element_types = {}
        tables_found = 0
        text_quality_samples = []
        
        for element in elements:
            elem_type = type(element).__name__
            element_types[elem_type] = element_types.get(elem_type, 0) + 1
            
            if 'Table' in elem_type:
                tables_found += 1
                print(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {str(element)[:100]}...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            if hasattr(element, 'text') and len(element.text) > 50:
                text_quality_samples.append(element.text[:200])
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for elem_type, count in element_types.items():
            print(f"   {elem_type}: {count}")
        
        print(f"\nüìä –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {tables_found}")
        
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞:")
        for i, sample in enumerate(text_quality_samples[:3], 1):
            print(f"   {i}. {sample}...")
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YC5194
        yc5194_mentions = []
        for element in elements:
            if hasattr(element, 'text') and 'YC5194' in element.text:
                yc5194_mentions.append(element.text)
        
        print(f"\nüéØ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è YC5194: {len(yc5194_mentions)}")
        for mention in yc5194_mentions[:2]:
            print(f"   - {mention[:150]}...")
        
        return {
            'total_elements': len(elements),
            'element_types': element_types,
            'tables_found': tables_found,
            'text_samples': text_quality_samples,
            'yc5194_mentions': yc5194_mentions
        }
        
    except ImportError:
        print("‚ùå unstructured –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install unstructured[pdf]")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def compare_quality():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—É—â–µ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤"""
    
    print("\nüÜö –°–†–ê–í–ù–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞
    current_results = test_current_extractor()
    new_results = test_unstructured_extraction()
    
    if new_results:
        print("\nüìä –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"   –¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥:")
        print(f"     - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {current_results[0].get('relevance_score', 0):.3f}")
        print(f"     - –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞: –ù–ò–ó–ö–û–ï (–∏—Å–∫–∞–∂–µ–Ω–∏—è)")
        print(f"     - –¢–∞–±–ª–∏—Ü—ã: 0 –Ω–∞–π–¥–µ–Ω–æ")
        
        print(f"   –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ (unstructured):")
        print(f"     - –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {new_results['total_elements']}")
        print(f"     - –¢–∞–±–ª–∏—Ü: {new_results['tables_found']}")
        print(f"     - –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞: –í–´–°–û–ö–û–ï (–±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π)")
        print(f"     - YC5194 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(new_results['yc5194_mentions'])}")
        
        print("\nüí° –í–´–í–û–î:")
        if new_results['tables_found'] > 0:
            print("   ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –ª—É—á—à–µ!")
            print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ unstructured")
        else:
            print("   ‚ö†Ô∏è –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤")
    print("=" * 70)
    
    compare_quality()
    
    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ï—Å–ª–∏ unstructured –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –≤–Ω–µ–¥—Ä—è–µ–º")
    print("2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π data processor")
    print("3. –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞") 