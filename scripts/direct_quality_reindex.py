#!/usr/bin/env python3
"""
–ü—Ä—è–º–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def apply_quality_reindexing():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print("üöÄ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –° –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 55)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ
    if 'lysobacter_rag_env' not in sys.prefix:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ")
        print("   –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ: source lysobacter_rag_env/bin/activate")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        print("üîß –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")
        
        from config import config
        import shutil
        import time
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏
        data_dir = Path(config.DATA_DIR)
        storage_dir = Path(config.STORAGE_DIR)
        chroma_db_path = storage_dir / "chroma_db"
        
        print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_dir}")
        print(f"üìÇ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤
        pdf_files = list(data_dir.glob("*.pdf"))
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
        
        if len(pdf_files) == 0:
            print("‚ùå –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return False
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:")
        print(f"   –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ ChromaDB")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~10-15 –º–∏–Ω—É—Ç")
        print(f"   –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(pdf_files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        try:
            confirm = input("\n   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        if confirm != 'y':
            print("‚ùå –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã
        if chroma_db_path.exists():
            backup_path = storage_dir / f"chroma_db_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path.name}")
            shutil.move(str(chroma_db_path), str(backup_path))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
        print(f"\nüîÑ –ó–ê–ü–£–°–ö –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–ò...")
        start_time = time.time()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        reindex_script = Path(__file__).parent / "reindex_with_quality_fix.py"
        
        if reindex_script.exists():
            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
            import subprocess
            result = subprocess.run([
                sys.executable, str(reindex_script)
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                lines = result.stdout.split('\n')
                for line in lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                    if line.strip():
                        print(f"   {line}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:")
                print(f"   {result.stderr}")
                return False
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å - –ø—Ä—è–º–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
            print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é...")
            success = run_direct_reindexing()
            
            if not success:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        elapsed_time = time.time() - start_time
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print(f"\nüß™ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        success = test_improved_quality()
        
        if success:
            print(f"\nüéâ –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: make check-overall-quality")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –≤—Å–µ –û–ö
            old_backups = list(storage_dir.glob("chroma_db_backup_*"))
            if len(old_backups) > 3:  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ
                for backup in sorted(old_backups)[:-3]:
                    shutil.rmtree(backup)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup.name}")
            
            return True
        else:
            print(f"\n‚ö†Ô∏è –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º")
            return False
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if 'backup_path' in locals() and backup_path.exists():
            print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            if chroma_db_path.exists():
                shutil.rmtree(chroma_db_path)
            shutil.move(str(backup_path), str(chroma_db_path))
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        return False

def run_direct_reindexing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä—è–º—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é"""
    
    try:
        from config import config
        from lysobacter_rag.pdf_extractor.improved_extractor import ImprovedPDFExtractor
        from lysobacter_rag.data_processor import DataProcessor  
        from lysobacter_rag.indexer.indexer import Indexer
        
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        extractor = ImprovedPDFExtractor()
        processor = DataProcessor()
        indexer = Indexer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        print("üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        data_dir = Path(config.DATA_DIR)
        pdf_files = list(data_dir.glob("*.pdf"))
        
        all_documents = []
        for i, pdf_file in enumerate(pdf_files, 1):
            try:
                print(f"   {i}/{len(pdf_files)}: {pdf_file.name}")
                doc = extractor.extract_with_quality_control(pdf_file)
                all_documents.append(doc)
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {pdf_file.name}: {e}")
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤...")
        all_chunks = processor.process_documents(all_documents)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        print("üóÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
        success = indexer.rebuild_index(all_chunks)
        
        if success:
            stats = indexer.get_collection_stats()
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: {stats.get('total_chunks', 0)} —á–∞–Ω–∫–æ–≤")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        return False

def test_improved_quality():
    """–ë—ã—Å—Ç—Ä–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    try:
        from lysobacter_rag.indexer.indexer import Indexer
        
        indexer = Indexer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_cases = [
            ("GW1-59T", "—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —à—Ç–∞–º–º–∞"),
            ("15‚Äì37¬∞C", "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"),
            ("pH 9.0‚Äì11.0", "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π pH"),
            ("C15:0", "–∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã"),
            ("Lysobacter antarcticus", "–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        ]
        
        success_count = 0
        
        for query, description in test_cases:
            results = indexer.search(query, top_k=1)
            if results and len(results) > 0:
                print(f"   ‚úÖ {query}: –Ω–∞–π–¥–µ–Ω ({description})")
                success_count += 1
            else:
                print(f"   ‚ö†Ô∏è {query}: –Ω–µ –Ω–∞–π–¥–µ–Ω ({description})")
        
        quality_score = success_count / len(test_cases)
        print(f"\nüìä –ö–∞—á–µ—Å—Ç–≤–æ: {success_count}/{len(test_cases)} ({quality_score:.1%})")
        
        return quality_score >= 0.6  # 60% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ - –º–∏–Ω–∏–º—É–º
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üéØ –ü–†–Ø–ú–ê–Ø –ü–ï–†–ï–ò–ù–î–ï–ö–°–ê–¶–ò–Ø –° –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 60)
    
    success = apply_quality_reindexing()
    
    if success:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ê!")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –æ —à—Ç–∞–º–º–µ GW1-59T")
        print(f"   ‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏")
        print(f"   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: make monitor-quality")
    else:
        print(f"\nüí° –ß–¢–û –î–ï–õ–ê–¢–¨:")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏")
        print(f"   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print(f"   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: make fix-extraction")
    
    sys.exit(0 if success else 1) 