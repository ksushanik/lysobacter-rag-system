#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —à—Ç–∞–º–º–µ GW1-59T
"""
import sys
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def find_correct_strain_data():
    """–ò—â–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —à—Ç–∞–º–º–µ GW1-59T"""
    
    print("üîç –ü–û–ò–°–ö –ü–†–ê–í–ò–õ–¨–ù–´–• –î–ê–ù–ù–´–• –û –®–¢–ê–ú–ú–ï GW1-59T")
    print("=" * 50)
    
    try:
        from lysobacter_rag.indexer.indexer import Indexer
        
        indexer = Indexer()
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        queries = [
            "GW1-59T",
            "GW1- 5 9T", 
            "Lysobacter antarcticus",
            "antarcticus GW1",
            "pH 9.0 11.0",
            "15-37¬∞C Lysobacter",
            "Untersee lake Antarctica"
        ]
        
        all_results = {}
        
        for query in queries:
            print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
            results = indexer.search(query, top_k=3)
            
            if results:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                for i, result in enumerate(results, 1):
                    key = f"{query}_{i}"
                    all_results[key] = result
                    
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
                    print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('relevance_score', 0):.3f}")
                    print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {result['metadata'].get('source_pdf', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    print(f"      –°—Ç—Ä–∞–Ω–∏—Ü–∞: {result['metadata'].get('page_number', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                    text = result['text']
                    if 'GW1' in text:
                        print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç GW1")
                    if 'pH' in text:
                        print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç pH –¥–∞–Ω–Ω—ã–µ")
                    if '¬∞C' in text:
                        print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
                    if 'antarcticus' in text.lower():
                        print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç antarcticus")
                    
                    print(f"      –§—Ä–∞–≥–º–µ–Ω—Ç: {text[:150]}...")
            else:
                print(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –õ–£–ß–®–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_results = sorted(all_results.items(), 
                              key=lambda x: x[1].get('relevance_score', 0), 
                              reverse=True)
        
        print(f"\nüèÜ –¢–û–ü-5 –ù–ê–ò–ë–û–õ–ï–ï –†–ï–õ–ï–í–ê–ù–¢–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        for i, (key, result) in enumerate(sorted_results[:5], 1):
            print(f"\n{i}. {key}")
            print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('relevance_score', 0):.3f}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result['metadata'].get('source_pdf', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result['text'][:300]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            text = result['text']
            
            if 'GW1-59T' in text or 'GW1- 5 9T' in text:
                print(f"   ‚úÖ –°–û–î–ï–†–ñ–ò–¢ –®–¢–ê–ú–ú GW1-59T!")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                
                # pH
                ph_match = re.search(r'pH\s*(\d+\.?\d*)[-‚Äì](\d+\.?\d*)', text)
                if ph_match:
                    print(f"   üìä pH: {ph_match.group(1)}‚Äì{ph_match.group(2)}")
                
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                temp_match = re.search(r'(\d+)[-‚Äì](\d+)\s*¬∞?C', text)
                if temp_match:
                    print(f"   üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_match.group(1)}‚Äì{temp_match.group(2)}¬∞C")
                
                # –ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã
                fatty_matches = re.findall(r'C\s*(\d+):(\d+)', text)
                if fatty_matches:
                    fatty_acids = [f"C{m[0]}:{m[1]}" for m in fatty_matches]
                    print(f"   üß™ –ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã: {', '.join(fatty_acids)}")
                
                # –ì–µ–Ω–æ–º
                genome_match = re.search(r'(\d+\.?\d*)\s*(Mb|–º–±)', text, re.IGNORECASE)
                if genome_match:
                    print(f"   üß¨ –ì–µ–Ω–æ–º: {genome_match.group(1)} Mb")
                
                # –ú–µ—Å—Ç–æ
                if '–æ–∑–µ—Ä' in text.lower() or 'lake' in text.lower():
                    print(f"   üåç –ú–µ—Å—Ç–æ: –û–∑–µ—Ä–æ (—É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)")
                
                if '–∞–Ω—Ç–∞—Ä–∫—Ç–∏–∫' in text.lower() or 'antarct' in text.lower():
                    print(f"   üßä –†–µ–≥–∏–æ–Ω: –ê–Ω—Ç–∞—Ä–∫—Ç–∏–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"\nüéØ –ü–û–ò–°–ö –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•:")
        
        reference_checks = [
            ("pH 9.0‚Äì11.0", "pH.*9\.0.*11\.0"),
            ("15‚Äì37¬∞C", "15.*37.*¬∞?C"),
            ("Untersee", "Untersee"),
            ("2.8 Mb", "2\.8.*Mb"),
            ("C15:0", "C\s*15\s*:\s*0")
        ]
        
        found_references = 0
        
        for ref_desc, pattern in reference_checks:
            found = False
            for key, result in all_results.items():
                if re.search(pattern, result['text'], re.IGNORECASE):
                    found = True
                    print(f"   ‚úÖ {ref_desc}: –Ω–∞–π–¥–µ–Ω–æ –≤ {key}")
                    print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {result['metadata'].get('source_pdf', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    break
            
            if not found:
                print(f"   ‚ùå {ref_desc}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            else:
                found_references += 1
        
        coverage = int((found_references / len(reference_checks)) * 100)
        print(f"\nüìä –ü–û–ö–†–´–¢–ò–ï –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•: {coverage}% ({found_references}/{len(reference_checks)})")
        
        if coverage < 50:
            print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
            print(f"   ‚Ä¢ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ GW1-59T –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–ª–æ—Ö–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã")
            print(f"   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏")
            print(f"   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö PDF —Ñ–∞–π–ª–æ–≤")
        
        return coverage >= 50
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = find_correct_strain_data()
    
    if success:
        print(f"\n‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!")
    else:
        print(f"\n‚ùå –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ï –Ω–∞–π–¥–µ–Ω—ã!")
        print(f"üí° –¢—Ä–µ–±—É–µ—Ç—Å—è:")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ PDF")
        print(f"   ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        print(f"   ‚Ä¢ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å –ª—É—á—à–∏–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º")
    
    sys.exit(0 if success else 1) 