#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —à—Ç–∞–º–º–µ GW1-59T –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ PDF
"""
import sys
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def validate_antarcticus_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± antarcticus –≤ –∏—Å—Ö–æ–¥–Ω–æ–º PDF"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –û LYSOBACTER ANTARCTICUS GW1-59T")
    print("=" * 60)
    
    try:
        from lysobacter_rag.pdf_extractor.pdf_extractor import PDFExtractor
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        pdf_path = Path("data/Lysobacter antarcticus .pdf")
        
        if not pdf_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
            return False
        
        print(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {pdf_path}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        extractor = PDFExtractor()
        document = extractor.extract_pdf(pdf_path)
        
        if not document:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF")
            return False
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        full_text = ""
        for page in document.pages:
            full_text += page.text + "\n"
        
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(document.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîç –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –î–ê–ù–ù–´–•:")
        
        # 1. –ù–æ–º–µ—Ä —à—Ç–∞–º–º–∞
        strain_patterns = [
            r'GW1-?59T',
            r'GW1-?\s*5\s*9T?',
            r'strain\s+GW1[^\w]*59T?'
        ]
        
        strain_found = False
        for pattern in strain_patterns:
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            if matches:
                print(f"   ‚úÖ –®—Ç–∞–º–º –Ω–∞–π–¥–µ–Ω: {matches} (–ø–∞—Ç—Ç–µ—Ä–Ω: {pattern})")
                strain_found = True
        
        if not strain_found:
            print(f"   ‚ùå –®—Ç–∞–º–º GW1-59T –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # 2. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–æ—Å—Ç–∞
        temp_patterns = [
            r'(\d+)[-‚Äì]\s*(\d+)\s*¬∞?C',
            r'temperature[s]?\s+[\w\s]*?(\d+)[-‚Äì]\s*(\d+)',
            r'grow[s]?\s+[\w\s]*?(\d+)[-‚Äì]\s*(\d+)\s*¬∞?C'
        ]
        
        temp_found = False
        for pattern in temp_patterns:
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            if matches:
                for match in matches:
                    temp_range = f"{match[0]}‚Äì{match[1]}¬∞C"
                    print(f"   ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_range}")
                    temp_found = True
        
        if not temp_found:
            print(f"   ‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # 3. pH –¥–∏–∞–ø–∞–∑–æ–Ω
        ph_patterns = [
            r'pH\s*(\d+\.?\d*)[-‚Äì]\s*(\d+\.?\d*)',
            r'pH\s+range[s]?\s+[\w\s]*?(\d+\.?\d*)[-‚Äì]\s*(\d+\.?\d*)',
            r'grow[s]?\s+[\w\s]*?pH\s*(\d+\.?\d*)[-‚Äì]\s*(\d+\.?\d*)'
        ]
        
        ph_found = False
        for pattern in ph_patterns:
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            if matches:
                for match in matches:
                    ph_range = f"pH {match[0]}‚Äì{match[1]}"
                    print(f"   ‚úÖ pH –¥–∏–∞–ø–∞–∑–æ–Ω: {ph_range}")
                    ph_found = True
        
        if not ph_found:
            print(f"   ‚ùå pH –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # 4. –ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã
        fatty_patterns = [
            r'C\s*(\d+)\s*:\s*(\d+)',
            r'fatty\s+acid[s]?\s+[\w\s]*?C\s*(\d+)\s*:\s*(\d+)',
            r'iso[-\s]*C\s*(\d+)\s*:\s*(\d+)'
        ]
        
        fatty_acids = set()
        for pattern in fatty_patterns:
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            for match in matches:
                fatty_acids.add(f"C{match[0]}:{match[1]}")
        
        if fatty_acids:
            print(f"   ‚úÖ –ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã: {', '.join(sorted(fatty_acids))}")
        else:
            print(f"   ‚ùå –ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 5. –†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞
        genome_patterns = [
            r'(\d+\.?\d*)\s*(Mb|megabas)',
            r'genome\s+size[s]?\s+[\w\s]*?(\d+\.?\d*)\s*(Mb|megabas)',
            r'(\d+\.?\d*)\s*million\s+base'
        ]
        
        genome_found = False
        for pattern in genome_patterns:
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            if matches:
                for match in matches:
                    genome_size = f"{match[0]} {match[1]}"
                    print(f"   ‚úÖ –†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞: {genome_size}")
                    genome_found = True
        
        if not genome_found:
            print(f"   ‚ùå –†–∞–∑–º–µ—Ä –≥–µ–Ω–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # 6. –ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏
        location_patterns = [
            r'Untersee',
            r'Lake\s+Untersee',
            r'Antarctica[n]?\s+lake',
            r'freshwater\s+lake.*Antarctica'
        ]
        
        location_found = False
        for pattern in location_patterns:
            if re.search(pattern, full_text, re.IGNORECASE):
                print(f"   ‚úÖ –ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏: –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{pattern}'")
                location_found = True
                break
        
        if not location_found:
            print(f"   ‚ùå –ú–µ—Å—Ç–æ –Ω–∞—Ö–æ–¥–∫–∏ (Lake Untersee) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        print(f"\nüîç –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–´–• –§–†–ê–ì–ú–ï–ù–¢–û–í:")
        
        # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —à—Ç–∞–º–º–æ–≤
        broken_strains = re.findall(r'GW1-?\s*\d+\s+\d+T?', full_text)
        if broken_strains:
            print(f"   ‚ö†Ô∏è –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —à—Ç–∞–º–º—ã: {broken_strains}")
        
        # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
        broken_chem = re.findall(r'C\s+\d+\s*:\s*\d+', full_text)
        if broken_chem:
            print(f"   ‚ö†Ô∏è –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã: {broken_chem}")
        
        # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
        broken_numbers = re.findall(r'\d+\s*\.\s*\d+', full_text)
        if broken_numbers:
            print(f"   ‚ö†Ô∏è –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞: {broken_numbers[:5]}...")
        
        # –ò—â–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"\nüéØ –ü–û–ò–°–ö –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•:")
        
        reference_data = {
            "pH 9.0‚Äì11.0": [r'pH\s*9\.0[^0-9]*11\.0', r'pH.*9[^0-9]*11'],
            "15‚Äì37¬∞C": [r'15[^0-9]*37.*¬∞?C', r'15.*37.*temperature'],
            "Untersee": [r'Untersee'],
            "2.8 Mb": [r'2\.8.*Mb', r'2\.8.*megabas'],
            "C15:0": [r'C\s*15\s*:\s*0'],
            "Antarctica": [r'Antarctica[n]?']
        }
        
        found_references = 0
        for ref_name, patterns in reference_data.items():
            found = False
            for pattern in patterns:
                if re.search(pattern, full_text, re.IGNORECASE):
                    print(f"   ‚úÖ {ref_name}: –Ω–∞–π–¥–µ–Ω–æ")
                    found = True
                    found_references += 1
                    break
            
            if not found:
                print(f"   ‚ùå {ref_name}: –ù–ï –Ω–∞–π–¥–µ–Ω–æ")
        
        coverage = int((found_references / len(reference_data)) * 100)
        
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
        print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {coverage}% ({found_references}/{len(reference_data)})")
        print(f"   –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(document.pages)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å GW1-59T
        print(f"\nüìã –§–†–ê–ì–ú–ï–ù–¢ –° –£–ü–û–ú–ò–ù–ê–ù–ò–ï–ú –®–¢–ê–ú–ú–ê:")
        strain_context = find_strain_context(full_text)
        if strain_context:
            print(f"   {strain_context[:200]}...")
        else:
            print(f"   ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return coverage >= 50
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def find_strain_context(text):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —à—Ç–∞–º–º–∞"""
    
    patterns = [
        r'GW1-?59T',
        r'GW1-?\s*5\s*9T?',
        r'strain\s+GW1[^\w]*59T?'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            start = max(0, match.start() - 100)
            end = min(len(text), match.end() + 100)
            return text[start:end]
    
    return None

def demonstrate_quality_fixes():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print(f"\nüîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–ô –ö–ê–ß–ï–°–¢–í–ê:")
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    problem_texts = [
        "strain GW1-5 9T was isolated from Lake",
        "Growth occurs at pH 9 . 0 ‚Äì 11 . 0 and",
        "temperature range of 15 ‚Äì 37 ¬∞C",
        "fatty acids include C 15 : 0 and iso- C 11 : 0",
        "genome size of 2 . 8 Mb contains 2487 genes"
    ]
    
    # –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    quality_rules = [
        (r'GW\s*1-\s*5\s*9\s*T', 'GW1-59T'),
        (r'pH\s+(\d+\.?\d*)\s*[-‚Äì]\s*(\d+\.?\d*)', r'pH \1‚Äì\2'),
        (r'(\d+)\s*[-‚Äì]\s*(\d+)\s*¬∞?\s*C', r'\1‚Äì\2¬∞C'),
        (r'C\s+(\d+)\s*:\s*(\d+)', r'C\1:\2'),
        (r'iso-\s*C\s+(\d+)', r'iso-C\1'),
        (r'(\d+)\s*\.\s*(\d+)', r'\1.\2'),
    ]
    
    for text in problem_texts:
        fixed_text = text
        for pattern, replacement in quality_rules:
            fixed_text = re.sub(pattern, replacement, fixed_text)
        
        if fixed_text != text:
            print(f"   ‚úÖ '{text}' ‚Üí '{fixed_text}'")
        else:
            print(f"   ‚ö™ '{text}' (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")

if __name__ == "__main__":
    print("üéØ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –û LYSOBACTER ANTARCTICUS")
    print("=" * 70)
    
    success = validate_antarcticus_data()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    demonstrate_quality_fixes()
    
    if success:
        print(f"\n‚úÖ –≠–¢–ê–õ–û–ù–ù–´–ï –î–ê–ù–ù–´–ï –ù–ê–ô–î–ï–ù–´ –í PDF!")
        print(f"üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
        print(f"   ‚Ä¢ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –î–ê–ù–ù–´–ï –û–¢–°–£–¢–°–¢–í–£–Æ–¢")
        print(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
        print(f"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∏–∑ PDF")
        print(f"   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    
    sys.exit(0 if success else 1) 