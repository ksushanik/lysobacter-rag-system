#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à—Ç–∞–º–º–∞ GW1-59T
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ä–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

from lysobacter_rag.rag_pipeline.enhanced_rag import EnhancedRAGPipeline
from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
from config import config

def test_gw1_strain():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —à—Ç–∞–º–º–∞ GW1-59T –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"""
    
    query = "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?"
    
    print("üß¨ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –®–¢–ê–ú–ú–ê GW1-59T")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
    print("\nüß† –£–õ–£–ß–®–ï–ù–ù–ê–Ø RAG –°–ò–°–¢–ï–ú–ê:")
    print("-" * 30)
    
    try:
        enhanced_rag = EnhancedRAGPipeline()
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è RAG –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à—Ç–∞–º–º–∞
        strain_name = enhanced_rag._extract_strain_name(query)
        print(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞–º–º–∞: '{strain_name}'")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ (–±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API)
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")
        
        if strain_name:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            results = enhanced_rag._enhanced_strain_search(query, strain_name)
            print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(results)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            table_count = len([r for r in results if r['metadata'].get('chunk_type') == 'table'])
            text_count = len([r for r in results if r['metadata'].get('chunk_type') == 'text'])
            
            print(f"   üìä –¢–∞–±–ª–∏—Ü—ã: {table_count}")
            print(f"   üìù –¢–µ–∫—Å—Ç: {text_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            avg_relevance = sum(r.get('relevance_score', 0) for r in results) / len(results) if results else 0
            print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {avg_relevance:.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            unique_sources = set(r['metadata'].get('source_pdf', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω') for r in results)
            print(f"   üìö –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(unique_sources)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ù–ê–ô–î–ï–ù–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò:")
            for i, result in enumerate(results[:3], 1):
                content = result.get('text', '')[:100]
                relevance = result.get('relevance_score', 0)
                chunk_type = result['metadata'].get('chunk_type', 'unknown')
                
                print(f"   {i}. [{chunk_type.upper()}] (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.3f})")
                print(f"      {content}...")
                print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG: {str(e)}")
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("\n‚ö° –ë–ê–ó–û–í–ê–Ø RAG –°–ò–°–¢–ï–ú–ê:")
    print("-" * 30)
    
    try:
        basic_rag = RAGPipeline()
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è RAG –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        basic_results = basic_rag.indexer.search(query, top_k=config.RAG_TOP_K)
        print(f"üìä –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(basic_results)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        table_count = len([r for r in basic_results if r['metadata'].get('chunk_type') == 'table'])
        text_count = len([r for r in basic_results if r['metadata'].get('chunk_type') == 'text'])
        
        print(f"   üìä –¢–∞–±–ª–∏—Ü—ã: {table_count}")
        print(f"   üìù –¢–µ–∫—Å—Ç: {text_count}")
        
        avg_relevance = sum(r.get('relevance_score', 0) for r in basic_results) / len(basic_results) if basic_results else 0
        print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {avg_relevance:.3f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–π RAG: {str(e)}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú:")
    print("-" * 30)
    print(f"{'–ê—Å–ø–µ–∫—Ç':<25} {'–ë–∞–∑–æ–≤–∞—è':<10} {'–£–ª—É—á—à–µ–Ω–Ω–∞—è':<12}")
    print("-" * 50)
    
    if 'results' in locals() and 'basic_results' in locals():
        print(f"{'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤':<25} {len(basic_results):<10} {len(results):<12}")
        print(f"{'–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥.)':<25} {avg_relevance:.3f}    {sum(r.get('relevance_score', 0) for r in results) / len(results):.3f}")
        print(f"{'–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':<25} {'–ù–µ—Ç':<10} {'–î–∞ (7 —Ç–∏–ø–æ–≤)':<12}")
        print(f"{'–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —à—Ç–∞–º–º–∞':<25} {'–ù–µ—Ç':<10} {'–î–∞':<12}")
    
    print(f"\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ª—É—á—à–µ–Ω–Ω—É—é RAG –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à—Ç–∞–º–º–æ–≤")
    print("   ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—Ö–æ–¥–∏—Ç –≤ 2-3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —à—Ç–∞–º–º–æ–≤")
    print("   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–∞—é—Ç –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    
    print(f"\nüåê –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make web")
    print("   2. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Chat (—ç–∫–æ–Ω–æ–º–∏—è API)")
    print("   3. –ù–∞–∂–º–∏—Ç–µ 'üß† –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç'")
    print("   4. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π 'üîç –ù–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏'")

if __name__ == "__main__":
    test_gw1_strain() 