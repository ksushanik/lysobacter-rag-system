#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä PDF —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
"""
import sys
import re
from pathlib import Path
import pdfplumber
import fitz  # PyMuPDF

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
sys.path.insert(0, str(Path(__file__).parent.parent))

def fix_text_quality(text):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
    text = re.sub(r'C\s+(\d+)\s*:\s*(\d+)', r'C\1:\2', text)  # C 15 : 0 ‚Üí C15:0
    text = re.sub(r'iso-\s*C\s+(\d+)', r'iso-C\1', text)  # iso- C 15 ‚Üí iso-C15
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —à—Ç–∞–º–º–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
    text = re.sub(r'GW1-\s*5\s*9T', 'GW1-59T', text)  # GW1-5 9T ‚Üí GW1-59T
    text = re.sub(r'GW1-\s+59T', 'GW1-59T', text)  # GW1- 59T ‚Üí GW1-59T
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    text = re.sub(r'(\d+)\s*‚Äì\s*(\d+)\s*¬∞?\s*C', r'\1‚Äì\2¬∞C', text)  # 15 ‚Äì 37 C ‚Üí 15‚Äì37¬∞C
    text = re.sub(r'(\d+)\s*uC', r'\1¬∞C', text)  # 30 uC ‚Üí 30¬∞C
    
    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º pH –¥–∞–Ω–Ω—ã–µ
    text = re.sub(r'pH\s+(\d+)\s*‚Äì\s*(\d+)', r'pH \1‚Äì\2', text)  # pH 9 ‚Äì 11 ‚Üí pH 9‚Äì11
    text = re.sub(r'pH\s+(\d+\.?\d*)', r'pH \1', text)  # pH 9 . 0 ‚Üí pH 9.0
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–µ–Ω–æ–º–µ
    text = re.sub(r'(\d+),(\d+),(\d+)\s*bp', r'\1,\2,\3 bp', text)  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥–µ–Ω–æ–º–∞
    text = re.sub(r'(\d+\.?\d*)\s*Mb', r'\1 Mb', text)  # 2 . 8 Mb ‚Üí 2.8 Mb
    
    # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã ‚Üí –æ–¥–∏–Ω–∞—Ä–Ω—ã–π
    text = text.strip()
    
    # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∏—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö
    text = re.sub(r'([a-z])([A-Z])', r'\1 \2', text)  # camelCase ‚Üí camel Case
    text = re.sub(r'(\d+)([A-Za-z])', r'\1 \2', text)  # 30C ‚Üí 30 C
    text = re.sub(r'([A-Za-z])(\d+)', r'\1 \2', text)  # pH9 ‚Üí pH 9
    
    return text

def extract_with_quality_fixes(pdf_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {pdf_path.name}")
    
    extracted_texts = []
    
    # –ú–µ—Ç–æ–¥ 1: pdfplumber (–ª—É—á—à–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü)
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page_num, page in enumerate(pdf.pages, 1):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                text = page.extract_text()
                if text:
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                    fixed_text = fix_text_quality(text)
                    extracted_texts.append({
                        'page': page_num,
                        'method': 'pdfplumber',
                        'text': fixed_text
                    })
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω–æ
                tables = page.extract_tables()
                for table_idx, table in enumerate(tables):
                    if table:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ç–µ–∫—Å—Ç
                        table_text = "\n".join([
                            " | ".join([str(cell) if cell else "" for cell in row])
                            for row in table if row
                        ])
                        fixed_table = fix_text_quality(table_text)
                        extracted_texts.append({
                            'page': page_num,
                            'method': 'table',
                            'text': f"–¢–ê–ë–õ–ò–¶–ê {table_idx + 1}:\n{fixed_table}"
                        })
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ pdfplumber: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: PyMuPDF (–ª—É—á—à–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
    try:
        doc = fitz.open(pdf_path)
        for page_num in range(len(doc)):
            page = doc[page_num]
            text = page.get_text()
            if text:
                fixed_text = fix_text_quality(text)
                extracted_texts.append({
                    'page': page_num + 1,
                    'method': 'pymupdf',
                    'text': fixed_text
                })
        doc.close()
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ PyMuPDF: {e}")
    
    return extracted_texts

def test_extraction_quality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ñ–∞–π–ª–æ–≤"""
    
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    from config import config
    data_dir = Path(config.DATA_DIR)
    
    if not data_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    pdf_files = list(data_dir.glob("*.pdf"))
    
    if not pdf_files:
        print(f"‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {data_dir}")
        return False
    
    # –ò—â–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ GW1-59T/antarcticus
    target_file = None
    for pdf_file in pdf_files:
        if 'antarcticus' in pdf_file.name.lower():
            target_file = pdf_file
            break
    
    if not target_file:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        target_file = pdf_files[0]
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–∞–π–ª–µ: {target_file.name}")
    
    extracted_texts = extract_with_quality_fixes(target_file)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(extracted_texts)}")
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è GW1-59T
    gw1_mentions = []
    for block in extracted_texts:
        if 'GW1-59T' in block['text'] or 'antarcticus' in block['text'].lower():
            gw1_mentions.append(block)
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π GW1-59T/antarcticus: {len(gw1_mentions)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if gw1_mentions:
        print(f"\nüìù –ü–†–ò–ú–ï–†–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê:")
        for i, mention in enumerate(gw1_mentions[:3], 1):
            print(f"\n   {i}. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {mention['page']} ({mention['method']}):")
            text_preview = mention['text'][:200] + "..." if len(mention['text']) > 200 else mention['text']
            print(f"      {text_preview}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    quality_tests = {
        'GW1-59T –Ω–∞–π–¥–µ–Ω': any('GW1-59T' in block['text'] for block in extracted_texts),
        '–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã': any(re.search(r'C\d+:\d+', block['text']) for block in extracted_texts),
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ': any(re.search(r'\d+‚Äì\d+¬∞C', block['text']) for block in extracted_texts),
        'pH –¥–∞–Ω–Ω—ã–µ': any(re.search(r'pH \d+', block['text']) for block in extracted_texts)
    }
    
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
    for test, result in quality_tests.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {status} {test}")
    
    passed_tests = sum(quality_tests.values())
    total_tests = len(quality_tests)
    
    print(f"\nüìä –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests >= total_tests * 0.75:
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = test_extraction_quality()
    
    if success:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø:")
        print("1. –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É —Å –Ω–æ–≤—ã–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–º")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é pdfplumber + PyMuPDF")
        print("3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞")
    
    sys.exit(0 if success else 1) 