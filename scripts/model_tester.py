#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π
==================================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
–æ —à—Ç–∞–º–º–µ GW1-59T –∏ –¥—Ä—É–≥–∏—Ö –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏—è—Ö.
"""

import sys
import os
import time
from pathlib import Path
from typing import Dict, List
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from lysobacter_rag.rag_pipeline.rag_pipeline import RAGPipeline
from config import config
import logging

logger = logging.getLogger(__name__)

class ModelTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.test_queries = [
            "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?",
            "GW1-59T strain characteristics", 
            "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è –ª–∏–∑–æ–±–∞–∫—Ç–µ—Ä–∏–π GW1-59T",
            "–ì–¥–µ –±—ã–ª –≤—ã–¥–µ–ª–µ–Ω —à—Ç–∞–º–º GW1-59T?",
            "–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ GW1-59T",
            "–§–∏–ª–æ–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ GW1-59T"
        ]
        
        self.models_to_test = [
            "deepseek/deepseek-chat",
            "deepseek/deepseek-v3-base:free", 
            "deepseek/deepseek-chat-v3-0324:free",
            "deepseek/deepseek-r1:free",
            "google/gemini-2.0-flash-exp:free"
        ]
    
    def test_model(self, model_name: str, query: str = None) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            query: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ GW1-59T)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print(f"üî¨ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å: {model_name}")
        print("=" * 50)
        
        if query is None:
            query = "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?"
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        original_model = config.OPENROUTER_MODEL
        config.OPENROUTER_MODEL = model_name
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG pipeline
            rag = RAGPipeline()
            
            start_time = time.time()
            
                         # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = rag.ask_question(query)
            
            end_time = time.time()
            response_time = end_time - start_time
            
            print(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(result.get('sources', []))}")
            print("\nüí¨ –û—Ç–≤–µ—Ç:")
            print("-" * 40)
            print(result.get('answer', '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω'))
            print("-" * 40)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            if result.get('sources'):
                print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(result['sources'])}):")
                for i, source in enumerate(result['sources'][:3], 1):
                    print(f"  {i}. {source.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
                          f"(—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source.get('score', 0):.3f})")
            
            return {
                'model': model_name,
                'query': query,
                'answer': result.get('answer', ''),
                'response_time': response_time,
                'sources_count': len(result.get('sources', [])),
                'success': True,
                'error': None
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return {
                'model': model_name,
                'query': query,
                'answer': '',
                'response_time': 0,
                'sources_count': 0,
                'success': False,
                'error': str(e)
            }
        
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            config.OPENROUTER_MODEL = original_model
    
    def compare_models(self, models: List[str] = None, query: str = None) -> List[Dict]:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π
        
        Args:
            models: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            query: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        if models is None:
            models = self.models_to_test
            
        if query is None:
            query = "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?"
        
        print(f"üèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
        print("=" * 60)
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
        print("=" * 60)
        
        results = []
        
        for model in models:
            print(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä—É—é: {model}")
            print("-" * 40)
            
            result = self.test_model(model, query)
            results.append(result)
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 60)
        
        successful_models = [r for r in results if r['success']]
        
        if successful_models:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            by_speed = sorted(successful_models, key=lambda x: x['response_time'])
            print(f"üöÄ –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è: {by_speed[0]['model']} ({by_speed[0]['response_time']:.2f}—Å)")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            by_sources = sorted(successful_models, key=lambda x: x['sources_count'], reverse=True)
            print(f"üìö –ë–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {by_sources[0]['model']} ({by_sources[0]['sources_count']} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        failed_models = [r for r in results if not r['success']]
        if failed_models:
            print(f"\n‚ùå –ú–æ–¥–µ–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏:")
            for result in failed_models:
                print(f"   ‚Ä¢ {result['model']}: {result['error']}")
        
        return results
    
    def benchmark_all_queries(self, model: str) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            
        Returns:
            Dict: –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞
        """
        print(f"üìã –ü–û–õ–ù–´–ô –ë–ï–ù–ß–ú–ê–†–ö –ú–û–î–ï–õ–ò: {model}")
        print("=" * 60)
        
        results = []
        total_time = 0
        
        for i, query in enumerate(self.test_queries, 1):
            print(f"\nüîç –ó–∞–ø—Ä–æ—Å {i}/{len(self.test_queries)}: {query}")
            print("-" * 40)
            
            result = self.test_model(model, query)
            results.append(result)
            
            if result['success']:
                total_time += result['response_time']
            
            time.sleep(1)
        
        # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = [r for r in results if r['success']]
        success_rate = len(successful) / len(results) * 100
        avg_time = total_time / len(successful) if successful else 0
        avg_sources = sum(r['sources_count'] for r in successful) / len(successful) if successful else 0
        
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 40)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful)}/{len(results)} ({success_rate:.1f}%)")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f} —Å–µ–∫")
        print(f"üìö –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {avg_sources:.1f}")
        
        return {
            'model': model,
            'total_queries': len(self.test_queries),
            'successful_queries': len(successful),
            'success_rate': success_rate,
            'average_response_time': avg_time,
            'average_sources': avg_sources,
            'detailed_results': results
        }

def test_model(model_name: str, query: str = None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    tester = ModelTester()
    tester.test_model(model_name, query)

def compare_models(models: List[str] = None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    tester = ModelTester()
    tester.compare_models(models)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –º–æ–¥–µ–ª–µ–π")
    parser.add_argument('--model', help='–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--query', default='–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ —à—Ç–∞–º–º–µ GW1-59T?', help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    parser.add_argument('--compare', action='store_true', help='–°—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π')
    parser.add_argument('--benchmark', action='store_true', help='–ü–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –º–æ–¥–µ–ª–∏')
    
    args = parser.parse_args()
    
    tester = ModelTester()
    
    if args.compare:
        tester.compare_models()
    elif args.benchmark and args.model:
        tester.benchmark_all_queries(args.model)
    elif args.model:
        tester.test_model(args.model, args.query)
    else:
        print("–£–∫–∞–∂–∏—Ç–µ --model –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ --compare –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 