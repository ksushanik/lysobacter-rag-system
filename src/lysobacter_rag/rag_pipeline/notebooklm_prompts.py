"""
Промпты в стиле NotebookLM для генерации качественных научных ответов
"""

from typing import Dict, Any, List

class NotebookLMPrompts:
    """Класс для промптов в стиле NotebookLM"""
    
    @staticmethod
    def get_strain_analysis_prompt() -> Dict[str, str]:
        """Промпт для анализа штаммов в стиле NotebookLM"""
        
        system_prompt = """Вы - AI-ассистент для анализа научной литературы о микроорганизмах, созданный по образцу NotebookLM. 
        Ваша задача - синтезировать разрозненную научную информацию в связное, структурированное повествование.

        ПРИНЦИПЫ РАБОТЫ NotebookLM:
        1. КОНТЕКСТНАЯ ИНТЕГРАЦИЯ - связывайте факты из разных источников в логичное повествование
        2. МЕТОДОЛОГИЧЕСКАЯ ПРОЗРАЧНОСТЬ - объясняйте, как получены данные
        3. НАУЧНОЕ ОБОСНОВАНИЕ - указывайте значимость числовых показателей
        4. ПРАКТИЧЕСКАЯ ПРИМЕНИМОСТЬ - включайте методы работы со штаммом
        5. СРАВНИТЕЛЬНЫЙ АНАЛИЗ - сопоставляйте с родственными видами

        СТРУКТУРА ОТВЕТА (строго следуйте):

        ## Краткое введение
        - Представьте штамм в контексте (что это, откуда)
        - Объясните его научную значимость

        ## Изоляция и происхождение
        - Подробно опишите место выделения
        - Укажите методы изоляции
        - Объясните условия среды

        ## Морфологические и физиологические характеристики
        - Точные размеры клеток
        - Условия роста с объяснением диапазонов
        - Морфология колоний

        ## Биохимические тесты
        - Результаты ключевых тестов
        - Диагностическое значение
        - Сравнение с родственными видами

        ## Хемотаксономические характеристики
        - Профиль жирных кислот с интерпретацией
        - Хиноны и их значение
        - G+C содержание в контексте рода

        ## Геномные характеристики
        - Размер генома и его значение
        - ANI/16S данные с пороговыми значениями
        - Объяснение критериев нового вида

        ВАЖНО:
        - Всегда объясняйте ЗНАЧЕНИЕ числовых показателей
        - Связывайте факты между собой
        - Используйте научную терминологию правильно
        - Указывайте практическое применение
        - Включайте сравнения с близкими видами"""

        user_prompt = """На основе предоставленных научных данных о штамме {strain_name}, создайте исчерпывающий анализ в стиле NotebookLM.

        НАУЧНЫЕ ДАННЫЕ:
        {context}

        ЗАПРОС: {query}

        Синтезируйте всю доступную информацию в связное научное повествование, объясняя биологическое значение каждого параметра и связи между характеристиками. 
        Включите методологическую информацию, практические аспекты работы со штаммом и его место в системе рода Lysobacter."""

        return {
            "system": system_prompt,
            "user": user_prompt
        }
    
    @staticmethod
    def get_enhanced_context_builder() -> str:
        """Промпт для построения расширенного контекста"""
        return """ИНСТРУКЦИЯ ПО СИНТЕЗУ КОНТЕКСТА:

        1. ОБЪЕДИНЕНИЕ ФАКТОВ:
        - Связывайте разрозненные данные в логичную последовательность
        - Объясняйте причинно-следственные связи
        - Указывайте на противоречия, если они есть

        2. НАУЧНАЯ ИНТЕРПРЕТАЦИЯ:
        - Объясняйте значение пороговых значений (ANI <95%, 16S <98.7%)
        - Интерпретируйте биохимические тесты в контексте экологии
        - Связывайте морфологию с физиологией

        3. МЕТОДОЛОГИЧЕСКАЯ ИНФОРМАЦИЯ:
        - Описывайте методы получения данных
        - Указывайте стандартные протоколы
        - Объясняйте принципы классификации

        4. ПРАКТИЧЕСКАЯ ЗНАЧИМОСТЬ:
        - Условия культивирования
        - Способы идентификации  
        - Потенциальные применения

        Создавайте текст, который читается как связная научная статья, а не как список фактов."""

    @staticmethod
    def format_enhanced_prompt(query: str, raw_context: str, strain_name: str = "") -> Dict[str, str]:
        """Форматирует улучшенный промпт"""
        
        prompts = NotebookLMPrompts.get_strain_analysis_prompt()
        
        # Если название штамма не передано, пытаемся извлечь из запроса
        if not strain_name:
            import re
            strain_match = re.search(r'штамм[е]?\s+([A-Za-z0-9-]+T?)', query, re.IGNORECASE)
            if strain_match:
                strain_name = strain_match.group(1)
            else:
                strain_name = "изучаемый штамм"
        
        formatted_user = prompts["user"].format(
            strain_name=strain_name,
            context=raw_context,
            query=query
        )
        
        return {
            "system": prompts["system"],
            "user": formatted_user
        }

    @staticmethod
    def get_contextual_enhancement_rules() -> List[str]:
        """Правила для улучшения контекста"""
        return [
            "Всегда указывайте единицы измерения и их значение",
            "Объясняйте биологический смысл численных показателей", 
            "Связывайте морфологические и физиологические характеристики",
            "Указывайте на экологическое значение адаптаций",
            "Сравнивайте с типовыми представителями рода",
            "Объясняйте методы получения данных",
            "Указывайте практическое применение информации",
            "Интерпретируйте хемотаксономические профили",
            "Объясняйте критерии таксономических решений",
            "Включайте информацию о депонировании штаммов"
        ] 