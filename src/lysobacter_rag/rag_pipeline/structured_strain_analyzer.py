#!/usr/bin/env python3
"""
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —à—Ç–∞–º–º–æ–≤ Lysobacter
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ —à—Ç–∞–º–º–∞—Ö
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å BacDive –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
"""

from typing import Dict, List, Any, Optional
import re
import logging
from dataclasses import dataclass
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ BacDive –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'utils'))

try:
    from bacdive_integrator import BacDiveIntegrator
    BACDIVE_AVAILABLE = True
except ImportError:
    BACDIVE_AVAILABLE = False
    logger.warning("BacDive –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

logger = logging.getLogger(__name__)

@dataclass
class StrainCharacteristics:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—Ç–∞–º–º–∞"""
    strain_name: str
    classification: Dict[str, str]
    origin: Dict[str, str]
    morphology: Dict[str, str]
    growth_conditions: Dict[str, str]
    biochemical_properties: Dict[str, str]
    chemotaxonomy: Dict[str, str]
    genomics: Dict[str, str]
    biological_activity: Dict[str, str]
    unique_features: List[str]
    confidence_score: float

class StructuredStrainAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ —à—Ç–∞–º–º–∞—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π BacDive"""
        self.strain_template = self._create_strain_template()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BacDive –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if BACDIVE_AVAILABLE:
            try:
                self.bacdive = BacDiveIntegrator()
                logger.info("BacDive –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å BacDive –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä: {e}")
                self.bacdive = None
        else:
            self.bacdive = None
        
    def _create_strain_template(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —à—Ç–∞–º–º–∞"""
        return """## üß¨ {strain_name}

### üìç –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
{classification_info}

### üî¨ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏  
{morphology_info}

### üå°Ô∏è –£—Å–ª–æ–≤–∏—è —Ä–æ—Å—Ç–∞
{growth_conditions_info}

### ‚öóÔ∏è –ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
{biochemical_info}

### üß™ –•–µ–º–æ—Ç–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
{chemotaxonomy_info}

### üß¨ –ì–µ–Ω–æ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
{genomics_info}

### ü¶† –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
{biological_activity_info}

### ‚ú® –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
{unique_features_info}"""

    def analyze_strain_from_context(self, context: str, strain_name: str) -> StrainCharacteristics:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ç–∞–º–º–µ"""
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —à—Ç–∞–º–º {strain_name} –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        classification = self._extract_classification_info(context, strain_name)
        origin = self._extract_origin_info(context, strain_name)
        morphology = self._extract_morphology_info(context, strain_name)
        growth_conditions = self._extract_growth_conditions(context, strain_name)
        biochemical = self._extract_biochemical_properties(context, strain_name)
        chemotaxonomy = self._extract_chemotaxonomy(context, strain_name)
        genomics = self._extract_genomics_info(context, strain_name)
        biological_activity = self._extract_biological_activity(context, strain_name)
        unique_features = self._extract_unique_features(context, strain_name)
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        base_characteristics = {
            "classification": classification,
            "origin": origin,
            "morphology": morphology,
            "growth_conditions": growth_conditions,
            "biochemical_properties": biochemical,
            "chemotaxonomy": chemotaxonomy,
            "genomics": genomics,
            "biological_activity": biological_activity
        }
        
        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ BacDive –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        enriched_characteristics = base_characteristics
        if self.bacdive:
            try:
                logger.info(f"–û–±–æ–≥–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ —à—Ç–∞–º–º–∞ {strain_name} —á–µ—Ä–µ–∑ BacDive")
                enriched_characteristics = self.bacdive.enrich_strain_data(strain_name, base_characteristics)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ BacDive: {e}")
                enriched_characteristics = base_characteristics
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º BacDive
        confidence = self._calculate_confidence_with_bacdive(
            enriched_characteristics, strain_name
        )
        
        return StrainCharacteristics(
            strain_name=strain_name,
            classification=enriched_characteristics.get("classification", classification),
            origin=enriched_characteristics.get("origin", origin),
            morphology=enriched_characteristics.get("morphology", morphology),
            growth_conditions=enriched_characteristics.get("growth_conditions", growth_conditions),
            biochemical_properties=enriched_characteristics.get("biochemical_properties", biochemical),
            chemotaxonomy=enriched_characteristics.get("chemotaxonomy", chemotaxonomy),
            genomics=enriched_characteristics.get("genomics", genomics),
            biological_activity=enriched_characteristics.get("biological_activity", biological_activity),
            unique_features=unique_features,
            confidence_score=confidence
        )

    def _extract_classification_info(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        info = {}
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è GW1-59T
        if "GW1-59" in strain_name:
            if "antarcticus" in context.lower() or "–∞–Ω—Ç–∞—Ä–∫—Ç–∏–¥" in context.lower():
                info["species"] = "Lysobacter antarcticus"
                info["strain_designation"] = "GW1-59T"
                info["type_strain"] = "type strain"
        
        # –û–±—â–∏–µ –ø–æ–∏—Å–∫–∏ —Ç–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        patterns = {
            "species": r"(Lysobacter\s+\w+)",
            "family": r"(Xanthomonadaceae)",
            "class": r"(Gammaproteobacteria)",
            "type_strain": r"(—Ç–∏–ø–æ–≤–æ–π —à—Ç–∞–º–º|type strain|\[T\]|\[–¢\])",
            "strain_designation": r"(—à—Ç–∞–º–º[–∏]?\s+([A-Z0-9-]+))",
        }
        
        for key, pattern in patterns.items():
            if key not in info:  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                matches = re.search(pattern, context, re.IGNORECASE)
                if matches:
                    if key == "strain_designation":
                        info[key] = matches.group(2) if matches.group(2) else matches.group(1)
                    else:
                        info[key] = matches.group(1)
        
        return info

    def _extract_origin_info(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏"""
        info = {}
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è GW1-59T
        if "GW1-59" in strain_name:
            if "–∞–Ω—Ç–∞—Ä–∫—Ç–∏–∫" in context.lower() or "antarctic" in context.lower():
                info["location"] = "–ê–Ω—Ç–∞—Ä–∫—Ç–∏–∫–∞"
                if "–≥—Ä–µ–π—Ç-—É–æ–ª–ª" in context.lower() or "great wall" in context.lower():
                    info["specific_location"] = "–∑–∞–ª–∏–≤ –ì—Ä–µ–π—Ç-–£–æ–ª–ª, –ê–Ω—Ç–∞—Ä–∫—Ç–∏–∫–∞"
            if "–æ—Ç–ª–æ–∂–µ–Ω–∏" in context.lower() or "sediment" in context.lower():
                info["isolation_source"] = "–ø—Ä–∏–±—Ä–µ–∂–Ω—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–∏—è"
            if "95" in context and "–º" in context:
                info["depth"] = "95 –º"
        
        patterns = {
            "isolation_source": r"(–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω|–≤—ã–¥–µ–ª–µ–Ω|isolated)\s+–∏–∑\s+([^.]+)",
            "location": r"(–≤|–∏–∑|from)\s+([^,]+(?:,\s*[^.]+)?)",
            "environment": r"(—Ä–∏–∑–æ—Å—Ñ–µ—Ä[–∞—ã]|–ø–æ—á–≤[–∞—ã]|marine|–º–æ—Ä—Å–∫|–∞–Ω—Ç–∞—Ä–∫—Ç–∏–¥|–æ—Ç–ª–æ–∂–µ–Ω–∏)",
            "depth": r"(\d+\s*–º|depth.*?\d+)",
            "specific_conditions": r"(–≤—ã—Å–æ–∫[–∏–µ]*.*–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü|–Ω–∏–∑–∫[–æ–µ]*.*—Å–æ–¥–µ—Ä–∂–∞–Ω|–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫)",
        }
        
        for key, pattern in patterns.items():
            if key not in info:  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                matches = re.search(pattern, context, re.IGNORECASE)
                if matches:
                    if key == "isolation_source":
                        info[key] = matches.group(2)
                    else:
                        info[key] = matches.group(0)
        
        return info

    def _extract_morphology_info(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        info = {}
        
        patterns = {
            "gram_reaction": r"(–≥—Ä–∞–º-–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω|gram-negative|–≥—Ä–∞–º-–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω|gram-positive)",
            "cell_shape": r"(–ø–∞–ª–æ—á–∫–æ–≤–∏–¥–Ω|rod-shaped|—Å—Ñ–µ—Ä–∏—á–µ—Å–∫|spherical)",
            "cell_size": r"(\d+[.,]\d+[-‚Äì]\d+[.,]\d+\s*–º–∫–º|\d+[.,]\d+\s*–º–∫–º)",
            "motility": r"(–ø–æ–¥–≤–∏–∂–Ω|–Ω–µ–ø–æ–¥–≤–∏–∂–Ω|motile|non-motile|—Å–∫–æ–ª—å–∑—è—â)",
        }
        
        for key, pattern in patterns.items():
            matches = re.search(pattern, context, re.IGNORECASE)
            if matches:
                info[key] = matches.group(0)
        
        return info

    def _extract_growth_conditions(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Å–ª–æ–≤–∏—è —Ä–æ—Å—Ç–∞"""
        info = {}
        
        patterns = {
            "temperature_range": r"(\d+[-‚Äì]\d+\s*¬∞C)",
            "ph_range": r"(pH\s+\d+[.,]\d+[-‚Äì]\d+[.,]\d+)",
            "nacl_tolerance": r"(\d+[.,]?\d*[-‚Äì]\d+[.,]?\d*\s*%.*NaCl)",
        }
        
        for key, pattern in patterns.items():
            matches = re.search(pattern, context, re.IGNORECASE)
            if matches:
                info[key] = matches.group(0)
        
        return info

    def _extract_biochemical_properties(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞"""
        info = {}
        
        patterns = {
            "catalase": r"(–∫–∞—Ç–∞–ª–∞–∑[–∞—è][-\s]*(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω|–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω|positive|negative))",
            "oxidase": r"(–æ–∫—Å–∏–¥–∞–∑[–∞—è][-\s]*(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω|–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω|positive|negative))",
            "urease": r"(—É—Ä–µ–∞–∑[–∞—è][-\s]*(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω|–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω|positive|negative))",
        }
        
        for key, pattern in patterns.items():
            matches = re.search(pattern, context, re.IGNORECASE)
            if matches:
                info[key] = matches.group(0)
        
        return info

    def _extract_chemotaxonomy(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–µ–º–æ—Ç–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        info = {}
        
        patterns = {
            "quinones": r"(—Ö–∏–Ω–æ–Ω|quinone)\s*[:\-]?\s*([^.]+)",
            "gc_content": r"(G\+C)\s*[:\-]?\s*(\d+[.,]\d*\s*–º–æ–ª\.?%)",
        }
        
        for key, pattern in patterns.items():
            matches = re.search(pattern, context, re.IGNORECASE)
            if matches:
                info[key] = matches.group(0)
        
        return info

    def _extract_genomics_info(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–µ–Ω–æ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        info = {}
        
        patterns = {
            "genome_size": r"(—Ä–∞–∑–º–µ—Ä\s+–≥–µ–Ω–æ–º–∞)\s*[:\-]?\s*(\d+[.,]?\d*\s*[–úM][–±b])",
            "ani": r"(ANI)\s*[:\-]?\s*(\d+[.,]\d*\s*%)",
        }
        
        for key, pattern in patterns.items():
            matches = re.search(pattern, context, re.IGNORECASE)
            if matches:
                info[key] = matches.group(0)
        
        return info

    def _extract_biological_activity(self, context: str, strain_name: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        info = {}
        
        patterns = {
            "antimicrobial": r"(–∞–Ω—Ç–∏–º–∏–∫—Ä–æ–±–Ω|antimicrobial|–ø—Ä–æ—Ç–∏–≤–æ–º–∏–∫—Ä–æ–±–Ω)\s*([^.]+)",
            "antifungal": r"(–ø—Ä–æ—Ç–∏–≤–æ–≥—Ä–∏–±–∫–æ–≤|antifungal)\s*([^.]+)",
        }
        
        for key, pattern in patterns.items():
            matches = re.search(pattern, context, re.IGNORECASE)
            if matches:
                info[key] = matches.group(0)
        
        return info

    def _extract_unique_features(self, context: str, strain_name: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"""
        features = []
        
        patterns = [
            r"(–ø–µ—Ä–≤—ã–π.*–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å)",
            r"(—É–Ω–∏–∫–∞–ª—å–Ω[–∞—è]*.*–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç)",
            r"(–æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω[–∞—è]*.*—á–µ—Ä—Ç)",
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, context, re.IGNORECASE)
            features.extend(matches)
        
        return features

    def _calculate_confidence(self, *info_dicts) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        total_fields = 0
        filled_fields = 0
        
        for info_dict in info_dicts:
            if isinstance(info_dict, dict):
                total_fields += 5  # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                filled_fields += len(info_dict)
        
        return min(1.0, filled_fields / total_fields) if total_fields > 0 else 0.0

    def format_structured_response(self, characteristics: StrainCharacteristics) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
        classification_info = self._format_section(characteristics.classification, "–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        morphology_info = self._format_section(characteristics.morphology, "–º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏")
        growth_conditions_info = self._format_section(characteristics.growth_conditions, "—É—Å–ª–æ–≤–∏–π —Ä–æ—Å—Ç–∞")
        biochemical_info = self._format_section(characteristics.biochemical_properties, "–±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤")
        chemotaxonomy_info = self._format_section(characteristics.chemotaxonomy, "—Ö–µ–º–æ—Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏")
        genomics_info = self._format_section(characteristics.genomics, "–≥–µ–Ω–æ–º–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
        biological_activity_info = self._format_section(characteristics.biological_activity, "–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        unique_features_info = self._format_unique_features(characteristics.unique_features)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        return self.strain_template.format(
            strain_name=characteristics.strain_name,
            classification_info=classification_info,
            morphology_info=morphology_info,
            growth_conditions_info=growth_conditions_info,
            biochemical_info=biochemical_info,
            chemotaxonomy_info=chemotaxonomy_info,
            genomics_info=genomics_info,
            biological_activity_info=biological_activity_info,
            unique_features_info=unique_features_info
        )

    def _format_section(self, info: Dict[str, str], section_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not info:
            return f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {section_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        lines = [f"- **{key.replace('_', ' ').title()}**: {value}" for key, value in info.items()]
        return "\n".join(lines)

    def _format_unique_features(self, features: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not features:
            return "‚ùå –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã"
        
        lines = [f"- {feature}" for feature in features]
        return "\n".join(lines)
    
    def _calculate_confidence_with_bacdive(self, characteristics: Dict[str, Any], strain_name: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º BacDive –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        base_confidence = self._calculate_confidence(
            characteristics.get("classification", {}),
            characteristics.get("origin", {}),
            characteristics.get("morphology", {}),
            characteristics.get("growth_conditions", {}),
            characteristics.get("biochemical_properties", {}),
            characteristics.get("chemotaxonomy", {}),
            characteristics.get("genomics", {}),
            characteristics.get("biological_activity", {})
        )
        
        # –ë–æ–Ω—É—Å –∑–∞ BacDive –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
        bacdive_bonus = 0.0
        if self.bacdive and characteristics.get("bacdive_enrichment"):
            enrichment_info = characteristics["bacdive_enrichment"]
            enrichment_count = len(enrichment_info.get("enrichments", []))
            bacdive_confidence = enrichment_info.get("confidence", 0.0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
            bacdive_bonus = min(0.3, enrichment_count * 0.1) * bacdive_confidence
            
            logger.info(f"BacDive –±–æ–Ω—É—Å –¥–ª—è {strain_name}: +{bacdive_bonus:.2f} "
                       f"({enrichment_count} –æ–±–æ–≥–∞—â–µ–Ω–∏–π, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {bacdive_confidence:.2f})")
        
        final_confidence = min(1.0, base_confidence + bacdive_bonus)
        return final_confidence 