#!/usr/bin/env python3
"""
Setup script for Lysobacter RAG System
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(cmd, check=True, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –æ–±–æ–ª–æ—á–∫–µ"""
    print(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, check=check, cwd=cwd, 
                              capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        if e.stderr:
            print(f"Stderr: {e.stderr}")
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä—è—é –≤–µ—Ä—Å–∏—é Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 9):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9+, —É –≤–∞—Å {version.major}.{version.minor}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def create_virtual_env():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üì¶ –°–æ–∑–¥–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
    if Path("lysobacter_rag_env").exists():
        print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    if not run_command(f"{sys.executable} -m venv lysobacter_rag_env"):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return False
    
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    return True

def get_pip_path():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    if os.name == 'nt':  # Windows
        return "lysobacter_rag_env/Scripts/pip"
    else:  # Linux/macOS
        return "lysobacter_rag_env/bin/pip"

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üìö –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    pip_path = get_pip_path()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    if not run_command(f"{pip_path} install --upgrade pip"):
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not run_command(f"{pip_path} install -r requirements.txt"):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return False
    
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def setup_config():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    # –ö–æ–ø–∏—Ä—É–µ–º .env.example –≤ .env –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not Path(".env").exists():
        if Path(".env.example").exists():
            shutil.copy(".env.example", ".env")
            print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ —à–∞–±–ª–æ–Ω–∞")
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    dirs_to_create = ["data", "logs", "storage"]
    for dir_name in dirs_to_create:
        Path(dir_name).mkdir(exist_ok=True)
    
    print("‚úÖ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
    return True

def check_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    python_path = get_pip_path().replace("pip", "python")
    
    test_imports = [
        "import streamlit",
        "import chromadb", 
        "import sentence_transformers",
        "from src.lysobacter_rag.indexer.indexer import Indexer"
    ]
    
    for test_import in test_imports:
        cmd = f"{python_path} -c \"{test_import}\""
        if not run_command(cmd, check=False):
            print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º: {test_import}")
        else:
            print(f"‚úÖ {test_import}")
    
    return True

def print_next_steps():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    print("\n" + "="*60)
    print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("="*60)
    print()
    
    activation_cmd = "lysobacter_rag_env\\Scripts\\activate" if os.name == 'nt' else "source lysobacter_rag_env/bin/activate"
    
    print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print()
    print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    print(f"   {activation_cmd}")
    print()
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env:")
    print("   - –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://openrouter.ai/keys")
    print("   - –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env: OPENROUTER_API_KEY=your_key_here")
    print()
    print("3. –î–æ–±–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/")
    print()
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:")
    print("   python run.py web")
    print()
    print("üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/guides/INSTALLATION_GUIDE.md")
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê LYSOBACTER RAG SYSTEM")
    print("="*50)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_python_version():
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    steps = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è", create_virtual_env),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", install_dependencies),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", setup_config),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", check_installation),
    ]
    
    for step_name, step_func in steps:
        print(f"\nüìç {step_name}...")
        if not step_func():
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ: {step_name}")
            sys.exit(1)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_next_steps()

if __name__ == "__main__":
    main() 